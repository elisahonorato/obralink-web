"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry";
exports.ids = ["vendor-chunks/@sentry"];
exports.modules = {

/***/ "(ssr)/./node_modules/@sentry/core/esm/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/esm/constants.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ENVIRONMENT: () => (/* binding */ DEFAULT_ENVIRONMENT)\n/* harmony export */ });\nconst DEFAULT_ENVIRONMENT = \"production\";\n //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLHNCQUFzQjtBQUVHLENBQy9CLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL29icmFsaW5rLXdlYi8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL2NvbnN0YW50cy5qcz8yZTdmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERFRkFVTFRfRU5WSVJPTk1FTlQgPSAncHJvZHVjdGlvbic7XG5cbmV4cG9ydCB7IERFRkFVTFRfRU5WSVJPTk1FTlQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJERUZBVUxUX0VOVklST05NRU5UIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/debug-build.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/esm/debug-build.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD = typeof __SENTRY_DEBUG__ === \"undefined\" || __SENTRY_DEBUG__;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLGNBQWUsT0FBT0MscUJBQXFCLGVBQWVBO0FBRXpDLENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL29icmFsaW5rLXdlYi8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL2RlYnVnLWJ1aWxkLmpzPzA3ZWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0IHsgREVCVUdfQlVJTEQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwiX19TRU5UUllfREVCVUdfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/eventProcessors.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/eventProcessors.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addGlobalEventProcessor: () => (/* binding */ addGlobalEventProcessor),\n/* harmony export */   getGlobalEventProcessors: () => (/* binding */ getGlobalEventProcessors),\n/* harmony export */   notifyEventProcessors: () => (/* binding */ notifyEventProcessors)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/syncpromise.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n\n\n/**\n * Returns the global event processors.\n * @deprecated Global event processors will be removed in v8.\n */ function getGlobalEventProcessors() {\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobalSingleton)(\"globalEventProcessors\", ()=>[]);\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @deprecated Use `addEventProcessor` instead. Global event processors will be removed in v8.\n */ function addGlobalEventProcessor(callback) {\n    // eslint-disable-next-line deprecation/deprecation\n    getGlobalEventProcessors().push(callback);\n}\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */ function notifyEventProcessors(processors, event, hint, index = 0) {\n    return new _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.SyncPromise((resolve, reject)=>{\n        const processor = processors[index];\n        if (event === null || typeof processor !== \"function\") {\n            resolve(event);\n        } else {\n            const result = processor({\n                ...event\n            }, hint);\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && processor.id && result === null && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(`Event processor \"${processor.id}\" dropped event`);\n            if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.isThenable)(result)) {\n                void result.then((final)=>notifyEventProcessors(processors, final, hint, index + 1).then(resolve)).then(null, reject);\n            } else {\n                void notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n            }\n        }\n    });\n}\n //# sourceMappingURL=eventProcessors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9ldmVudFByb2Nlc3NvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBb0Y7QUFDckM7QUFFL0M7OztDQUdDLEdBQ0QsU0FBU0s7SUFDUCxPQUFPRixpRUFBa0JBLENBQUMseUJBQXlCLElBQU0sRUFBRTtBQUM3RDtBQUVBOzs7Q0FHQyxHQUNELFNBQVNHLHdCQUF3QkMsUUFBUTtJQUN2QyxtREFBbUQ7SUFDbkRGLDJCQUEyQkcsSUFBSSxDQUFDRDtBQUNsQztBQUVBOztDQUVDLEdBQ0QsU0FBU0Usc0JBQ1BDLFVBQVUsRUFDVkMsS0FBSyxFQUNMQyxJQUFJLEVBQ0pDLFFBQVEsQ0FBQztJQUVULE9BQU8sSUFBSWIsc0RBQVdBLENBQUMsQ0FBQ2MsU0FBU0M7UUFDL0IsTUFBTUMsWUFBWU4sVUFBVSxDQUFDRyxNQUFNO1FBQ25DLElBQUlGLFVBQVUsUUFBUSxPQUFPSyxjQUFjLFlBQVk7WUFDckRGLFFBQVFIO1FBQ1YsT0FBTztZQUNMLE1BQU1NLFNBQVNELFVBQVU7Z0JBQUUsR0FBR0wsS0FBSztZQUFDLEdBQUdDO1lBRXZDUix3REFBV0EsSUFBSVksVUFBVUUsRUFBRSxJQUFJRCxXQUFXLFFBQVFoQixpREFBTUEsQ0FBQ2tCLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFSCxVQUFVRSxFQUFFLENBQUMsZUFBZSxDQUFDO1lBRTlHLElBQUloQix5REFBVUEsQ0FBQ2UsU0FBUztnQkFDdEIsS0FBS0EsT0FDRkcsSUFBSSxDQUFDQyxDQUFBQSxRQUFTWixzQkFBc0JDLFlBQVlXLE9BQU9ULE1BQU1DLFFBQVEsR0FBR08sSUFBSSxDQUFDTixVQUM3RU0sSUFBSSxDQUFDLE1BQU1MO1lBQ2hCLE9BQU87Z0JBQ0wsS0FBS04sc0JBQXNCQyxZQUFZTyxRQUFRTCxNQUFNQyxRQUFRLEdBQzFETyxJQUFJLENBQUNOLFNBQ0xNLElBQUksQ0FBQyxNQUFNTDtZQUNoQjtRQUNGO0lBQ0Y7QUFDRjtBQUVvRixDQUNwRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnJhbGluay13ZWIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9ldmVudFByb2Nlc3NvcnMuanM/MDY0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTeW5jUHJvbWlzZSwgbG9nZ2VyLCBpc1RoZW5hYmxlLCBnZXRHbG9iYWxTaW5nbGV0b24gfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IERFQlVHX0JVSUxEIH0gZnJvbSAnLi9kZWJ1Zy1idWlsZC5qcyc7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZ2xvYmFsIGV2ZW50IHByb2Nlc3NvcnMuXG4gKiBAZGVwcmVjYXRlZCBHbG9iYWwgZXZlbnQgcHJvY2Vzc29ycyB3aWxsIGJlIHJlbW92ZWQgaW4gdjguXG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbEV2ZW50UHJvY2Vzc29ycygpIHtcbiAgcmV0dXJuIGdldEdsb2JhbFNpbmdsZXRvbignZ2xvYmFsRXZlbnRQcm9jZXNzb3JzJywgKCkgPT4gW10pO1xufVxuXG4vKipcbiAqIEFkZCBhIEV2ZW50UHJvY2Vzc29yIHRvIGJlIGtlcHQgZ2xvYmFsbHkuXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGFkZEV2ZW50UHJvY2Vzc29yYCBpbnN0ZWFkLiBHbG9iYWwgZXZlbnQgcHJvY2Vzc29ycyB3aWxsIGJlIHJlbW92ZWQgaW4gdjguXG4gKi9cbmZ1bmN0aW9uIGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKGNhbGxiYWNrKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICBnZXRHbG9iYWxFdmVudFByb2Nlc3NvcnMoKS5wdXNoKGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBQcm9jZXNzIGFuIGFycmF5IG9mIGV2ZW50IHByb2Nlc3NvcnMsIHJldHVybmluZyB0aGUgcHJvY2Vzc2VkIGV2ZW50IChvciBgbnVsbGAgaWYgdGhlIGV2ZW50IHdhcyBkcm9wcGVkKS5cbiAqL1xuZnVuY3Rpb24gbm90aWZ5RXZlbnRQcm9jZXNzb3JzKFxuICBwcm9jZXNzb3JzLFxuICBldmVudCxcbiAgaGludCxcbiAgaW5kZXggPSAwLFxuKSB7XG4gIHJldHVybiBuZXcgU3luY1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHByb2Nlc3NvciA9IHByb2Nlc3NvcnNbaW5kZXhdO1xuICAgIGlmIChldmVudCA9PT0gbnVsbCB8fCB0eXBlb2YgcHJvY2Vzc29yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXNvbHZlKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcHJvY2Vzc29yKHsgLi4uZXZlbnQgfSwgaGludCkgO1xuXG4gICAgICBERUJVR19CVUlMRCAmJiBwcm9jZXNzb3IuaWQgJiYgcmVzdWx0ID09PSBudWxsICYmIGxvZ2dlci5sb2coYEV2ZW50IHByb2Nlc3NvciBcIiR7cHJvY2Vzc29yLmlkfVwiIGRyb3BwZWQgZXZlbnRgKTtcblxuICAgICAgaWYgKGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICB2b2lkIHJlc3VsdFxuICAgICAgICAgIC50aGVuKGZpbmFsID0+IG5vdGlmeUV2ZW50UHJvY2Vzc29ycyhwcm9jZXNzb3JzLCBmaW5hbCwgaGludCwgaW5kZXggKyAxKS50aGVuKHJlc29sdmUpKVxuICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2b2lkIG5vdGlmeUV2ZW50UHJvY2Vzc29ycyhwcm9jZXNzb3JzLCByZXN1bHQsIGhpbnQsIGluZGV4ICsgMSlcbiAgICAgICAgICAudGhlbihyZXNvbHZlKVxuICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHsgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEdsb2JhbEV2ZW50UHJvY2Vzc29ycywgbm90aWZ5RXZlbnRQcm9jZXNzb3JzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudFByb2Nlc3NvcnMuanMubWFwXG4iXSwibmFtZXMiOlsiU3luY1Byb21pc2UiLCJsb2dnZXIiLCJpc1RoZW5hYmxlIiwiZ2V0R2xvYmFsU2luZ2xldG9uIiwiREVCVUdfQlVJTEQiLCJnZXRHbG9iYWxFdmVudFByb2Nlc3NvcnMiLCJhZGRHbG9iYWxFdmVudFByb2Nlc3NvciIsImNhbGxiYWNrIiwicHVzaCIsIm5vdGlmeUV2ZW50UHJvY2Vzc29ycyIsInByb2Nlc3NvcnMiLCJldmVudCIsImhpbnQiLCJpbmRleCIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9jZXNzb3IiLCJyZXN1bHQiLCJpZCIsImxvZyIsInRoZW4iLCJmaW5hbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/eventProcessors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/exports.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/esm/exports.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addBreadcrumb: () => (/* binding */ addBreadcrumb),\n/* harmony export */   captureCheckIn: () => (/* binding */ captureCheckIn),\n/* harmony export */   captureEvent: () => (/* binding */ captureEvent),\n/* harmony export */   captureException: () => (/* binding */ captureException),\n/* harmony export */   captureMessage: () => (/* binding */ captureMessage),\n/* harmony export */   captureSession: () => (/* binding */ captureSession),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   configureScope: () => (/* binding */ configureScope),\n/* harmony export */   endSession: () => (/* binding */ endSession),\n/* harmony export */   flush: () => (/* binding */ flush),\n/* harmony export */   getClient: () => (/* binding */ getClient),\n/* harmony export */   getCurrentScope: () => (/* binding */ getCurrentScope),\n/* harmony export */   isInitialized: () => (/* binding */ isInitialized),\n/* harmony export */   lastEventId: () => (/* binding */ lastEventId),\n/* harmony export */   setContext: () => (/* binding */ setContext),\n/* harmony export */   setExtra: () => (/* binding */ setExtra),\n/* harmony export */   setExtras: () => (/* binding */ setExtras),\n/* harmony export */   setTag: () => (/* binding */ setTag),\n/* harmony export */   setTags: () => (/* binding */ setTags),\n/* harmony export */   setUser: () => (/* binding */ setUser),\n/* harmony export */   startSession: () => (/* binding */ startSession),\n/* harmony export */   startTransaction: () => (/* binding */ startTransaction),\n/* harmony export */   withActiveSpan: () => (/* binding */ withActiveSpan),\n/* harmony export */   withIsolationScope: () => (/* binding */ withIsolationScope),\n/* harmony export */   withMonitor: () => (/* binding */ withMonitor),\n/* harmony export */   withScope: () => (/* binding */ withScope)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@sentry/core/esm/constants.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hub.js */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./session.js */ \"(ssr)/./node_modules/@sentry/core/esm/session.js\");\n/* harmony import */ var _utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/prepareEvent.js\");\n\n\n\n\n\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */ function captureException(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexception, hint) {\n    // eslint-disable-next-line deprecation/deprecation\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().captureException(exception, (0,_utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_1__.parseEventHintOrCaptureContext)(hint));\n}\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */ function captureMessage(message, // eslint-disable-next-line deprecation/deprecation\ncaptureContext) {\n    // This is necessary to provide explicit scopes upgrade, without changing the original\n    // arity of the `captureMessage(message, level)` method.\n    const level = typeof captureContext === \"string\" ? captureContext : undefined;\n    const context = typeof captureContext !== \"string\" ? {\n        captureContext\n    } : undefined;\n    // eslint-disable-next-line deprecation/deprecation\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().captureMessage(message, level, context);\n}\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param exception The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */ function captureEvent(event, hint) {\n    // eslint-disable-next-line deprecation/deprecation\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().captureEvent(event, hint);\n}\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n *\n * @deprecated Use getCurrentScope() directly.\n */ function configureScope(callback) {\n    // eslint-disable-next-line deprecation/deprecation\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().configureScope(callback);\n}\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */ function addBreadcrumb(breadcrumb, hint) {\n    // eslint-disable-next-line deprecation/deprecation\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().addBreadcrumb(breadcrumb, hint);\n}\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setContext(name, context) {\n    // eslint-disable-next-line deprecation/deprecation\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setContext(name, context);\n}\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */ function setExtras(extras) {\n    // eslint-disable-next-line deprecation/deprecation\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setExtras(extras);\n}\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */ function setExtra(key, extra) {\n    // eslint-disable-next-line deprecation/deprecation\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setExtra(key, extra);\n}\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */ function setTags(tags) {\n    // eslint-disable-next-line deprecation/deprecation\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setTags(tags);\n}\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */ function setTag(key, value) {\n    // eslint-disable-next-line deprecation/deprecation\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setTag(key, value);\n}\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */ function setUser(user) {\n    // eslint-disable-next-line deprecation/deprecation\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setUser(user);\n}\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n */ /**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */ function withScope(...rest) {\n    // eslint-disable-next-line deprecation/deprecation\n    const hub = (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)();\n    // If a scope is defined, we want to make this the active scope instead of the default one\n    if (rest.length === 2) {\n        const [scope, callback] = rest;\n        if (!scope) {\n            // eslint-disable-next-line deprecation/deprecation\n            return hub.withScope(callback);\n        }\n        // eslint-disable-next-line deprecation/deprecation\n        return hub.withScope(()=>{\n            // eslint-disable-next-line deprecation/deprecation\n            hub.getStackTop().scope = scope;\n            return callback(scope);\n        });\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    return hub.withScope(rest[0]);\n}\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n *\n * @param callback The callback in which the passed isolation scope is active. (Note: In environments without async\n * context strategy, the currently active isolation scope may change within execution of the callback.)\n * @returns The same value that `callback` returns.\n */ function withIsolationScope(callback) {\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.runWithAsyncContext)(()=>{\n        return callback((0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)());\n    });\n}\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback.\n *\n * @param span Spans started in the context of the provided callback will be children of this span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */ function withActiveSpan(span, callback) {\n    return withScope((scope)=>{\n        // eslint-disable-next-line deprecation/deprecation\n        scope.setSpan(span);\n        return callback(scope);\n    });\n}\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.end()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call\n * `startTransaction` directly on the hub.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n *\n * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n */ function startTransaction(context, customSamplingContext) {\n    // eslint-disable-next-line deprecation/deprecation\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().startTransaction({\n        ...context\n    }, customSamplingContext);\n}\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */ function captureCheckIn(checkIn, upsertMonitorConfig) {\n    const scope = getCurrentScope();\n    const client = getClient();\n    if (!client) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot capture check-in. No client defined.\");\n    } else if (!client.captureCheckIn) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot capture check-in. Client does not support sending check-ins.\");\n    } else {\n        return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n    }\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.uuid4)();\n}\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */ function withMonitor(monitorSlug, callback, upsertMonitorConfig) {\n    const checkInId = captureCheckIn({\n        monitorSlug,\n        status: \"in_progress\"\n    }, upsertMonitorConfig);\n    const now = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.timestampInSeconds)();\n    function finishCheckIn(status) {\n        captureCheckIn({\n            monitorSlug,\n            status,\n            checkInId,\n            duration: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.timestampInSeconds)() - now\n        });\n    }\n    let maybePromiseResult;\n    try {\n        maybePromiseResult = callback();\n    } catch (e) {\n        finishCheckIn(\"error\");\n        throw e;\n    }\n    if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.isThenable)(maybePromiseResult)) {\n        Promise.resolve(maybePromiseResult).then(()=>{\n            finishCheckIn(\"ok\");\n        }, ()=>{\n            finishCheckIn(\"error\");\n        });\n    } else {\n        finishCheckIn(\"ok\");\n    }\n    return maybePromiseResult;\n}\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */ async function flush(timeout) {\n    const client = getClient();\n    if (client) {\n        return client.flush(timeout);\n    }\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot flush events. No client defined.\");\n    return Promise.resolve(false);\n}\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */ async function close(timeout) {\n    const client = getClient();\n    if (client) {\n        return client.close(timeout);\n    }\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot flush events and disable SDK. No client defined.\");\n    return Promise.resolve(false);\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n * @deprecated This function will be removed in the next major version of the Sentry SDK.\n */ function lastEventId() {\n    // eslint-disable-next-line deprecation/deprecation\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().lastEventId();\n}\n/**\n * Get the currently active client.\n */ function getClient() {\n    // eslint-disable-next-line deprecation/deprecation\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().getClient();\n}\n/**\n * Returns true if Sentry has been properly initialized.\n */ function isInitialized() {\n    return !!getClient();\n}\n/**\n * Get the currently active scope.\n */ function getCurrentScope() {\n    // eslint-disable-next-line deprecation/deprecation\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().getScope();\n}\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */ function startSession(context) {\n    const client = getClient();\n    const isolationScope = (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n    const currentScope = getCurrentScope();\n    const { release, environment = _constants_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_ENVIRONMENT } = client && client.getOptions() || {};\n    // Will fetch userAgent if called from browser sdk\n    const { userAgent } = _sentry_utils__WEBPACK_IMPORTED_MODULE_8__.GLOBAL_OBJ.navigator || {};\n    const session = (0,_session_js__WEBPACK_IMPORTED_MODULE_9__.makeSession)({\n        release,\n        environment,\n        user: currentScope.getUser() || isolationScope.getUser(),\n        ...userAgent && {\n            userAgent\n        },\n        ...context\n    });\n    // End existing session if there's one\n    const currentSession = isolationScope.getSession();\n    if (currentSession && currentSession.status === \"ok\") {\n        (0,_session_js__WEBPACK_IMPORTED_MODULE_9__.updateSession)(currentSession, {\n            status: \"exited\"\n        });\n    }\n    endSession();\n    // Afterwards we set the new session on the scope\n    isolationScope.setSession(session);\n    // TODO (v8): Remove this and only use the isolation scope(?).\n    // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n    currentScope.setSession(session);\n    return session;\n}\n/**\n * End the session on the current isolation scope.\n */ function endSession() {\n    const isolationScope = (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n    const currentScope = getCurrentScope();\n    const session = currentScope.getSession() || isolationScope.getSession();\n    if (session) {\n        (0,_session_js__WEBPACK_IMPORTED_MODULE_9__.closeSession)(session);\n    }\n    _sendSessionUpdate();\n    // the session is over; take it off of the scope\n    isolationScope.setSession();\n    // TODO (v8): Remove this and only use the isolation scope(?).\n    // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n    currentScope.setSession();\n}\n/**\n * Sends the current Session on the scope\n */ function _sendSessionUpdate() {\n    const isolationScope = (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n    const currentScope = getCurrentScope();\n    const client = getClient();\n    // TODO (v8): Remove currentScope and only use the isolation scope(?).\n    // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n    const session = currentScope.getSession() || isolationScope.getSession();\n    if (session && client && client.captureSession) {\n        client.captureSession(session);\n    }\n}\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */ function captureSession(end = false) {\n    // both send the update and pull the session from the scope\n    if (end) {\n        endSession();\n        return;\n    }\n    // only send the update\n    _sendSessionUpdate();\n}\n //# sourceMappingURL=exports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/exports.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/hub.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/core/esm/hub.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_VERSION: () => (/* binding */ API_VERSION),\n/* harmony export */   Hub: () => (/* binding */ Hub),\n/* harmony export */   ensureHubOnCarrier: () => (/* binding */ ensureHubOnCarrier),\n/* harmony export */   getCurrentHub: () => (/* binding */ getCurrentHub),\n/* harmony export */   getHubFromCarrier: () => (/* binding */ getHubFromCarrier),\n/* harmony export */   getIsolationScope: () => (/* binding */ getIsolationScope),\n/* harmony export */   getMainCarrier: () => (/* binding */ getMainCarrier),\n/* harmony export */   makeMain: () => (/* binding */ makeMain),\n/* harmony export */   runWithAsyncContext: () => (/* binding */ runWithAsyncContext),\n/* harmony export */   setAsyncContextStrategy: () => (/* binding */ setAsyncContextStrategy),\n/* harmony export */   setHubOnCarrier: () => (/* binding */ setHubOnCarrier)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@sentry/core/esm/constants.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scope.js */ \"(ssr)/./node_modules/@sentry/core/esm/scope.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./session.js */ \"(ssr)/./node_modules/@sentry/core/esm/session.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@sentry/core/esm/version.js\");\n\n\n\n\n\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */ const API_VERSION = parseFloat(_version_js__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION);\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */ const DEFAULT_BREADCRUMBS = 100;\n/**\n * @inheritDoc\n */ class Hub {\n    /** Is a {@link Layer}[] containing the client and scope */ /** Contains the last event id of a captured event.  */ /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   *\n   * @deprecated Instantiation of Hub objects is deprecated and the constructor will be removed in version 8 of the SDK.\n   *\n   * If you are currently using the Hub for multi-client use like so:\n   *\n   * ```\n   * // OLD\n   * const hub = new Hub();\n   * hub.bindClient(client);\n   * makeMain(hub)\n   * ```\n   *\n   * instead initialize the client as follows:\n   *\n   * ```\n   * // NEW\n   * Sentry.withIsolationScope(() => {\n   *    Sentry.setCurrentClient(client);\n   *    client.init();\n   * });\n   * ```\n   *\n   * If you are using the Hub to capture events like so:\n   *\n   * ```\n   * // OLD\n   * const client = new Client();\n   * const hub = new Hub(client);\n   * hub.captureException()\n   * ```\n   *\n   * instead capture isolated events as follows:\n   *\n   * ```\n   * // NEW\n   * const client = new Client();\n   * const scope = new Scope();\n   * scope.setClient(client);\n   * scope.captureException();\n   * ```\n   */ constructor(client, scope, isolationScope, _version = API_VERSION){\n        this._version = _version;\n        let assignedScope;\n        if (!scope) {\n            assignedScope = new _scope_js__WEBPACK_IMPORTED_MODULE_1__.Scope();\n            assignedScope.setClient(client);\n        } else {\n            assignedScope = scope;\n        }\n        let assignedIsolationScope;\n        if (!isolationScope) {\n            assignedIsolationScope = new _scope_js__WEBPACK_IMPORTED_MODULE_1__.Scope();\n            assignedIsolationScope.setClient(client);\n        } else {\n            assignedIsolationScope = isolationScope;\n        }\n        this._stack = [\n            {\n                scope: assignedScope\n            }\n        ];\n        if (client) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.bindClient(client);\n        }\n        this._isolationScope = assignedIsolationScope;\n    }\n    /**\n   * Checks if this hub's version is older than the given version.\n   *\n   * @param version A version number to compare to.\n   * @return True if the given version is newer; otherwise false.\n   *\n   * @deprecated This will be removed in v8.\n   */ isOlderThan(version) {\n        return this._version < version;\n    }\n    /**\n   * This binds the given client to the current scope.\n   * @param client An SDK client (client) instance.\n   *\n   * @deprecated Use `initAndBind()` directly, or `setCurrentClient()` and/or `client.init()` instead.\n   */ bindClient(client) {\n        // eslint-disable-next-line deprecation/deprecation\n        const top = this.getStackTop();\n        top.client = client;\n        top.scope.setClient(client);\n        // eslint-disable-next-line deprecation/deprecation\n        if (client && client.setupIntegrations) {\n            // eslint-disable-next-line deprecation/deprecation\n            client.setupIntegrations();\n        }\n    }\n    /**\n   * @inheritDoc\n   *\n   * @deprecated Use `withScope` instead.\n   */ pushScope() {\n        // We want to clone the content of prev scope\n        // eslint-disable-next-line deprecation/deprecation\n        const scope = this.getScope().clone();\n        // eslint-disable-next-line deprecation/deprecation\n        this.getStack().push({\n            // eslint-disable-next-line deprecation/deprecation\n            client: this.getClient(),\n            scope\n        });\n        return scope;\n    }\n    /**\n   * @inheritDoc\n   *\n   * @deprecated Use `withScope` instead.\n   */ popScope() {\n        // eslint-disable-next-line deprecation/deprecation\n        if (this.getStack().length <= 1) return false;\n        // eslint-disable-next-line deprecation/deprecation\n        return !!this.getStack().pop();\n    }\n    /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.withScope()` instead.\n   */ withScope(callback) {\n        // eslint-disable-next-line deprecation/deprecation\n        const scope = this.pushScope();\n        let maybePromiseResult;\n        try {\n            maybePromiseResult = callback(scope);\n        } catch (e) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.popScope();\n            throw e;\n        }\n        if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.isThenable)(maybePromiseResult)) {\n            // @ts-expect-error - isThenable returns the wrong type\n            return maybePromiseResult.then((res)=>{\n                // eslint-disable-next-line deprecation/deprecation\n                this.popScope();\n                return res;\n            }, (e)=>{\n                // eslint-disable-next-line deprecation/deprecation\n                this.popScope();\n                throw e;\n            });\n        }\n        // eslint-disable-next-line deprecation/deprecation\n        this.popScope();\n        return maybePromiseResult;\n    }\n    /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.getClient()` instead.\n   */ getClient() {\n        // eslint-disable-next-line deprecation/deprecation\n        return this.getStackTop().client;\n    }\n    /**\n   * Returns the scope of the top stack.\n   *\n   * @deprecated Use `Sentry.getCurrentScope()` instead.\n   */ getScope() {\n        // eslint-disable-next-line deprecation/deprecation\n        return this.getStackTop().scope;\n    }\n    /**\n   * @deprecated Use `Sentry.getIsolationScope()` instead.\n   */ getIsolationScope() {\n        return this._isolationScope;\n    }\n    /**\n   * Returns the scope stack for domains or the process.\n   * @deprecated This will be removed in v8.\n   */ getStack() {\n        return this._stack;\n    }\n    /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   * @deprecated This will be removed in v8.\n   */ getStackTop() {\n        return this._stack[this._stack.length - 1];\n    }\n    /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.captureException()` instead.\n   */ captureException(exception, hint) {\n        const eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.uuid4)();\n        const syntheticException = new Error(\"Sentry syntheticException\");\n        // eslint-disable-next-line deprecation/deprecation\n        this.getScope().captureException(exception, {\n            originalException: exception,\n            syntheticException,\n            ...hint,\n            event_id: eventId\n        });\n        return eventId;\n    }\n    /**\n   * @inheritDoc\n   *\n   * @deprecated Use  `Sentry.captureMessage()` instead.\n   */ captureMessage(message, // eslint-disable-next-line deprecation/deprecation\n    level, hint) {\n        const eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.uuid4)();\n        const syntheticException = new Error(message);\n        // eslint-disable-next-line deprecation/deprecation\n        this.getScope().captureMessage(message, level, {\n            originalException: message,\n            syntheticException,\n            ...hint,\n            event_id: eventId\n        });\n        return eventId;\n    }\n    /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.captureEvent()` instead.\n   */ captureEvent(event, hint) {\n        const eventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.uuid4)();\n        if (!event.type) {\n            this._lastEventId = eventId;\n        }\n        // eslint-disable-next-line deprecation/deprecation\n        this.getScope().captureEvent(event, {\n            ...hint,\n            event_id: eventId\n        });\n        return eventId;\n    }\n    /**\n   * @inheritDoc\n   *\n   * @deprecated This will be removed in v8.\n   */ lastEventId() {\n        return this._lastEventId;\n    }\n    /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.addBreadcrumb()` instead.\n   */ addBreadcrumb(breadcrumb, hint) {\n        // eslint-disable-next-line deprecation/deprecation\n        const { scope, client } = this.getStackTop();\n        if (!client) return;\n        const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions && client.getOptions() || {};\n        if (maxBreadcrumbs <= 0) return;\n        const timestamp = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.dateTimestampInSeconds)();\n        const mergedBreadcrumb = {\n            timestamp,\n            ...breadcrumb\n        };\n        const finalBreadcrumb = beforeBreadcrumb ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.consoleSandbox)(()=>beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;\n        if (finalBreadcrumb === null) return;\n        if (client.emit) {\n            client.emit(\"beforeAddBreadcrumb\", finalBreadcrumb, hint);\n        }\n        // TODO(v8): I know this comment doesn't make much sense because the hub will be deprecated but I still wanted to\n        // write it down. In theory, we would have to add the breadcrumbs to the isolation scope here, however, that would\n        // duplicate all of the breadcrumbs. There was the possibility of adding breadcrumbs to both, the isolation scope\n        // and the normal scope, and deduplicating it down the line in the event processing pipeline. However, that would\n        // have been very fragile, because the breadcrumb objects would have needed to keep their identity all throughout\n        // the event processing pipeline.\n        // In the new implementation, the top level `Sentry.addBreadcrumb()` should ONLY write to the isolation scope.\n        scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n    }\n    /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setUser()` instead.\n   */ setUser(user) {\n        // TODO(v8): The top level `Sentry.setUser()` function should write ONLY to the isolation scope.\n        // eslint-disable-next-line deprecation/deprecation\n        this.getScope().setUser(user);\n        // eslint-disable-next-line deprecation/deprecation\n        this.getIsolationScope().setUser(user);\n    }\n    /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setTags()` instead.\n   */ setTags(tags) {\n        // TODO(v8): The top level `Sentry.setTags()` function should write ONLY to the isolation scope.\n        // eslint-disable-next-line deprecation/deprecation\n        this.getScope().setTags(tags);\n        // eslint-disable-next-line deprecation/deprecation\n        this.getIsolationScope().setTags(tags);\n    }\n    /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setExtras()` instead.\n   */ setExtras(extras) {\n        // TODO(v8): The top level `Sentry.setExtras()` function should write ONLY to the isolation scope.\n        // eslint-disable-next-line deprecation/deprecation\n        this.getScope().setExtras(extras);\n        // eslint-disable-next-line deprecation/deprecation\n        this.getIsolationScope().setExtras(extras);\n    }\n    /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setTag()` instead.\n   */ setTag(key, value) {\n        // TODO(v8): The top level `Sentry.setTag()` function should write ONLY to the isolation scope.\n        // eslint-disable-next-line deprecation/deprecation\n        this.getScope().setTag(key, value);\n        // eslint-disable-next-line deprecation/deprecation\n        this.getIsolationScope().setTag(key, value);\n    }\n    /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setExtra()` instead.\n   */ setExtra(key, extra) {\n        // TODO(v8): The top level `Sentry.setExtra()` function should write ONLY to the isolation scope.\n        // eslint-disable-next-line deprecation/deprecation\n        this.getScope().setExtra(key, extra);\n        // eslint-disable-next-line deprecation/deprecation\n        this.getIsolationScope().setExtra(key, extra);\n    }\n    /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setContext()` instead.\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setContext(name, context) {\n        // TODO(v8): The top level `Sentry.setContext()` function should write ONLY to the isolation scope.\n        // eslint-disable-next-line deprecation/deprecation\n        this.getScope().setContext(name, context);\n        // eslint-disable-next-line deprecation/deprecation\n        this.getIsolationScope().setContext(name, context);\n    }\n    /**\n   * @inheritDoc\n   *\n   * @deprecated Use `getScope()` directly.\n   */ configureScope(callback) {\n        // eslint-disable-next-line deprecation/deprecation\n        const { scope, client } = this.getStackTop();\n        if (client) {\n            callback(scope);\n        }\n    }\n    /**\n   * @inheritDoc\n   */ run(callback) {\n        // eslint-disable-next-line deprecation/deprecation\n        const oldHub = makeMain(this);\n        try {\n            callback(this);\n        } finally{\n            // eslint-disable-next-line deprecation/deprecation\n            makeMain(oldHub);\n        }\n    }\n    /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.getClient().getIntegrationByName()` instead.\n   */ getIntegration(integration) {\n        // eslint-disable-next-line deprecation/deprecation\n        const client = this.getClient();\n        if (!client) return null;\n        try {\n            // eslint-disable-next-line deprecation/deprecation\n            return client.getIntegration(integration);\n        } catch (_oO) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n            return null;\n        }\n    }\n    /**\n   * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n   *\n   * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n   * new child span within the transaction or any span, call the respective `.startChild()` method.\n   *\n   * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n   *\n   * The transaction must be finished with a call to its `.end()` method, at which point the transaction with all its\n   * finished child spans will be sent to Sentry.\n   *\n   * @param context Properties of the new `Transaction`.\n   * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n   * default values). See {@link Options.tracesSampler}.\n   *\n   * @returns The transaction which was just started\n   *\n   * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n   */ startTransaction(context, customSamplingContext) {\n        const result = this._callExtensionMethod(\"startTransaction\", context, customSamplingContext);\n        if (_debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD && !result) {\n            // eslint-disable-next-line deprecation/deprecation\n            const client = this.getClient();\n            if (!client) {\n                _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.warn(\"Tracing extension 'startTransaction' is missing. You should 'init' the SDK before calling 'startTransaction'\");\n            } else {\n                _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\nSentry.addTracingExtensions();\nSentry.init({...});\n`);\n            }\n        }\n        return result;\n    }\n    /**\n   * @inheritDoc\n   * @deprecated Use `spanToTraceHeader()` instead.\n   */ traceHeaders() {\n        return this._callExtensionMethod(\"traceHeaders\");\n    }\n    /**\n   * @inheritDoc\n   *\n   * @deprecated Use top level `captureSession` instead.\n   */ captureSession(endSession = false) {\n        // both send the update and pull the session from the scope\n        if (endSession) {\n            // eslint-disable-next-line deprecation/deprecation\n            return this.endSession();\n        }\n        // only send the update\n        this._sendSessionUpdate();\n    }\n    /**\n   * @inheritDoc\n   * @deprecated Use top level `endSession` instead.\n   */ endSession() {\n        // eslint-disable-next-line deprecation/deprecation\n        const layer = this.getStackTop();\n        const scope = layer.scope;\n        const session = scope.getSession();\n        if (session) {\n            (0,_session_js__WEBPACK_IMPORTED_MODULE_7__.closeSession)(session);\n        }\n        this._sendSessionUpdate();\n        // the session is over; take it off of the scope\n        scope.setSession();\n    }\n    /**\n   * @inheritDoc\n   * @deprecated Use top level `startSession` instead.\n   */ startSession(context) {\n        // eslint-disable-next-line deprecation/deprecation\n        const { scope, client } = this.getStackTop();\n        const { release, environment = _constants_js__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_ENVIRONMENT } = client && client.getOptions() || {};\n        // Will fetch userAgent if called from browser sdk\n        const { userAgent } = _sentry_utils__WEBPACK_IMPORTED_MODULE_9__.GLOBAL_OBJ.navigator || {};\n        const session = (0,_session_js__WEBPACK_IMPORTED_MODULE_7__.makeSession)({\n            release,\n            environment,\n            user: scope.getUser(),\n            ...userAgent && {\n                userAgent\n            },\n            ...context\n        });\n        // End existing session if there's one\n        const currentSession = scope.getSession && scope.getSession();\n        if (currentSession && currentSession.status === \"ok\") {\n            (0,_session_js__WEBPACK_IMPORTED_MODULE_7__.updateSession)(currentSession, {\n                status: \"exited\"\n            });\n        }\n        // eslint-disable-next-line deprecation/deprecation\n        this.endSession();\n        // Afterwards we set the new session on the scope\n        scope.setSession(session);\n        return session;\n    }\n    /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   *\n   * @deprecated Use top-level `getClient().getOptions().sendDefaultPii` instead. This function\n   * only unnecessarily increased API surface but only wrapped accessing the option.\n   */ shouldSendDefaultPii() {\n        // eslint-disable-next-line deprecation/deprecation\n        const client = this.getClient();\n        const options = client && client.getOptions();\n        return Boolean(options && options.sendDefaultPii);\n    }\n    /**\n   * Sends the current Session on the scope\n   */ _sendSessionUpdate() {\n        // eslint-disable-next-line deprecation/deprecation\n        const { scope, client } = this.getStackTop();\n        const session = scope.getSession();\n        if (session && client && client.captureSession) {\n            client.captureSession(session);\n        }\n    }\n    /**\n   * Calls global extension method and binding current instance to the function call\n   */ // @ts-expect-error Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _callExtensionMethod(method, ...args) {\n        const carrier = getMainCarrier();\n        const sentry = carrier.__SENTRY__;\n        if (sentry && sentry.extensions && typeof sentry.extensions[method] === \"function\") {\n            return sentry.extensions[method].apply(this, args);\n        }\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n    }\n}\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/ function getMainCarrier() {\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_9__.GLOBAL_OBJ.__SENTRY__ = _sentry_utils__WEBPACK_IMPORTED_MODULE_9__.GLOBAL_OBJ.__SENTRY__ || {\n        extensions: {},\n        hub: undefined\n    };\n    return _sentry_utils__WEBPACK_IMPORTED_MODULE_9__.GLOBAL_OBJ;\n}\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n *\n * @deprecated Use `setCurrentClient()` instead.\n */ function makeMain(hub) {\n    const registry = getMainCarrier();\n    const oldHub = getHubFromCarrier(registry);\n    setHubOnCarrier(registry, hub);\n    return oldHub;\n}\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n *\n * @deprecated Use the respective replacement method directly instead.\n */ function getCurrentHub() {\n    // Get main carrier (global for every environment)\n    const registry = getMainCarrier();\n    if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n        const hub = registry.__SENTRY__.acs.getCurrentHub();\n        if (hub) {\n            return hub;\n        }\n    }\n    // Return hub that lives on a global object\n    return getGlobalHub(registry);\n}\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current exection context,\n * meaning that it will remain stable for the same Hub.\n */ function getIsolationScope() {\n    // eslint-disable-next-line deprecation/deprecation\n    return getCurrentHub().getIsolationScope();\n}\nfunction getGlobalHub(registry = getMainCarrier()) {\n    // If there's no hub, or its an old API, assign a new one\n    if (!hasHubOnCarrier(registry) || // eslint-disable-next-line deprecation/deprecation\n    getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n        // eslint-disable-next-line deprecation/deprecation\n        setHubOnCarrier(registry, new Hub());\n    }\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n}\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */ function ensureHubOnCarrier(carrier, parent = getGlobalHub()) {\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(carrier) || // eslint-disable-next-line deprecation/deprecation\n    getHubFromCarrier(carrier).isOlderThan(API_VERSION)) {\n        // eslint-disable-next-line deprecation/deprecation\n        const client = parent.getClient();\n        // eslint-disable-next-line deprecation/deprecation\n        const scope = parent.getScope();\n        // eslint-disable-next-line deprecation/deprecation\n        const isolationScope = parent.getIsolationScope();\n        // eslint-disable-next-line deprecation/deprecation\n        setHubOnCarrier(carrier, new Hub(client, scope.clone(), isolationScope.clone()));\n    }\n}\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */ function setAsyncContextStrategy(strategy) {\n    // Get main carrier (global for every environment)\n    const registry = getMainCarrier();\n    registry.__SENTRY__ = registry.__SENTRY__ || {};\n    registry.__SENTRY__.acs = strategy;\n}\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */ function runWithAsyncContext(callback, options = {}) {\n    const registry = getMainCarrier();\n    if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n        return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n    }\n    // if there was no strategy, fallback to just calling the callback\n    return callback();\n}\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */ function hasHubOnCarrier(carrier) {\n    return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */ function getHubFromCarrier(carrier) {\n    // eslint-disable-next-line deprecation/deprecation\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_9__.getGlobalSingleton)(\"hub\", ()=>new Hub(), carrier);\n}\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */ function setHubOnCarrier(carrier, hub) {\n    if (!carrier) return false;\n    const __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n    __SENTRY__.hub = hub;\n    return true;\n}\n //# sourceMappingURL=hub.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9odWIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWtJO0FBQzdFO0FBQ047QUFDWjtBQUNxQztBQUM3QjtBQUUzQzs7Ozs7OztDQU9DLEdBQ0QsTUFBTWMsY0FBY0MsV0FBV0Ysb0RBQVdBO0FBRTFDOzs7Q0FHQyxHQUNELE1BQU1HLHNCQUFzQjtBQUU1Qjs7Q0FFQyxHQUNELE1BQU1DO0lBQ0oseURBQXlELEdBRXpELHFEQUFxRCxHQUVyRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0ErQ0MsR0FDQUMsWUFDQ0MsTUFBTSxFQUNOQyxLQUFLLEVBQ0xDLGNBQWMsRUFDWkMsV0FBV1IsV0FBVyxDQUN4QjtRQUFDLElBQUksQ0FBQ1EsUUFBUSxHQUFHQTtRQUNqQixJQUFJQztRQUNKLElBQUksQ0FBQ0gsT0FBTztZQUNWRyxnQkFBZ0IsSUFBSWQsNENBQUtBO1lBQ3pCYyxjQUFjQyxTQUFTLENBQUNMO1FBQzFCLE9BQU87WUFDTEksZ0JBQWdCSDtRQUNsQjtRQUVBLElBQUlLO1FBQ0osSUFBSSxDQUFDSixnQkFBZ0I7WUFDbkJJLHlCQUF5QixJQUFJaEIsNENBQUtBO1lBQ2xDZ0IsdUJBQXVCRCxTQUFTLENBQUNMO1FBQ25DLE9BQU87WUFDTE0seUJBQXlCSjtRQUMzQjtRQUVBLElBQUksQ0FBQ0ssTUFBTSxHQUFHO1lBQUM7Z0JBQUVOLE9BQU9HO1lBQWM7U0FBRTtRQUV4QyxJQUFJSixRQUFRO1lBQ1YsbURBQW1EO1lBQ25ELElBQUksQ0FBQ1EsVUFBVSxDQUFDUjtRQUNsQjtRQUVBLElBQUksQ0FBQ1MsZUFBZSxHQUFHSDtJQUN6QjtJQUVBOzs7Ozs7O0dBT0MsR0FDQUksWUFBWUMsT0FBTyxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDUixRQUFRLEdBQUdRO0lBQ3pCO0lBRUE7Ozs7O0dBS0MsR0FDQUgsV0FBV1IsTUFBTSxFQUFFO1FBQ2xCLG1EQUFtRDtRQUNuRCxNQUFNWSxNQUFNLElBQUksQ0FBQ0MsV0FBVztRQUM1QkQsSUFBSVosTUFBTSxHQUFHQTtRQUNiWSxJQUFJWCxLQUFLLENBQUNJLFNBQVMsQ0FBQ0w7UUFDcEIsbURBQW1EO1FBQ25ELElBQUlBLFVBQVVBLE9BQU9jLGlCQUFpQixFQUFFO1lBQ3RDLG1EQUFtRDtZQUNuRGQsT0FBT2MsaUJBQWlCO1FBQzFCO0lBQ0Y7SUFFQTs7OztHQUlDLEdBQ0FDLFlBQVk7UUFDWCw2Q0FBNkM7UUFDN0MsbURBQW1EO1FBQ25ELE1BQU1kLFFBQVEsSUFBSSxDQUFDZSxRQUFRLEdBQUdDLEtBQUs7UUFDbkMsbURBQW1EO1FBQ25ELElBQUksQ0FBQ0MsUUFBUSxHQUFHQyxJQUFJLENBQUM7WUFDbkIsbURBQW1EO1lBQ25EbkIsUUFBUSxJQUFJLENBQUNvQixTQUFTO1lBQ3RCbkI7UUFDRjtRQUNBLE9BQU9BO0lBQ1Q7SUFFQTs7OztHQUlDLEdBQ0FvQixXQUFXO1FBQ1YsbURBQW1EO1FBQ25ELElBQUksSUFBSSxDQUFDSCxRQUFRLEdBQUdJLE1BQU0sSUFBSSxHQUFHLE9BQU87UUFDeEMsbURBQW1EO1FBQ25ELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0osUUFBUSxHQUFHSyxHQUFHO0lBQzlCO0lBRUE7Ozs7R0FJQyxHQUNBQyxVQUFVQyxRQUFRLEVBQUU7UUFDbkIsbURBQW1EO1FBQ25ELE1BQU14QixRQUFRLElBQUksQ0FBQ2MsU0FBUztRQUU1QixJQUFJVztRQUNKLElBQUk7WUFDRkEscUJBQXFCRCxTQUFTeEI7UUFDaEMsRUFBRSxPQUFPMEIsR0FBRztZQUNWLG1EQUFtRDtZQUNuRCxJQUFJLENBQUNOLFFBQVE7WUFDYixNQUFNTTtRQUNSO1FBRUEsSUFBSTlDLHlEQUFVQSxDQUFDNkMscUJBQXFCO1lBQ2xDLHVEQUF1RDtZQUN2RCxPQUFPQSxtQkFBbUJFLElBQUksQ0FDNUJDLENBQUFBO2dCQUNFLG1EQUFtRDtnQkFDbkQsSUFBSSxDQUFDUixRQUFRO2dCQUNiLE9BQU9RO1lBQ1QsR0FDQUYsQ0FBQUE7Z0JBQ0UsbURBQW1EO2dCQUNuRCxJQUFJLENBQUNOLFFBQVE7Z0JBQ2IsTUFBTU07WUFDUjtRQUVKO1FBRUEsbURBQW1EO1FBQ25ELElBQUksQ0FBQ04sUUFBUTtRQUNiLE9BQU9LO0lBQ1Q7SUFFQTs7OztHQUlDLEdBQ0FOLFlBQVk7UUFDWCxtREFBbUQ7UUFDbkQsT0FBTyxJQUFJLENBQUNQLFdBQVcsR0FBR2IsTUFBTTtJQUNsQztJQUVBOzs7O0dBSUMsR0FDQWdCLFdBQVc7UUFDVixtREFBbUQ7UUFDbkQsT0FBTyxJQUFJLENBQUNILFdBQVcsR0FBR1osS0FBSztJQUNqQztJQUVBOztHQUVDLEdBQ0E2QixvQkFBb0I7UUFDbkIsT0FBTyxJQUFJLENBQUNyQixlQUFlO0lBQzdCO0lBRUE7OztHQUdDLEdBQ0FTLFdBQVc7UUFDVixPQUFPLElBQUksQ0FBQ1gsTUFBTTtJQUNwQjtJQUVBOzs7R0FHQyxHQUNBTSxjQUFjO1FBQ2IsT0FBTyxJQUFJLENBQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUNBLE1BQU0sQ0FBQ2UsTUFBTSxHQUFHLEVBQUU7SUFDNUM7SUFFQTs7OztHQUlDLEdBQ0FTLGlCQUFpQkMsU0FBUyxFQUFFQyxJQUFJLEVBQUU7UUFDakMsTUFBTUMsVUFBVyxJQUFJLENBQUNDLFlBQVksR0FBR0YsUUFBUUEsS0FBS0csUUFBUSxHQUFHSCxLQUFLRyxRQUFRLEdBQUd0RCxvREFBS0E7UUFDbEYsTUFBTXVELHFCQUFxQixJQUFJQyxNQUFNO1FBQ3JDLG1EQUFtRDtRQUNuRCxJQUFJLENBQUN0QixRQUFRLEdBQUdlLGdCQUFnQixDQUFDQyxXQUFXO1lBQzFDTyxtQkFBbUJQO1lBQ25CSztZQUNBLEdBQUdKLElBQUk7WUFDUEcsVUFBVUY7UUFDWjtRQUVBLE9BQU9BO0lBQ1Q7SUFFQTs7OztHQUlDLEdBQ0FNLGVBQ0NDLE9BQU8sRUFDUCxtREFBbUQ7SUFDbkRDLEtBQUssRUFDTFQsSUFBSSxFQUNKO1FBQ0EsTUFBTUMsVUFBVyxJQUFJLENBQUNDLFlBQVksR0FBR0YsUUFBUUEsS0FBS0csUUFBUSxHQUFHSCxLQUFLRyxRQUFRLEdBQUd0RCxvREFBS0E7UUFDbEYsTUFBTXVELHFCQUFxQixJQUFJQyxNQUFNRztRQUNyQyxtREFBbUQ7UUFDbkQsSUFBSSxDQUFDekIsUUFBUSxHQUFHd0IsY0FBYyxDQUFDQyxTQUFTQyxPQUFPO1lBQzdDSCxtQkFBbUJFO1lBQ25CSjtZQUNBLEdBQUdKLElBQUk7WUFDUEcsVUFBVUY7UUFDWjtRQUVBLE9BQU9BO0lBQ1Q7SUFFQTs7OztHQUlDLEdBQ0FTLGFBQWFDLEtBQUssRUFBRVgsSUFBSSxFQUFFO1FBQ3pCLE1BQU1DLFVBQVVELFFBQVFBLEtBQUtHLFFBQVEsR0FBR0gsS0FBS0csUUFBUSxHQUFHdEQsb0RBQUtBO1FBQzdELElBQUksQ0FBQzhELE1BQU1DLElBQUksRUFBRTtZQUNmLElBQUksQ0FBQ1YsWUFBWSxHQUFHRDtRQUN0QjtRQUNBLG1EQUFtRDtRQUNuRCxJQUFJLENBQUNsQixRQUFRLEdBQUcyQixZQUFZLENBQUNDLE9BQU87WUFBRSxHQUFHWCxJQUFJO1lBQUVHLFVBQVVGO1FBQVE7UUFDakUsT0FBT0E7SUFDVDtJQUVBOzs7O0dBSUMsR0FDQVksY0FBYztRQUNiLE9BQU8sSUFBSSxDQUFDWCxZQUFZO0lBQzFCO0lBRUE7Ozs7R0FJQyxHQUNBWSxjQUFjQyxVQUFVLEVBQUVmLElBQUksRUFBRTtRQUMvQixtREFBbUQ7UUFDbkQsTUFBTSxFQUFFaEMsS0FBSyxFQUFFRCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUNhLFdBQVc7UUFFMUMsSUFBSSxDQUFDYixRQUFRO1FBRWIsTUFBTSxFQUFFaUQsbUJBQW1CLElBQUksRUFBRUMsaUJBQWlCckQsbUJBQW1CLEVBQUUsR0FDckUsT0FBUXNELFVBQVUsSUFBSW5ELE9BQU9tRCxVQUFVLE1BQU8sQ0FBQztRQUVqRCxJQUFJRCxrQkFBa0IsR0FBRztRQUV6QixNQUFNRSxZQUFZckUscUVBQXNCQTtRQUN4QyxNQUFNc0UsbUJBQW1CO1lBQUVEO1lBQVcsR0FBR0osVUFBVTtRQUFDO1FBQ3BELE1BQU1NLGtCQUFrQkwsbUJBQ25CakUsNkRBQWNBLENBQUMsSUFBTWlFLGlCQUFpQkksa0JBQWtCcEIsU0FDekRvQjtRQUVKLElBQUlDLG9CQUFvQixNQUFNO1FBRTlCLElBQUl0RCxPQUFPdUQsSUFBSSxFQUFFO1lBQ2Z2RCxPQUFPdUQsSUFBSSxDQUFDLHVCQUF1QkQsaUJBQWlCckI7UUFDdEQ7UUFFQSxpSEFBaUg7UUFDakgsa0hBQWtIO1FBQ2xILGlIQUFpSDtRQUNqSCxpSEFBaUg7UUFDakgsaUhBQWlIO1FBQ2pILGlDQUFpQztRQUNqQyw4R0FBOEc7UUFFOUdoQyxNQUFNOEMsYUFBYSxDQUFDTyxpQkFBaUJKO0lBQ3ZDO0lBRUE7OztHQUdDLEdBQ0FNLFFBQVFDLElBQUksRUFBRTtRQUNiLGdHQUFnRztRQUNoRyxtREFBbUQ7UUFDbkQsSUFBSSxDQUFDekMsUUFBUSxHQUFHd0MsT0FBTyxDQUFDQztRQUN4QixtREFBbUQ7UUFDbkQsSUFBSSxDQUFDM0IsaUJBQWlCLEdBQUcwQixPQUFPLENBQUNDO0lBQ25DO0lBRUE7OztHQUdDLEdBQ0FDLFFBQVFDLElBQUksRUFBRTtRQUNiLGdHQUFnRztRQUNoRyxtREFBbUQ7UUFDbkQsSUFBSSxDQUFDM0MsUUFBUSxHQUFHMEMsT0FBTyxDQUFDQztRQUN4QixtREFBbUQ7UUFDbkQsSUFBSSxDQUFDN0IsaUJBQWlCLEdBQUc0QixPQUFPLENBQUNDO0lBQ25DO0lBRUE7OztHQUdDLEdBQ0FDLFVBQVVDLE1BQU0sRUFBRTtRQUNqQixrR0FBa0c7UUFDbEcsbURBQW1EO1FBQ25ELElBQUksQ0FBQzdDLFFBQVEsR0FBRzRDLFNBQVMsQ0FBQ0M7UUFDMUIsbURBQW1EO1FBQ25ELElBQUksQ0FBQy9CLGlCQUFpQixHQUFHOEIsU0FBUyxDQUFDQztJQUNyQztJQUVBOzs7R0FHQyxHQUNBQyxPQUFPQyxHQUFHLEVBQUVDLEtBQUssRUFBRTtRQUNsQiwrRkFBK0Y7UUFDL0YsbURBQW1EO1FBQ25ELElBQUksQ0FBQ2hELFFBQVEsR0FBRzhDLE1BQU0sQ0FBQ0MsS0FBS0M7UUFDNUIsbURBQW1EO1FBQ25ELElBQUksQ0FBQ2xDLGlCQUFpQixHQUFHZ0MsTUFBTSxDQUFDQyxLQUFLQztJQUN2QztJQUVBOzs7R0FHQyxHQUNBQyxTQUFTRixHQUFHLEVBQUVHLEtBQUssRUFBRTtRQUNwQixpR0FBaUc7UUFDakcsbURBQW1EO1FBQ25ELElBQUksQ0FBQ2xELFFBQVEsR0FBR2lELFFBQVEsQ0FBQ0YsS0FBS0c7UUFDOUIsbURBQW1EO1FBQ25ELElBQUksQ0FBQ3BDLGlCQUFpQixHQUFHbUMsUUFBUSxDQUFDRixLQUFLRztJQUN6QztJQUVBOzs7R0FHQyxHQUNELDhEQUE4RDtJQUM3REMsV0FBV0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDekIsbUdBQW1HO1FBQ25HLG1EQUFtRDtRQUNuRCxJQUFJLENBQUNyRCxRQUFRLEdBQUdtRCxVQUFVLENBQUNDLE1BQU1DO1FBQ2pDLG1EQUFtRDtRQUNuRCxJQUFJLENBQUN2QyxpQkFBaUIsR0FBR3FDLFVBQVUsQ0FBQ0MsTUFBTUM7SUFDNUM7SUFFQTs7OztHQUlDLEdBQ0FDLGVBQWU3QyxRQUFRLEVBQUU7UUFDeEIsbURBQW1EO1FBQ25ELE1BQU0sRUFBRXhCLEtBQUssRUFBRUQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDYSxXQUFXO1FBQzFDLElBQUliLFFBQVE7WUFDVnlCLFNBQVN4QjtRQUNYO0lBQ0Y7SUFFQTs7R0FFQyxHQUNBc0UsSUFBSTlDLFFBQVEsRUFBRTtRQUNiLG1EQUFtRDtRQUNuRCxNQUFNK0MsU0FBU0MsU0FBUyxJQUFJO1FBQzVCLElBQUk7WUFDRmhELFNBQVMsSUFBSTtRQUNmLFNBQVU7WUFDUixtREFBbUQ7WUFDbkRnRCxTQUFTRDtRQUNYO0lBQ0Y7SUFFQTs7O0dBR0MsR0FDQUUsZUFBZUMsV0FBVyxFQUFFO1FBQzNCLG1EQUFtRDtRQUNuRCxNQUFNM0UsU0FBUyxJQUFJLENBQUNvQixTQUFTO1FBQzdCLElBQUksQ0FBQ3BCLFFBQVEsT0FBTztRQUNwQixJQUFJO1lBQ0YsbURBQW1EO1lBQ25ELE9BQU9BLE9BQU8wRSxjQUFjLENBQUNDO1FBQy9CLEVBQUUsT0FBT0MsS0FBSztZQUNadkYsd0RBQVdBLElBQUlKLGlEQUFNQSxDQUFDNEYsSUFBSSxDQUFDLENBQUMsNEJBQTRCLEVBQUVGLFlBQVlHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztZQUMvRixPQUFPO1FBQ1Q7SUFDRjtJQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkMsR0FDQUMsaUJBQWlCVixPQUFPLEVBQUVXLHFCQUFxQixFQUFFO1FBQ2hELE1BQU1DLFNBQVMsSUFBSSxDQUFDQyxvQkFBb0IsQ0FBQyxvQkFBb0JiLFNBQVNXO1FBRXRFLElBQUkzRix3REFBV0EsSUFBSSxDQUFDNEYsUUFBUTtZQUMxQixtREFBbUQ7WUFDbkQsTUFBTWpGLFNBQVMsSUFBSSxDQUFDb0IsU0FBUztZQUM3QixJQUFJLENBQUNwQixRQUFRO2dCQUNYZixpREFBTUEsQ0FBQzRGLElBQUksQ0FDVDtZQUVKLE9BQU87Z0JBQ0w1RixpREFBTUEsQ0FBQzRGLElBQUksQ0FBQyxDQUFDOzs7QUFHckIsQ0FBQztZQUNLO1FBQ0Y7UUFFQSxPQUFPSTtJQUNUO0lBRUE7OztHQUdDLEdBQ0FFLGVBQWU7UUFDZCxPQUFPLElBQUksQ0FBQ0Qsb0JBQW9CLENBQUM7SUFDbkM7SUFFQTs7OztHQUlDLEdBQ0FFLGVBQWVDLGFBQWEsS0FBSyxFQUFFO1FBQ2xDLDJEQUEyRDtRQUMzRCxJQUFJQSxZQUFZO1lBQ2QsbURBQW1EO1lBQ25ELE9BQU8sSUFBSSxDQUFDQSxVQUFVO1FBQ3hCO1FBRUEsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQ0Msa0JBQWtCO0lBQ3pCO0lBRUE7OztHQUdDLEdBQ0FELGFBQWE7UUFDWixtREFBbUQ7UUFDbkQsTUFBTUUsUUFBUSxJQUFJLENBQUMxRSxXQUFXO1FBQzlCLE1BQU1aLFFBQVFzRixNQUFNdEYsS0FBSztRQUN6QixNQUFNdUYsVUFBVXZGLE1BQU13RixVQUFVO1FBQ2hDLElBQUlELFNBQVM7WUFDWGpHLHlEQUFZQSxDQUFDaUc7UUFDZjtRQUNBLElBQUksQ0FBQ0Ysa0JBQWtCO1FBRXZCLGdEQUFnRDtRQUNoRHJGLE1BQU15RixVQUFVO0lBQ2xCO0lBRUE7OztHQUdDLEdBQ0FDLGFBQWF0QixPQUFPLEVBQUU7UUFDckIsbURBQW1EO1FBQ25ELE1BQU0sRUFBRXBFLEtBQUssRUFBRUQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDYSxXQUFXO1FBQzFDLE1BQU0sRUFBRStFLE9BQU8sRUFBRUMsY0FBY3pHLDhEQUFtQixFQUFFLEdBQUcsVUFBV1ksT0FBT21ELFVBQVUsTUFBTyxDQUFDO1FBRTNGLGtEQUFrRDtRQUNsRCxNQUFNLEVBQUUyQyxTQUFTLEVBQUUsR0FBRzVHLHFEQUFVQSxDQUFDNkcsU0FBUyxJQUFJLENBQUM7UUFFL0MsTUFBTVAsVUFBVWhHLHdEQUFXQSxDQUFDO1lBQzFCb0c7WUFDQUM7WUFDQXBDLE1BQU14RCxNQUFNK0YsT0FBTztZQUNuQixHQUFJRixhQUFhO2dCQUFFQTtZQUFVLENBQUM7WUFDOUIsR0FBR3pCLE9BQU87UUFDWjtRQUVBLHNDQUFzQztRQUN0QyxNQUFNNEIsaUJBQWlCaEcsTUFBTXdGLFVBQVUsSUFBSXhGLE1BQU13RixVQUFVO1FBQzNELElBQUlRLGtCQUFrQkEsZUFBZUMsTUFBTSxLQUFLLE1BQU07WUFDcER6RywwREFBYUEsQ0FBQ3dHLGdCQUFnQjtnQkFBRUMsUUFBUTtZQUFTO1FBQ25EO1FBQ0EsbURBQW1EO1FBQ25ELElBQUksQ0FBQ2IsVUFBVTtRQUVmLGlEQUFpRDtRQUNqRHBGLE1BQU15RixVQUFVLENBQUNGO1FBRWpCLE9BQU9BO0lBQ1Q7SUFFQTs7Ozs7O0dBTUMsR0FDQVcsdUJBQXVCO1FBQ3RCLG1EQUFtRDtRQUNuRCxNQUFNbkcsU0FBUyxJQUFJLENBQUNvQixTQUFTO1FBQzdCLE1BQU1nRixVQUFVcEcsVUFBVUEsT0FBT21ELFVBQVU7UUFDM0MsT0FBT2tELFFBQVFELFdBQVdBLFFBQVFFLGNBQWM7SUFDbEQ7SUFFQTs7R0FFQyxHQUNBaEIscUJBQXFCO1FBQ3BCLG1EQUFtRDtRQUNuRCxNQUFNLEVBQUVyRixLQUFLLEVBQUVELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQ2EsV0FBVztRQUUxQyxNQUFNMkUsVUFBVXZGLE1BQU13RixVQUFVO1FBQ2hDLElBQUlELFdBQVd4RixVQUFVQSxPQUFPb0YsY0FBYyxFQUFFO1lBQzlDcEYsT0FBT29GLGNBQWMsQ0FBQ0k7UUFDeEI7SUFDRjtJQUVBOztHQUVDLEdBQ0QsaUhBQWlIO0lBQ2pILDhEQUE4RDtJQUM3RE4scUJBQXFCcUIsTUFBTSxFQUFFLEdBQUdDLElBQUksRUFBRTtRQUNyQyxNQUFNQyxVQUFVQztRQUNoQixNQUFNQyxTQUFTRixRQUFRRyxVQUFVO1FBQ2pDLElBQUlELFVBQVVBLE9BQU9FLFVBQVUsSUFBSSxPQUFPRixPQUFPRSxVQUFVLENBQUNOLE9BQU8sS0FBSyxZQUFZO1lBQ2xGLE9BQU9JLE9BQU9FLFVBQVUsQ0FBQ04sT0FBTyxDQUFDTyxLQUFLLENBQUMsSUFBSSxFQUFFTjtRQUMvQztRQUNBbkgsd0RBQVdBLElBQUlKLGlEQUFNQSxDQUFDNEYsSUFBSSxDQUFDLENBQUMsaUJBQWlCLEVBQUUwQixPQUFPLGtDQUFrQyxDQUFDO0lBQzNGO0FBQ0Y7QUFFQTs7Ozs7O0VBTUUsR0FDRixTQUFTRztJQUNQeEgscURBQVVBLENBQUMwSCxVQUFVLEdBQUcxSCxxREFBVUEsQ0FBQzBILFVBQVUsSUFBSTtRQUMvQ0MsWUFBWSxDQUFDO1FBQ2JFLEtBQUtDO0lBQ1A7SUFDQSxPQUFPOUgscURBQVVBO0FBQ25CO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU3VGLFNBQVNzQyxHQUFHO0lBQ25CLE1BQU1FLFdBQVdQO0lBQ2pCLE1BQU1sQyxTQUFTMEMsa0JBQWtCRDtJQUNqQ0UsZ0JBQWdCRixVQUFVRjtJQUMxQixPQUFPdkM7QUFDVDtBQUVBOzs7Ozs7OztDQVFDLEdBQ0QsU0FBUzRDO0lBQ1Asa0RBQWtEO0lBQ2xELE1BQU1ILFdBQVdQO0lBRWpCLElBQUlPLFNBQVNMLFVBQVUsSUFBSUssU0FBU0wsVUFBVSxDQUFDUyxHQUFHLEVBQUU7UUFDbEQsTUFBTU4sTUFBTUUsU0FBU0wsVUFBVSxDQUFDUyxHQUFHLENBQUNELGFBQWE7UUFFakQsSUFBSUwsS0FBSztZQUNQLE9BQU9BO1FBQ1Q7SUFDRjtJQUVBLDJDQUEyQztJQUMzQyxPQUFPTyxhQUFhTDtBQUN0QjtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTbkY7SUFDUCxtREFBbUQ7SUFDbkQsT0FBT3NGLGdCQUFnQnRGLGlCQUFpQjtBQUMxQztBQUVBLFNBQVN3RixhQUFhTCxXQUFXUCxnQkFBZ0I7SUFDL0MseURBQXlEO0lBRXpELElBQ0UsQ0FBQ2EsZ0JBQWdCTixhQUNqQixtREFBbUQ7SUFDbkRDLGtCQUFrQkQsVUFBVXZHLFdBQVcsQ0FBQ2YsY0FDeEM7UUFDQSxtREFBbUQ7UUFDbkR3SCxnQkFBZ0JGLFVBQVUsSUFBSW5IO0lBQ2hDO0lBRUEsMkNBQTJDO0lBQzNDLE9BQU9vSCxrQkFBa0JEO0FBQzNCO0FBRUE7Ozs7Q0FJQyxHQUNELFNBQVNPLG1CQUFtQmYsT0FBTyxFQUFFZ0IsU0FBU0gsY0FBYztJQUMxRCw0RUFBNEU7SUFDNUUsSUFDRSxDQUFDQyxnQkFBZ0JkLFlBQ2pCLG1EQUFtRDtJQUNuRFMsa0JBQWtCVCxTQUFTL0YsV0FBVyxDQUFDZixjQUN2QztRQUNBLG1EQUFtRDtRQUNuRCxNQUFNSyxTQUFTeUgsT0FBT3JHLFNBQVM7UUFDL0IsbURBQW1EO1FBQ25ELE1BQU1uQixRQUFRd0gsT0FBT3pHLFFBQVE7UUFDN0IsbURBQW1EO1FBQ25ELE1BQU1kLGlCQUFpQnVILE9BQU8zRixpQkFBaUI7UUFDL0MsbURBQW1EO1FBQ25EcUYsZ0JBQWdCVixTQUFTLElBQUkzRyxJQUFJRSxRQUFRQyxNQUFNZ0IsS0FBSyxJQUFJZixlQUFlZSxLQUFLO0lBQzlFO0FBQ0Y7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU3lHLHdCQUF3QkMsUUFBUTtJQUN2QyxrREFBa0Q7SUFDbEQsTUFBTVYsV0FBV1A7SUFDakJPLFNBQVNMLFVBQVUsR0FBR0ssU0FBU0wsVUFBVSxJQUFJLENBQUM7SUFDOUNLLFNBQVNMLFVBQVUsQ0FBQ1MsR0FBRyxHQUFHTTtBQUM1QjtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLG9CQUFvQm5HLFFBQVEsRUFBRTJFLFVBQVUsQ0FBQyxDQUFDO0lBQ2pELE1BQU1hLFdBQVdQO0lBRWpCLElBQUlPLFNBQVNMLFVBQVUsSUFBSUssU0FBU0wsVUFBVSxDQUFDUyxHQUFHLEVBQUU7UUFDbEQsT0FBT0osU0FBU0wsVUFBVSxDQUFDUyxHQUFHLENBQUNPLG1CQUFtQixDQUFDbkcsVUFBVTJFO0lBQy9EO0lBRUEsa0VBQWtFO0lBQ2xFLE9BQU8zRTtBQUNUO0FBRUE7OztDQUdDLEdBQ0QsU0FBUzhGLGdCQUFnQmQsT0FBTztJQUM5QixPQUFPLENBQUMsQ0FBRUEsQ0FBQUEsV0FBV0EsUUFBUUcsVUFBVSxJQUFJSCxRQUFRRyxVQUFVLENBQUNHLEdBQUc7QUFDbkU7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNHLGtCQUFrQlQsT0FBTztJQUNoQyxtREFBbUQ7SUFDbkQsT0FBT3RILGlFQUFrQkEsQ0FBQyxPQUFPLElBQU0sSUFBSVcsT0FBTzJHO0FBQ3BEO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTVSxnQkFBZ0JWLE9BQU8sRUFBRU0sR0FBRztJQUNuQyxJQUFJLENBQUNOLFNBQVMsT0FBTztJQUNyQixNQUFNRyxhQUFjSCxRQUFRRyxVQUFVLEdBQUdILFFBQVFHLFVBQVUsSUFBSSxDQUFDO0lBQ2hFQSxXQUFXRyxHQUFHLEdBQUdBO0lBQ2pCLE9BQU87QUFDVDtBQUU4TCxDQUM5TCwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnJhbGluay13ZWIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9odWIuanM/MzkyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1RoZW5hYmxlLCB1dWlkNCwgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcywgY29uc29sZVNhbmRib3gsIGxvZ2dlciwgR0xPQkFMX09CSiwgZ2V0R2xvYmFsU2luZ2xldG9uIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBERUZBVUxUX0VOVklST05NRU5UIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IFNjb3BlIH0gZnJvbSAnLi9zY29wZS5qcyc7XG5pbXBvcnQgeyBjbG9zZVNlc3Npb24sIG1ha2VTZXNzaW9uLCB1cGRhdGVTZXNzaW9uIH0gZnJvbSAnLi9zZXNzaW9uLmpzJztcbmltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSAnLi92ZXJzaW9uLmpzJztcblxuLyoqXG4gKiBBUEkgY29tcGF0aWJpbGl0eSB2ZXJzaW9uIG9mIHRoaXMgaHViLlxuICpcbiAqIFdBUk5JTkc6IFRoaXMgbnVtYmVyIHNob3VsZCBvbmx5IGJlIGluY3JlYXNlZCB3aGVuIHRoZSBnbG9iYWwgaW50ZXJmYWNlXG4gKiBjaGFuZ2VzIGFuZCBuZXcgbWV0aG9kcyBhcmUgaW50cm9kdWNlZC5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmNvbnN0IEFQSV9WRVJTSU9OID0gcGFyc2VGbG9hdChTREtfVkVSU0lPTik7XG5cbi8qKlxuICogRGVmYXVsdCBtYXhpbXVtIG51bWJlciBvZiBicmVhZGNydW1icyBhZGRlZCB0byBhbiBldmVudC4gQ2FuIGJlIG92ZXJ3cml0dGVuXG4gKiB3aXRoIHtAbGluayBPcHRpb25zLm1heEJyZWFkY3J1bWJzfS5cbiAqL1xuY29uc3QgREVGQVVMVF9CUkVBRENSVU1CUyA9IDEwMDtcblxuLyoqXG4gKiBAaW5oZXJpdERvY1xuICovXG5jbGFzcyBIdWIgIHtcbiAgLyoqIElzIGEge0BsaW5rIExheWVyfVtdIGNvbnRhaW5pbmcgdGhlIGNsaWVudCBhbmQgc2NvcGUgKi9cblxuICAvKiogQ29udGFpbnMgdGhlIGxhc3QgZXZlbnQgaWQgb2YgYSBjYXB0dXJlZCBldmVudC4gICovXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGh1Yiwgd2lsbCBwdXNoIG9uZSB7QGxpbmsgTGF5ZXJ9IGludG8gdGhlXG4gICAqIGludGVybmFsIHN0YWNrIG9uIGNyZWF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gY2xpZW50IGJvdW5kIHRvIHRoZSBodWIuXG4gICAqIEBwYXJhbSBzY29wZSBib3VuZCB0byB0aGUgaHViLlxuICAgKiBAcGFyYW0gdmVyc2lvbiBudW1iZXIsIGhpZ2hlciBudW1iZXIgbWVhbnMgaGlnaGVyIHByaW9yaXR5LlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBJbnN0YW50aWF0aW9uIG9mIEh1YiBvYmplY3RzIGlzIGRlcHJlY2F0ZWQgYW5kIHRoZSBjb25zdHJ1Y3RvciB3aWxsIGJlIHJlbW92ZWQgaW4gdmVyc2lvbiA4IG9mIHRoZSBTREsuXG4gICAqXG4gICAqIElmIHlvdSBhcmUgY3VycmVudGx5IHVzaW5nIHRoZSBIdWIgZm9yIG11bHRpLWNsaWVudCB1c2UgbGlrZSBzbzpcbiAgICpcbiAgICogYGBgXG4gICAqIC8vIE9MRFxuICAgKiBjb25zdCBodWIgPSBuZXcgSHViKCk7XG4gICAqIGh1Yi5iaW5kQ2xpZW50KGNsaWVudCk7XG4gICAqIG1ha2VNYWluKGh1YilcbiAgICogYGBgXG4gICAqXG4gICAqIGluc3RlYWQgaW5pdGlhbGl6ZSB0aGUgY2xpZW50IGFzIGZvbGxvd3M6XG4gICAqXG4gICAqIGBgYFxuICAgKiAvLyBORVdcbiAgICogU2VudHJ5LndpdGhJc29sYXRpb25TY29wZSgoKSA9PiB7XG4gICAqICAgIFNlbnRyeS5zZXRDdXJyZW50Q2xpZW50KGNsaWVudCk7XG4gICAqICAgIGNsaWVudC5pbml0KCk7XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogSWYgeW91IGFyZSB1c2luZyB0aGUgSHViIHRvIGNhcHR1cmUgZXZlbnRzIGxpa2Ugc286XG4gICAqXG4gICAqIGBgYFxuICAgKiAvLyBPTERcbiAgICogY29uc3QgY2xpZW50ID0gbmV3IENsaWVudCgpO1xuICAgKiBjb25zdCBodWIgPSBuZXcgSHViKGNsaWVudCk7XG4gICAqIGh1Yi5jYXB0dXJlRXhjZXB0aW9uKClcbiAgICogYGBgXG4gICAqXG4gICAqIGluc3RlYWQgY2FwdHVyZSBpc29sYXRlZCBldmVudHMgYXMgZm9sbG93czpcbiAgICpcbiAgICogYGBgXG4gICAqIC8vIE5FV1xuICAgKiBjb25zdCBjbGllbnQgPSBuZXcgQ2xpZW50KCk7XG4gICAqIGNvbnN0IHNjb3BlID0gbmV3IFNjb3BlKCk7XG4gICAqIHNjb3BlLnNldENsaWVudChjbGllbnQpO1xuICAgKiBzY29wZS5jYXB0dXJlRXhjZXB0aW9uKCk7XG4gICAqIGBgYFxuICAgKi9cbiAgIGNvbnN0cnVjdG9yKFxuICAgIGNsaWVudCxcbiAgICBzY29wZSxcbiAgICBpc29sYXRpb25TY29wZSxcbiAgICAgIF92ZXJzaW9uID0gQVBJX1ZFUlNJT04sXG4gICkge3RoaXMuX3ZlcnNpb24gPSBfdmVyc2lvbjtcbiAgICBsZXQgYXNzaWduZWRTY29wZTtcbiAgICBpZiAoIXNjb3BlKSB7XG4gICAgICBhc3NpZ25lZFNjb3BlID0gbmV3IFNjb3BlKCk7XG4gICAgICBhc3NpZ25lZFNjb3BlLnNldENsaWVudChjbGllbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NpZ25lZFNjb3BlID0gc2NvcGU7XG4gICAgfVxuXG4gICAgbGV0IGFzc2lnbmVkSXNvbGF0aW9uU2NvcGU7XG4gICAgaWYgKCFpc29sYXRpb25TY29wZSkge1xuICAgICAgYXNzaWduZWRJc29sYXRpb25TY29wZSA9IG5ldyBTY29wZSgpO1xuICAgICAgYXNzaWduZWRJc29sYXRpb25TY29wZS5zZXRDbGllbnQoY2xpZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduZWRJc29sYXRpb25TY29wZSA9IGlzb2xhdGlvblNjb3BlO1xuICAgIH1cblxuICAgIHRoaXMuX3N0YWNrID0gW3sgc2NvcGU6IGFzc2lnbmVkU2NvcGUgfV07XG5cbiAgICBpZiAoY2xpZW50KSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgIHRoaXMuYmluZENsaWVudChjbGllbnQpO1xuICAgIH1cblxuICAgIHRoaXMuX2lzb2xhdGlvblNjb3BlID0gYXNzaWduZWRJc29sYXRpb25TY29wZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBodWIncyB2ZXJzaW9uIGlzIG9sZGVyIHRoYW4gdGhlIGdpdmVuIHZlcnNpb24uXG4gICAqXG4gICAqIEBwYXJhbSB2ZXJzaW9uIEEgdmVyc2lvbiBudW1iZXIgdG8gY29tcGFyZSB0by5cbiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBnaXZlbiB2ZXJzaW9uIGlzIG5ld2VyOyBvdGhlcndpc2UgZmFsc2UuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFRoaXMgd2lsbCBiZSByZW1vdmVkIGluIHY4LlxuICAgKi9cbiAgIGlzT2xkZXJUaGFuKHZlcnNpb24pIHtcbiAgICByZXR1cm4gdGhpcy5fdmVyc2lvbiA8IHZlcnNpb247XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBiaW5kcyB0aGUgZ2l2ZW4gY2xpZW50IHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgKiBAcGFyYW0gY2xpZW50IEFuIFNESyBjbGllbnQgKGNsaWVudCkgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgaW5pdEFuZEJpbmQoKWAgZGlyZWN0bHksIG9yIGBzZXRDdXJyZW50Q2xpZW50KClgIGFuZC9vciBgY2xpZW50LmluaXQoKWAgaW5zdGVhZC5cbiAgICovXG4gICBiaW5kQ2xpZW50KGNsaWVudCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGNvbnN0IHRvcCA9IHRoaXMuZ2V0U3RhY2tUb3AoKTtcbiAgICB0b3AuY2xpZW50ID0gY2xpZW50O1xuICAgIHRvcC5zY29wZS5zZXRDbGllbnQoY2xpZW50KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBpZiAoY2xpZW50ICYmIGNsaWVudC5zZXR1cEludGVncmF0aW9ucykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICBjbGllbnQuc2V0dXBJbnRlZ3JhdGlvbnMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGB3aXRoU2NvcGVgIGluc3RlYWQuXG4gICAqL1xuICAgcHVzaFNjb3BlKCkge1xuICAgIC8vIFdlIHdhbnQgdG8gY2xvbmUgdGhlIGNvbnRlbnQgb2YgcHJldiBzY29wZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGNvbnN0IHNjb3BlID0gdGhpcy5nZXRTY29wZSgpLmNsb25lKCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdGhpcy5nZXRTdGFjaygpLnB1c2goe1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICBjbGllbnQ6IHRoaXMuZ2V0Q2xpZW50KCksXG4gICAgICBzY29wZSxcbiAgICB9KTtcbiAgICByZXR1cm4gc2NvcGU7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGB3aXRoU2NvcGVgIGluc3RlYWQuXG4gICAqL1xuICAgcG9wU2NvcGUoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgaWYgKHRoaXMuZ2V0U3RhY2soKS5sZW5ndGggPD0gMSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHJldHVybiAhIXRoaXMuZ2V0U3RhY2soKS5wb3AoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYFNlbnRyeS53aXRoU2NvcGUoKWAgaW5zdGVhZC5cbiAgICovXG4gICB3aXRoU2NvcGUoY2FsbGJhY2spIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBjb25zdCBzY29wZSA9IHRoaXMucHVzaFNjb3BlKCk7XG5cbiAgICBsZXQgbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICBtYXliZVByb21pc2VSZXN1bHQgPSBjYWxsYmFjayhzY29wZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICB0aGlzLnBvcFNjb3BlKCk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cblxuICAgIGlmIChpc1RoZW5hYmxlKG1heWJlUHJvbWlzZVJlc3VsdCkpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBpc1RoZW5hYmxlIHJldHVybnMgdGhlIHdyb25nIHR5cGVcbiAgICAgIHJldHVybiBtYXliZVByb21pc2VSZXN1bHQudGhlbihcbiAgICAgICAgcmVzID0+IHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICB0aGlzLnBvcFNjb3BlKCk7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSxcbiAgICAgICAgZSA9PiB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgdGhpcy5wb3BTY29wZSgpO1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHRoaXMucG9wU2NvcGUoKTtcbiAgICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgU2VudHJ5LmdldENsaWVudCgpYCBpbnN0ZWFkLlxuICAgKi9cbiAgIGdldENsaWVudCgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICByZXR1cm4gdGhpcy5nZXRTdGFja1RvcCgpLmNsaWVudCA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2NvcGUgb2YgdGhlIHRvcCBzdGFjay5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBTZW50cnkuZ2V0Q3VycmVudFNjb3BlKClgIGluc3RlYWQuXG4gICAqL1xuICAgZ2V0U2NvcGUoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RhY2tUb3AoKS5zY29wZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYFNlbnRyeS5nZXRJc29sYXRpb25TY29wZSgpYCBpbnN0ZWFkLlxuICAgKi9cbiAgIGdldElzb2xhdGlvblNjb3BlKCkge1xuICAgIHJldHVybiB0aGlzLl9pc29sYXRpb25TY29wZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzY29wZSBzdGFjayBmb3IgZG9tYWlucyBvciB0aGUgcHJvY2Vzcy5cbiAgICogQGRlcHJlY2F0ZWQgVGhpcyB3aWxsIGJlIHJlbW92ZWQgaW4gdjguXG4gICAqL1xuICAgZ2V0U3RhY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YWNrO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHRvcG1vc3Qgc2NvcGUgbGF5ZXIgaW4gdGhlIG9yZGVyIGRvbWFpbiA+IGxvY2FsID4gcHJvY2Vzcy5cbiAgICogQGRlcHJlY2F0ZWQgVGhpcyB3aWxsIGJlIHJlbW92ZWQgaW4gdjguXG4gICAqL1xuICAgZ2V0U3RhY2tUb3AoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YWNrW3RoaXMuX3N0YWNrLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgU2VudHJ5LmNhcHR1cmVFeGNlcHRpb24oKWAgaW5zdGVhZC5cbiAgICovXG4gICBjYXB0dXJlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgaGludCkge1xuICAgIGNvbnN0IGV2ZW50SWQgPSAodGhpcy5fbGFzdEV2ZW50SWQgPSBoaW50ICYmIGhpbnQuZXZlbnRfaWQgPyBoaW50LmV2ZW50X2lkIDogdXVpZDQoKSk7XG4gICAgY29uc3Qgc3ludGhldGljRXhjZXB0aW9uID0gbmV3IEVycm9yKCdTZW50cnkgc3ludGhldGljRXhjZXB0aW9uJyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdGhpcy5nZXRTY29wZSgpLmNhcHR1cmVFeGNlcHRpb24oZXhjZXB0aW9uLCB7XG4gICAgICBvcmlnaW5hbEV4Y2VwdGlvbjogZXhjZXB0aW9uLFxuICAgICAgc3ludGhldGljRXhjZXB0aW9uLFxuICAgICAgLi4uaGludCxcbiAgICAgIGV2ZW50X2lkOiBldmVudElkLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGV2ZW50SWQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlICBgU2VudHJ5LmNhcHR1cmVNZXNzYWdlKClgIGluc3RlYWQuXG4gICAqL1xuICAgY2FwdHVyZU1lc3NhZ2UoXG4gICAgbWVzc2FnZSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBsZXZlbCxcbiAgICBoaW50LFxuICApIHtcbiAgICBjb25zdCBldmVudElkID0gKHRoaXMuX2xhc3RFdmVudElkID0gaGludCAmJiBoaW50LmV2ZW50X2lkID8gaGludC5ldmVudF9pZCA6IHV1aWQ0KCkpO1xuICAgIGNvbnN0IHN5bnRoZXRpY0V4Y2VwdGlvbiA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB0aGlzLmdldFNjb3BlKCkuY2FwdHVyZU1lc3NhZ2UobWVzc2FnZSwgbGV2ZWwsIHtcbiAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBtZXNzYWdlLFxuICAgICAgc3ludGhldGljRXhjZXB0aW9uLFxuICAgICAgLi4uaGludCxcbiAgICAgIGV2ZW50X2lkOiBldmVudElkLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGV2ZW50SWQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBTZW50cnkuY2FwdHVyZUV2ZW50KClgIGluc3RlYWQuXG4gICAqL1xuICAgY2FwdHVyZUV2ZW50KGV2ZW50LCBoaW50KSB7XG4gICAgY29uc3QgZXZlbnRJZCA9IGhpbnQgJiYgaGludC5ldmVudF9pZCA/IGhpbnQuZXZlbnRfaWQgOiB1dWlkNCgpO1xuICAgIGlmICghZXZlbnQudHlwZSkge1xuICAgICAgdGhpcy5fbGFzdEV2ZW50SWQgPSBldmVudElkO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB0aGlzLmdldFNjb3BlKCkuY2FwdHVyZUV2ZW50KGV2ZW50LCB7IC4uLmhpbnQsIGV2ZW50X2lkOiBldmVudElkIH0pO1xuICAgIHJldHVybiBldmVudElkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFRoaXMgd2lsbCBiZSByZW1vdmVkIGluIHY4LlxuICAgKi9cbiAgIGxhc3RFdmVudElkKCkge1xuICAgIHJldHVybiB0aGlzLl9sYXN0RXZlbnRJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYFNlbnRyeS5hZGRCcmVhZGNydW1iKClgIGluc3RlYWQuXG4gICAqL1xuICAgYWRkQnJlYWRjcnVtYihicmVhZGNydW1iLCBoaW50KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgY29uc3QgeyBzY29wZSwgY2xpZW50IH0gPSB0aGlzLmdldFN0YWNrVG9wKCk7XG5cbiAgICBpZiAoIWNsaWVudCkgcmV0dXJuO1xuXG4gICAgY29uc3QgeyBiZWZvcmVCcmVhZGNydW1iID0gbnVsbCwgbWF4QnJlYWRjcnVtYnMgPSBERUZBVUxUX0JSRUFEQ1JVTUJTIH0gPVxuICAgICAgKGNsaWVudC5nZXRPcHRpb25zICYmIGNsaWVudC5nZXRPcHRpb25zKCkpIHx8IHt9O1xuXG4gICAgaWYgKG1heEJyZWFkY3J1bWJzIDw9IDApIHJldHVybjtcblxuICAgIGNvbnN0IHRpbWVzdGFtcCA9IGRhdGVUaW1lc3RhbXBJblNlY29uZHMoKTtcbiAgICBjb25zdCBtZXJnZWRCcmVhZGNydW1iID0geyB0aW1lc3RhbXAsIC4uLmJyZWFkY3J1bWIgfTtcbiAgICBjb25zdCBmaW5hbEJyZWFkY3J1bWIgPSBiZWZvcmVCcmVhZGNydW1iXG4gICAgICA/IChjb25zb2xlU2FuZGJveCgoKSA9PiBiZWZvcmVCcmVhZGNydW1iKG1lcmdlZEJyZWFkY3J1bWIsIGhpbnQpKSApXG4gICAgICA6IG1lcmdlZEJyZWFkY3J1bWI7XG5cbiAgICBpZiAoZmluYWxCcmVhZGNydW1iID09PSBudWxsKSByZXR1cm47XG5cbiAgICBpZiAoY2xpZW50LmVtaXQpIHtcbiAgICAgIGNsaWVudC5lbWl0KCdiZWZvcmVBZGRCcmVhZGNydW1iJywgZmluYWxCcmVhZGNydW1iLCBoaW50KTtcbiAgICB9XG5cbiAgICAvLyBUT0RPKHY4KTogSSBrbm93IHRoaXMgY29tbWVudCBkb2Vzbid0IG1ha2UgbXVjaCBzZW5zZSBiZWNhdXNlIHRoZSBodWIgd2lsbCBiZSBkZXByZWNhdGVkIGJ1dCBJIHN0aWxsIHdhbnRlZCB0b1xuICAgIC8vIHdyaXRlIGl0IGRvd24uIEluIHRoZW9yeSwgd2Ugd291bGQgaGF2ZSB0byBhZGQgdGhlIGJyZWFkY3J1bWJzIHRvIHRoZSBpc29sYXRpb24gc2NvcGUgaGVyZSwgaG93ZXZlciwgdGhhdCB3b3VsZFxuICAgIC8vIGR1cGxpY2F0ZSBhbGwgb2YgdGhlIGJyZWFkY3J1bWJzLiBUaGVyZSB3YXMgdGhlIHBvc3NpYmlsaXR5IG9mIGFkZGluZyBicmVhZGNydW1icyB0byBib3RoLCB0aGUgaXNvbGF0aW9uIHNjb3BlXG4gICAgLy8gYW5kIHRoZSBub3JtYWwgc2NvcGUsIGFuZCBkZWR1cGxpY2F0aW5nIGl0IGRvd24gdGhlIGxpbmUgaW4gdGhlIGV2ZW50IHByb2Nlc3NpbmcgcGlwZWxpbmUuIEhvd2V2ZXIsIHRoYXQgd291bGRcbiAgICAvLyBoYXZlIGJlZW4gdmVyeSBmcmFnaWxlLCBiZWNhdXNlIHRoZSBicmVhZGNydW1iIG9iamVjdHMgd291bGQgaGF2ZSBuZWVkZWQgdG8ga2VlcCB0aGVpciBpZGVudGl0eSBhbGwgdGhyb3VnaG91dFxuICAgIC8vIHRoZSBldmVudCBwcm9jZXNzaW5nIHBpcGVsaW5lLlxuICAgIC8vIEluIHRoZSBuZXcgaW1wbGVtZW50YXRpb24sIHRoZSB0b3AgbGV2ZWwgYFNlbnRyeS5hZGRCcmVhZGNydW1iKClgIHNob3VsZCBPTkxZIHdyaXRlIHRvIHRoZSBpc29sYXRpb24gc2NvcGUuXG5cbiAgICBzY29wZS5hZGRCcmVhZGNydW1iKGZpbmFsQnJlYWRjcnVtYiwgbWF4QnJlYWRjcnVtYnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgU2VudHJ5LnNldFVzZXIoKWAgaW5zdGVhZC5cbiAgICovXG4gICBzZXRVc2VyKHVzZXIpIHtcbiAgICAvLyBUT0RPKHY4KTogVGhlIHRvcCBsZXZlbCBgU2VudHJ5LnNldFVzZXIoKWAgZnVuY3Rpb24gc2hvdWxkIHdyaXRlIE9OTFkgdG8gdGhlIGlzb2xhdGlvbiBzY29wZS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB0aGlzLmdldFNjb3BlKCkuc2V0VXNlcih1c2VyKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB0aGlzLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VXNlcih1c2VyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKiBAZGVwcmVjYXRlZCBVc2UgYFNlbnRyeS5zZXRUYWdzKClgIGluc3RlYWQuXG4gICAqL1xuICAgc2V0VGFncyh0YWdzKSB7XG4gICAgLy8gVE9ETyh2OCk6IFRoZSB0b3AgbGV2ZWwgYFNlbnRyeS5zZXRUYWdzKClgIGZ1bmN0aW9uIHNob3VsZCB3cml0ZSBPTkxZIHRvIHRoZSBpc29sYXRpb24gc2NvcGUuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdGhpcy5nZXRTY29wZSgpLnNldFRhZ3ModGFncyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdGhpcy5nZXRJc29sYXRpb25TY29wZSgpLnNldFRhZ3ModGFncyk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBTZW50cnkuc2V0RXh0cmFzKClgIGluc3RlYWQuXG4gICAqL1xuICAgc2V0RXh0cmFzKGV4dHJhcykge1xuICAgIC8vIFRPRE8odjgpOiBUaGUgdG9wIGxldmVsIGBTZW50cnkuc2V0RXh0cmFzKClgIGZ1bmN0aW9uIHNob3VsZCB3cml0ZSBPTkxZIHRvIHRoZSBpc29sYXRpb24gc2NvcGUuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdGhpcy5nZXRTY29wZSgpLnNldEV4dHJhcyhleHRyYXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHRoaXMuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRFeHRyYXMoZXh0cmFzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKiBAZGVwcmVjYXRlZCBVc2UgYFNlbnRyeS5zZXRUYWcoKWAgaW5zdGVhZC5cbiAgICovXG4gICBzZXRUYWcoa2V5LCB2YWx1ZSkge1xuICAgIC8vIFRPRE8odjgpOiBUaGUgdG9wIGxldmVsIGBTZW50cnkuc2V0VGFnKClgIGZ1bmN0aW9uIHNob3VsZCB3cml0ZSBPTkxZIHRvIHRoZSBpc29sYXRpb24gc2NvcGUuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdGhpcy5nZXRTY29wZSgpLnNldFRhZyhrZXksIHZhbHVlKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB0aGlzLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VGFnKGtleSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgU2VudHJ5LnNldEV4dHJhKClgIGluc3RlYWQuXG4gICAqL1xuICAgc2V0RXh0cmEoa2V5LCBleHRyYSkge1xuICAgIC8vIFRPRE8odjgpOiBUaGUgdG9wIGxldmVsIGBTZW50cnkuc2V0RXh0cmEoKWAgZnVuY3Rpb24gc2hvdWxkIHdyaXRlIE9OTFkgdG8gdGhlIGlzb2xhdGlvbiBzY29wZS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB0aGlzLmdldFNjb3BlKCkuc2V0RXh0cmEoa2V5LCBleHRyYSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdGhpcy5nZXRJc29sYXRpb25TY29wZSgpLnNldEV4dHJhKGtleSwgZXh0cmEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgU2VudHJ5LnNldENvbnRleHQoKWAgaW5zdGVhZC5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICBzZXRDb250ZXh0KG5hbWUsIGNvbnRleHQpIHtcbiAgICAvLyBUT0RPKHY4KTogVGhlIHRvcCBsZXZlbCBgU2VudHJ5LnNldENvbnRleHQoKWAgZnVuY3Rpb24gc2hvdWxkIHdyaXRlIE9OTFkgdG8gdGhlIGlzb2xhdGlvbiBzY29wZS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB0aGlzLmdldFNjb3BlKCkuc2V0Q29udGV4dChuYW1lLCBjb250ZXh0KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB0aGlzLmdldElzb2xhdGlvblNjb3BlKCkuc2V0Q29udGV4dChuYW1lLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYGdldFNjb3BlKClgIGRpcmVjdGx5LlxuICAgKi9cbiAgIGNvbmZpZ3VyZVNjb3BlKGNhbGxiYWNrKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgY29uc3QgeyBzY29wZSwgY2xpZW50IH0gPSB0aGlzLmdldFN0YWNrVG9wKCk7XG4gICAgaWYgKGNsaWVudCkge1xuICAgICAgY2FsbGJhY2soc2NvcGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHJ1bihjYWxsYmFjaykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGNvbnN0IG9sZEh1YiA9IG1ha2VNYWluKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBjYWxsYmFjayh0aGlzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICBtYWtlTWFpbihvbGRIdWIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKiBAZGVwcmVjYXRlZCBVc2UgYFNlbnRyeS5nZXRDbGllbnQoKS5nZXRJbnRlZ3JhdGlvbkJ5TmFtZSgpYCBpbnN0ZWFkLlxuICAgKi9cbiAgIGdldEludGVncmF0aW9uKGludGVncmF0aW9uKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5nZXRDbGllbnQoKTtcbiAgICBpZiAoIWNsaWVudCkgcmV0dXJuIG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgcmV0dXJuIGNsaWVudC5nZXRJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbik7XG4gICAgfSBjYXRjaCAoX29PKSB7XG4gICAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIud2FybihgQ2Fubm90IHJldHJpZXZlIGludGVncmF0aW9uICR7aW50ZWdyYXRpb24uaWR9IGZyb20gdGhlIGN1cnJlbnQgSHViYCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIGEgbmV3IGBUcmFuc2FjdGlvbmAgYW5kIHJldHVybnMgaXQuIFRoaXMgaXMgdGhlIGVudHJ5IHBvaW50IHRvIG1hbnVhbCB0cmFjaW5nIGluc3RydW1lbnRhdGlvbi5cbiAgICpcbiAgICogQSB0cmVlIHN0cnVjdHVyZSBjYW4gYmUgYnVpbHQgYnkgYWRkaW5nIGNoaWxkIHNwYW5zIHRvIHRoZSB0cmFuc2FjdGlvbiwgYW5kIGNoaWxkIHNwYW5zIHRvIG90aGVyIHNwYW5zLiBUbyBzdGFydCBhXG4gICAqIG5ldyBjaGlsZCBzcGFuIHdpdGhpbiB0aGUgdHJhbnNhY3Rpb24gb3IgYW55IHNwYW4sIGNhbGwgdGhlIHJlc3BlY3RpdmUgYC5zdGFydENoaWxkKClgIG1ldGhvZC5cbiAgICpcbiAgICogRXZlcnkgY2hpbGQgc3BhbiBtdXN0IGJlIGZpbmlzaGVkIGJlZm9yZSB0aGUgdHJhbnNhY3Rpb24gaXMgZmluaXNoZWQsIG90aGVyd2lzZSB0aGUgdW5maW5pc2hlZCBzcGFucyBhcmUgZGlzY2FyZGVkLlxuICAgKlxuICAgKiBUaGUgdHJhbnNhY3Rpb24gbXVzdCBiZSBmaW5pc2hlZCB3aXRoIGEgY2FsbCB0byBpdHMgYC5lbmQoKWAgbWV0aG9kLCBhdCB3aGljaCBwb2ludCB0aGUgdHJhbnNhY3Rpb24gd2l0aCBhbGwgaXRzXG4gICAqIGZpbmlzaGVkIGNoaWxkIHNwYW5zIHdpbGwgYmUgc2VudCB0byBTZW50cnkuXG4gICAqXG4gICAqIEBwYXJhbSBjb250ZXh0IFByb3BlcnRpZXMgb2YgdGhlIG5ldyBgVHJhbnNhY3Rpb25gLlxuICAgKiBAcGFyYW0gY3VzdG9tU2FtcGxpbmdDb250ZXh0IEluZm9ybWF0aW9uIGdpdmVuIHRvIHRoZSB0cmFuc2FjdGlvbiBzYW1wbGluZyBmdW5jdGlvbiAoYWxvbmcgd2l0aCBjb250ZXh0LWRlcGVuZGVudFxuICAgKiBkZWZhdWx0IHZhbHVlcykuIFNlZSB7QGxpbmsgT3B0aW9ucy50cmFjZXNTYW1wbGVyfS5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIHRyYW5zYWN0aW9uIHdoaWNoIHdhcyBqdXN0IHN0YXJ0ZWRcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzdGFydFNwYW4oKWAsIGBzdGFydFNwYW5NYW51YWwoKWAgb3IgYHN0YXJ0SW5hY3RpdmVTcGFuKClgIGluc3RlYWQuXG4gICAqL1xuICAgc3RhcnRUcmFuc2FjdGlvbihjb250ZXh0LCBjdXN0b21TYW1wbGluZ0NvbnRleHQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9jYWxsRXh0ZW5zaW9uTWV0aG9kKCdzdGFydFRyYW5zYWN0aW9uJywgY29udGV4dCwgY3VzdG9tU2FtcGxpbmdDb250ZXh0KTtcblxuICAgIGlmIChERUJVR19CVUlMRCAmJiAhcmVzdWx0KSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgICBpZiAoIWNsaWVudCkge1xuICAgICAgICBsb2dnZXIud2FybihcbiAgICAgICAgICBcIlRyYWNpbmcgZXh0ZW5zaW9uICdzdGFydFRyYW5zYWN0aW9uJyBpcyBtaXNzaW5nLiBZb3Ugc2hvdWxkICdpbml0JyB0aGUgU0RLIGJlZm9yZSBjYWxsaW5nICdzdGFydFRyYW5zYWN0aW9uJ1wiLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oYFRyYWNpbmcgZXh0ZW5zaW9uICdzdGFydFRyYW5zYWN0aW9uJyBoYXMgbm90IGJlZW4gYWRkZWQuIENhbGwgJ2FkZFRyYWNpbmdFeHRlbnNpb25zJyBiZWZvcmUgY2FsbGluZyAnaW5pdCc6XG5TZW50cnkuYWRkVHJhY2luZ0V4dGVuc2lvbnMoKTtcblNlbnRyeS5pbml0KHsuLi59KTtcbmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzcGFuVG9UcmFjZUhlYWRlcigpYCBpbnN0ZWFkLlxuICAgKi9cbiAgIHRyYWNlSGVhZGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbEV4dGVuc2lvbk1ldGhvZCgndHJhY2VIZWFkZXJzJyk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRvcCBsZXZlbCBgY2FwdHVyZVNlc3Npb25gIGluc3RlYWQuXG4gICAqL1xuICAgY2FwdHVyZVNlc3Npb24oZW5kU2Vzc2lvbiA9IGZhbHNlKSB7XG4gICAgLy8gYm90aCBzZW5kIHRoZSB1cGRhdGUgYW5kIHB1bGwgdGhlIHNlc3Npb24gZnJvbSB0aGUgc2NvcGVcbiAgICBpZiAoZW5kU2Vzc2lvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICByZXR1cm4gdGhpcy5lbmRTZXNzaW9uKCk7XG4gICAgfVxuXG4gICAgLy8gb25seSBzZW5kIHRoZSB1cGRhdGVcbiAgICB0aGlzLl9zZW5kU2Vzc2lvblVwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqIEBkZXByZWNhdGVkIFVzZSB0b3AgbGV2ZWwgYGVuZFNlc3Npb25gIGluc3RlYWQuXG4gICAqL1xuICAgZW5kU2Vzc2lvbigpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBjb25zdCBsYXllciA9IHRoaXMuZ2V0U3RhY2tUb3AoKTtcbiAgICBjb25zdCBzY29wZSA9IGxheWVyLnNjb3BlO1xuICAgIGNvbnN0IHNlc3Npb24gPSBzY29wZS5nZXRTZXNzaW9uKCk7XG4gICAgaWYgKHNlc3Npb24pIHtcbiAgICAgIGNsb3NlU2Vzc2lvbihzZXNzaW9uKTtcbiAgICB9XG4gICAgdGhpcy5fc2VuZFNlc3Npb25VcGRhdGUoKTtcblxuICAgIC8vIHRoZSBzZXNzaW9uIGlzIG92ZXI7IHRha2UgaXQgb2ZmIG9mIHRoZSBzY29wZVxuICAgIHNjb3BlLnNldFNlc3Npb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKiBAZGVwcmVjYXRlZCBVc2UgdG9wIGxldmVsIGBzdGFydFNlc3Npb25gIGluc3RlYWQuXG4gICAqL1xuICAgc3RhcnRTZXNzaW9uKGNvbnRleHQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBjb25zdCB7IHNjb3BlLCBjbGllbnQgfSA9IHRoaXMuZ2V0U3RhY2tUb3AoKTtcbiAgICBjb25zdCB7IHJlbGVhc2UsIGVudmlyb25tZW50ID0gREVGQVVMVF9FTlZJUk9OTUVOVCB9ID0gKGNsaWVudCAmJiBjbGllbnQuZ2V0T3B0aW9ucygpKSB8fCB7fTtcblxuICAgIC8vIFdpbGwgZmV0Y2ggdXNlckFnZW50IGlmIGNhbGxlZCBmcm9tIGJyb3dzZXIgc2RrXG4gICAgY29uc3QgeyB1c2VyQWdlbnQgfSA9IEdMT0JBTF9PQkoubmF2aWdhdG9yIHx8IHt9O1xuXG4gICAgY29uc3Qgc2Vzc2lvbiA9IG1ha2VTZXNzaW9uKHtcbiAgICAgIHJlbGVhc2UsXG4gICAgICBlbnZpcm9ubWVudCxcbiAgICAgIHVzZXI6IHNjb3BlLmdldFVzZXIoKSxcbiAgICAgIC4uLih1c2VyQWdlbnQgJiYgeyB1c2VyQWdlbnQgfSksXG4gICAgICAuLi5jb250ZXh0LFxuICAgIH0pO1xuXG4gICAgLy8gRW5kIGV4aXN0aW5nIHNlc3Npb24gaWYgdGhlcmUncyBvbmVcbiAgICBjb25zdCBjdXJyZW50U2Vzc2lvbiA9IHNjb3BlLmdldFNlc3Npb24gJiYgc2NvcGUuZ2V0U2Vzc2lvbigpO1xuICAgIGlmIChjdXJyZW50U2Vzc2lvbiAmJiBjdXJyZW50U2Vzc2lvbi5zdGF0dXMgPT09ICdvaycpIHtcbiAgICAgIHVwZGF0ZVNlc3Npb24oY3VycmVudFNlc3Npb24sIHsgc3RhdHVzOiAnZXhpdGVkJyB9KTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdGhpcy5lbmRTZXNzaW9uKCk7XG5cbiAgICAvLyBBZnRlcndhcmRzIHdlIHNldCB0aGUgbmV3IHNlc3Npb24gb24gdGhlIHNjb3BlXG4gICAgc2NvcGUuc2V0U2Vzc2lvbihzZXNzaW9uKTtcblxuICAgIHJldHVybiBzZXNzaW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaWYgZGVmYXVsdCBQSUkgc2hvdWxkIGJlIHNlbnQgdG8gU2VudHJ5IGFuZCBwcm9wYWdhdGVkIGluIG91cmdvaW5nIHJlcXVlc3RzXG4gICAqIHdoZW4gVHJhY2luZyBpcyB1c2VkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgdG9wLWxldmVsIGBnZXRDbGllbnQoKS5nZXRPcHRpb25zKCkuc2VuZERlZmF1bHRQaWlgIGluc3RlYWQuIFRoaXMgZnVuY3Rpb25cbiAgICogb25seSB1bm5lY2Vzc2FyaWx5IGluY3JlYXNlZCBBUEkgc3VyZmFjZSBidXQgb25seSB3cmFwcGVkIGFjY2Vzc2luZyB0aGUgb3B0aW9uLlxuICAgKi9cbiAgIHNob3VsZFNlbmREZWZhdWx0UGlpKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNsaWVudCAmJiBjbGllbnQuZ2V0T3B0aW9ucygpO1xuICAgIHJldHVybiBCb29sZWFuKG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5kRGVmYXVsdFBpaSk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgdGhlIGN1cnJlbnQgU2Vzc2lvbiBvbiB0aGUgc2NvcGVcbiAgICovXG4gICBfc2VuZFNlc3Npb25VcGRhdGUoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgY29uc3QgeyBzY29wZSwgY2xpZW50IH0gPSB0aGlzLmdldFN0YWNrVG9wKCk7XG5cbiAgICBjb25zdCBzZXNzaW9uID0gc2NvcGUuZ2V0U2Vzc2lvbigpO1xuICAgIGlmIChzZXNzaW9uICYmIGNsaWVudCAmJiBjbGllbnQuY2FwdHVyZVNlc3Npb24pIHtcbiAgICAgIGNsaWVudC5jYXB0dXJlU2Vzc2lvbihzZXNzaW9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgZ2xvYmFsIGV4dGVuc2lvbiBtZXRob2QgYW5kIGJpbmRpbmcgY3VycmVudCBpbnN0YW5jZSB0byB0aGUgZnVuY3Rpb24gY2FsbFxuICAgKi9cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBGdW5jdGlvbiBsYWNrcyBlbmRpbmcgcmV0dXJuIHN0YXRlbWVudCBhbmQgcmV0dXJuIHR5cGUgZG9lcyBub3QgaW5jbHVkZSAndW5kZWZpbmVkJy4gdHMoMjM2NilcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgIF9jYWxsRXh0ZW5zaW9uTWV0aG9kKG1ldGhvZCwgLi4uYXJncykge1xuICAgIGNvbnN0IGNhcnJpZXIgPSBnZXRNYWluQ2FycmllcigpO1xuICAgIGNvbnN0IHNlbnRyeSA9IGNhcnJpZXIuX19TRU5UUllfXztcbiAgICBpZiAoc2VudHJ5ICYmIHNlbnRyeS5leHRlbnNpb25zICYmIHR5cGVvZiBzZW50cnkuZXh0ZW5zaW9uc1ttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2VudHJ5LmV4dGVuc2lvbnNbbWV0aG9kXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLndhcm4oYEV4dGVuc2lvbiBtZXRob2QgJHttZXRob2R9IGNvdWxkbid0IGJlIGZvdW5kLCBkb2luZyBub3RoaW5nLmApO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZ2xvYmFsIHNoaW0gcmVnaXN0cnkuXG4gKlxuICogRklYTUU6IFRoaXMgZnVuY3Rpb24gaXMgcHJvYmxlbWF0aWMsIGJlY2F1c2UgZGVzcGl0ZSBhbHdheXMgcmV0dXJuaW5nIGEgdmFsaWQgQ2FycmllcixcbiAqIGl0IGhhcyBhbiBvcHRpb25hbCBgX19TRU5UUllfX2AgcHJvcGVydHksIHdoaWNoIHRoZW4gaW4gdHVybiByZXF1aXJlcyB1cyB0byBhbHdheXMgcGVyZm9ybSBhbiB1bm5lY2Vzc2FyeSBjaGVja1xuICogYXQgdGhlIGNhbGwtc2l0ZS4gV2UgYWx3YXlzIGFjY2VzcyB0aGUgY2FycmllciB0aHJvdWdoIHRoaXMgZnVuY3Rpb24sIHNvIHdlIGNhbiBndWFyYW50ZWUgdGhhdCBgX19TRU5UUllfX2AgaXMgdGhlcmUuXG4gKiovXG5mdW5jdGlvbiBnZXRNYWluQ2FycmllcigpIHtcbiAgR0xPQkFMX09CSi5fX1NFTlRSWV9fID0gR0xPQkFMX09CSi5fX1NFTlRSWV9fIHx8IHtcbiAgICBleHRlbnNpb25zOiB7fSxcbiAgICBodWI6IHVuZGVmaW5lZCxcbiAgfTtcbiAgcmV0dXJuIEdMT0JBTF9PQko7XG59XG5cbi8qKlxuICogUmVwbGFjZXMgdGhlIGN1cnJlbnQgbWFpbiBodWIgd2l0aCB0aGUgcGFzc2VkIG9uZSBvbiB0aGUgZ2xvYmFsIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIFRoZSBvbGQgcmVwbGFjZWQgaHViXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBzZXRDdXJyZW50Q2xpZW50KClgIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYWluKGh1Yikge1xuICBjb25zdCByZWdpc3RyeSA9IGdldE1haW5DYXJyaWVyKCk7XG4gIGNvbnN0IG9sZEh1YiA9IGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KTtcbiAgc2V0SHViT25DYXJyaWVyKHJlZ2lzdHJ5LCBodWIpO1xuICByZXR1cm4gb2xkSHViO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGRlZmF1bHQgaHViIGluc3RhbmNlLlxuICpcbiAqIElmIGEgaHViIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCBpbiB0aGUgZ2xvYmFsIGNhcnJpZXIgYnV0IHRoaXMgbW9kdWxlXG4gKiBjb250YWlucyBhIG1vcmUgcmVjZW50IHZlcnNpb24sIGl0IHJlcGxhY2VzIHRoZSByZWdpc3RlcmVkIHZlcnNpb24uXG4gKiBPdGhlcndpc2UsIHRoZSBjdXJyZW50bHkgcmVnaXN0ZXJlZCBodWIgd2lsbCBiZSByZXR1cm5lZC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIHJlc3BlY3RpdmUgcmVwbGFjZW1lbnQgbWV0aG9kIGRpcmVjdGx5IGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnRIdWIoKSB7XG4gIC8vIEdldCBtYWluIGNhcnJpZXIgKGdsb2JhbCBmb3IgZXZlcnkgZW52aXJvbm1lbnQpXG4gIGNvbnN0IHJlZ2lzdHJ5ID0gZ2V0TWFpbkNhcnJpZXIoKTtcblxuICBpZiAocmVnaXN0cnkuX19TRU5UUllfXyAmJiByZWdpc3RyeS5fX1NFTlRSWV9fLmFjcykge1xuICAgIGNvbnN0IGh1YiA9IHJlZ2lzdHJ5Ll9fU0VOVFJZX18uYWNzLmdldEN1cnJlbnRIdWIoKTtcblxuICAgIGlmIChodWIpIHtcbiAgICAgIHJldHVybiBodWI7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIGh1YiB0aGF0IGxpdmVzIG9uIGEgZ2xvYmFsIG9iamVjdFxuICByZXR1cm4gZ2V0R2xvYmFsSHViKHJlZ2lzdHJ5KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgaXNvbGF0aW9uIHNjb3BlLlxuICogVGhlIGlzb2xhdGlvbiBzY29wZSBpcyBhY3RpdmUgZm9yIHRoZSBjdXJyZW50IGV4ZWN0aW9uIGNvbnRleHQsXG4gKiBtZWFuaW5nIHRoYXQgaXQgd2lsbCByZW1haW4gc3RhYmxlIGZvciB0aGUgc2FtZSBIdWIuXG4gKi9cbmZ1bmN0aW9uIGdldElzb2xhdGlvblNjb3BlKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgcmV0dXJuIGdldEN1cnJlbnRIdWIoKS5nZXRJc29sYXRpb25TY29wZSgpO1xufVxuXG5mdW5jdGlvbiBnZXRHbG9iYWxIdWIocmVnaXN0cnkgPSBnZXRNYWluQ2FycmllcigpKSB7XG4gIC8vIElmIHRoZXJlJ3Mgbm8gaHViLCBvciBpdHMgYW4gb2xkIEFQSSwgYXNzaWduIGEgbmV3IG9uZVxuXG4gIGlmIChcbiAgICAhaGFzSHViT25DYXJyaWVyKHJlZ2lzdHJ5KSB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KS5pc09sZGVyVGhhbihBUElfVkVSU0lPTilcbiAgKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgc2V0SHViT25DYXJyaWVyKHJlZ2lzdHJ5LCBuZXcgSHViKCkpO1xuICB9XG5cbiAgLy8gUmV0dXJuIGh1YiB0aGF0IGxpdmVzIG9uIGEgZ2xvYmFsIG9iamVjdFxuICByZXR1cm4gZ2V0SHViRnJvbUNhcnJpZXIocmVnaXN0cnkpO1xufVxuXG4vKipcbiAqIEBwcml2YXRlIFByaXZhdGUgQVBJIHdpdGggbm8gc2VtdmVyIGd1YXJhbnRlZXMhXG4gKlxuICogSWYgdGhlIGNhcnJpZXIgZG9lcyBub3QgY29udGFpbiBhIGh1YiwgYSBuZXcgaHViIGlzIGNyZWF0ZWQgd2l0aCB0aGUgZ2xvYmFsIGh1YiBjbGllbnQgYW5kIHNjb3BlLlxuICovXG5mdW5jdGlvbiBlbnN1cmVIdWJPbkNhcnJpZXIoY2FycmllciwgcGFyZW50ID0gZ2V0R2xvYmFsSHViKCkpIHtcbiAgLy8gSWYgdGhlcmUncyBubyBodWIgb24gY3VycmVudCBkb21haW4sIG9yIGl0J3MgYW4gb2xkIEFQSSwgYXNzaWduIGEgbmV3IG9uZVxuICBpZiAoXG4gICAgIWhhc0h1Yk9uQ2FycmllcihjYXJyaWVyKSB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGdldEh1YkZyb21DYXJyaWVyKGNhcnJpZXIpLmlzT2xkZXJUaGFuKEFQSV9WRVJTSU9OKVxuICApIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBjb25zdCBjbGllbnQgPSBwYXJlbnQuZ2V0Q2xpZW50KCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgY29uc3Qgc2NvcGUgPSBwYXJlbnQuZ2V0U2NvcGUoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBjb25zdCBpc29sYXRpb25TY29wZSA9IHBhcmVudC5nZXRJc29sYXRpb25TY29wZSgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHNldEh1Yk9uQ2FycmllcihjYXJyaWVyLCBuZXcgSHViKGNsaWVudCwgc2NvcGUuY2xvbmUoKSwgaXNvbGF0aW9uU2NvcGUuY2xvbmUoKSkpO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGUgUHJpdmF0ZSBBUEkgd2l0aCBubyBzZW12ZXIgZ3VhcmFudGVlcyFcbiAqXG4gKiBTZXRzIHRoZSBnbG9iYWwgYXN5bmMgY29udGV4dCBzdHJhdGVneVxuICovXG5mdW5jdGlvbiBzZXRBc3luY0NvbnRleHRTdHJhdGVneShzdHJhdGVneSkge1xuICAvLyBHZXQgbWFpbiBjYXJyaWVyIChnbG9iYWwgZm9yIGV2ZXJ5IGVudmlyb25tZW50KVxuICBjb25zdCByZWdpc3RyeSA9IGdldE1haW5DYXJyaWVyKCk7XG4gIHJlZ2lzdHJ5Ll9fU0VOVFJZX18gPSByZWdpc3RyeS5fX1NFTlRSWV9fIHx8IHt9O1xuICByZWdpc3RyeS5fX1NFTlRSWV9fLmFjcyA9IHN0cmF0ZWd5O1xufVxuXG4vKipcbiAqIFJ1bnMgdGhlIHN1cHBsaWVkIGNhbGxiYWNrIGluIGl0cyBvd24gYXN5bmMgY29udGV4dC4gQXN5bmMgQ29udGV4dCBzdHJhdGVnaWVzIGFyZSBkZWZpbmVkIHBlciBTREsuXG4gKlxuICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBydW4gaW4gaXRzIG93biBhc3luYyBjb250ZXh0XG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3MgdG8gdGhlIGFzeW5jIGNvbnRleHQgc3RyYXRlZ3lcbiAqIEByZXR1cm5zIFRoZSByZXN1bHQgb2YgdGhlIGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIHJ1bldpdGhBc3luY0NvbnRleHQoY2FsbGJhY2ssIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCByZWdpc3RyeSA9IGdldE1haW5DYXJyaWVyKCk7XG5cbiAgaWYgKHJlZ2lzdHJ5Ll9fU0VOVFJZX18gJiYgcmVnaXN0cnkuX19TRU5UUllfXy5hY3MpIHtcbiAgICByZXR1cm4gcmVnaXN0cnkuX19TRU5UUllfXy5hY3MucnVuV2l0aEFzeW5jQ29udGV4dChjYWxsYmFjaywgb3B0aW9ucyk7XG4gIH1cblxuICAvLyBpZiB0aGVyZSB3YXMgbm8gc3RyYXRlZ3ksIGZhbGxiYWNrIHRvIGp1c3QgY2FsbGluZyB0aGUgY2FsbGJhY2tcbiAgcmV0dXJuIGNhbGxiYWNrKCk7XG59XG5cbi8qKlxuICogVGhpcyB3aWxsIHRlbGwgd2hldGhlciBhIGNhcnJpZXIgaGFzIGEgaHViIG9uIGl0IG9yIG5vdFxuICogQHBhcmFtIGNhcnJpZXIgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGhhc0h1Yk9uQ2FycmllcihjYXJyaWVyKSB7XG4gIHJldHVybiAhIShjYXJyaWVyICYmIGNhcnJpZXIuX19TRU5UUllfXyAmJiBjYXJyaWVyLl9fU0VOVFJZX18uaHViKTtcbn1cblxuLyoqXG4gKiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IHtAbGluayBIdWJ9IGFuZCBhZGQgdG8gdGhlIHBhc3NlZCBvYmplY3Qgb25cbiAqIF9fU0VOVFJZX18uaHViLlxuICogQHBhcmFtIGNhcnJpZXIgb2JqZWN0XG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGdldEh1YkZyb21DYXJyaWVyKGNhcnJpZXIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIHJldHVybiBnZXRHbG9iYWxTaW5nbGV0b24oJ2h1YicsICgpID0+IG5ldyBIdWIoKSwgY2Fycmllcik7XG59XG5cbi8qKlxuICogVGhpcyB3aWxsIHNldCBwYXNzZWQge0BsaW5rIEh1Yn0gb24gdGhlIHBhc3NlZCBvYmplY3QncyBfX1NFTlRSWV9fLmh1YiBhdHRyaWJ1dGVcbiAqIEBwYXJhbSBjYXJyaWVyIG9iamVjdFxuICogQHBhcmFtIGh1YiBIdWJcbiAqIEByZXR1cm5zIEEgYm9vbGVhbiBpbmRpY2F0aW5nIHN1Y2Nlc3Mgb3IgZmFpbHVyZVxuICovXG5mdW5jdGlvbiBzZXRIdWJPbkNhcnJpZXIoY2FycmllciwgaHViKSB7XG4gIGlmICghY2FycmllcikgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBfX1NFTlRSWV9fID0gKGNhcnJpZXIuX19TRU5UUllfXyA9IGNhcnJpZXIuX19TRU5UUllfXyB8fCB7fSk7XG4gIF9fU0VOVFJZX18uaHViID0gaHViO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgQVBJX1ZFUlNJT04sIEh1YiwgZW5zdXJlSHViT25DYXJyaWVyLCBnZXRDdXJyZW50SHViLCBnZXRIdWJGcm9tQ2FycmllciwgZ2V0SXNvbGF0aW9uU2NvcGUsIGdldE1haW5DYXJyaWVyLCBtYWtlTWFpbiwgcnVuV2l0aEFzeW5jQ29udGV4dCwgc2V0QXN5bmNDb250ZXh0U3RyYXRlZ3ksIHNldEh1Yk9uQ2FycmllciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHViLmpzLm1hcFxuIl0sIm5hbWVzIjpbImlzVGhlbmFibGUiLCJ1dWlkNCIsImRhdGVUaW1lc3RhbXBJblNlY29uZHMiLCJjb25zb2xlU2FuZGJveCIsImxvZ2dlciIsIkdMT0JBTF9PQkoiLCJnZXRHbG9iYWxTaW5nbGV0b24iLCJERUZBVUxUX0VOVklST05NRU5UIiwiREVCVUdfQlVJTEQiLCJTY29wZSIsImNsb3NlU2Vzc2lvbiIsIm1ha2VTZXNzaW9uIiwidXBkYXRlU2Vzc2lvbiIsIlNES19WRVJTSU9OIiwiQVBJX1ZFUlNJT04iLCJwYXJzZUZsb2F0IiwiREVGQVVMVF9CUkVBRENSVU1CUyIsIkh1YiIsImNvbnN0cnVjdG9yIiwiY2xpZW50Iiwic2NvcGUiLCJpc29sYXRpb25TY29wZSIsIl92ZXJzaW9uIiwiYXNzaWduZWRTY29wZSIsInNldENsaWVudCIsImFzc2lnbmVkSXNvbGF0aW9uU2NvcGUiLCJfc3RhY2siLCJiaW5kQ2xpZW50IiwiX2lzb2xhdGlvblNjb3BlIiwiaXNPbGRlclRoYW4iLCJ2ZXJzaW9uIiwidG9wIiwiZ2V0U3RhY2tUb3AiLCJzZXR1cEludGVncmF0aW9ucyIsInB1c2hTY29wZSIsImdldFNjb3BlIiwiY2xvbmUiLCJnZXRTdGFjayIsInB1c2giLCJnZXRDbGllbnQiLCJwb3BTY29wZSIsImxlbmd0aCIsInBvcCIsIndpdGhTY29wZSIsImNhbGxiYWNrIiwibWF5YmVQcm9taXNlUmVzdWx0IiwiZSIsInRoZW4iLCJyZXMiLCJnZXRJc29sYXRpb25TY29wZSIsImNhcHR1cmVFeGNlcHRpb24iLCJleGNlcHRpb24iLCJoaW50IiwiZXZlbnRJZCIsIl9sYXN0RXZlbnRJZCIsImV2ZW50X2lkIiwic3ludGhldGljRXhjZXB0aW9uIiwiRXJyb3IiLCJvcmlnaW5hbEV4Y2VwdGlvbiIsImNhcHR1cmVNZXNzYWdlIiwibWVzc2FnZSIsImxldmVsIiwiY2FwdHVyZUV2ZW50IiwiZXZlbnQiLCJ0eXBlIiwibGFzdEV2ZW50SWQiLCJhZGRCcmVhZGNydW1iIiwiYnJlYWRjcnVtYiIsImJlZm9yZUJyZWFkY3J1bWIiLCJtYXhCcmVhZGNydW1icyIsImdldE9wdGlvbnMiLCJ0aW1lc3RhbXAiLCJtZXJnZWRCcmVhZGNydW1iIiwiZmluYWxCcmVhZGNydW1iIiwiZW1pdCIsInNldFVzZXIiLCJ1c2VyIiwic2V0VGFncyIsInRhZ3MiLCJzZXRFeHRyYXMiLCJleHRyYXMiLCJzZXRUYWciLCJrZXkiLCJ2YWx1ZSIsInNldEV4dHJhIiwiZXh0cmEiLCJzZXRDb250ZXh0IiwibmFtZSIsImNvbnRleHQiLCJjb25maWd1cmVTY29wZSIsInJ1biIsIm9sZEh1YiIsIm1ha2VNYWluIiwiZ2V0SW50ZWdyYXRpb24iLCJpbnRlZ3JhdGlvbiIsIl9vTyIsIndhcm4iLCJpZCIsInN0YXJ0VHJhbnNhY3Rpb24iLCJjdXN0b21TYW1wbGluZ0NvbnRleHQiLCJyZXN1bHQiLCJfY2FsbEV4dGVuc2lvbk1ldGhvZCIsInRyYWNlSGVhZGVycyIsImNhcHR1cmVTZXNzaW9uIiwiZW5kU2Vzc2lvbiIsIl9zZW5kU2Vzc2lvblVwZGF0ZSIsImxheWVyIiwic2Vzc2lvbiIsImdldFNlc3Npb24iLCJzZXRTZXNzaW9uIiwic3RhcnRTZXNzaW9uIiwicmVsZWFzZSIsImVudmlyb25tZW50IiwidXNlckFnZW50IiwibmF2aWdhdG9yIiwiZ2V0VXNlciIsImN1cnJlbnRTZXNzaW9uIiwic3RhdHVzIiwic2hvdWxkU2VuZERlZmF1bHRQaWkiLCJvcHRpb25zIiwiQm9vbGVhbiIsInNlbmREZWZhdWx0UGlpIiwibWV0aG9kIiwiYXJncyIsImNhcnJpZXIiLCJnZXRNYWluQ2FycmllciIsInNlbnRyeSIsIl9fU0VOVFJZX18iLCJleHRlbnNpb25zIiwiYXBwbHkiLCJodWIiLCJ1bmRlZmluZWQiLCJyZWdpc3RyeSIsImdldEh1YkZyb21DYXJyaWVyIiwic2V0SHViT25DYXJyaWVyIiwiZ2V0Q3VycmVudEh1YiIsImFjcyIsImdldEdsb2JhbEh1YiIsImhhc0h1Yk9uQ2FycmllciIsImVuc3VyZUh1Yk9uQ2FycmllciIsInBhcmVudCIsInNldEFzeW5jQ29udGV4dFN0cmF0ZWd5Iiwic3RyYXRlZ3kiLCJydW5XaXRoQXN5bmNDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/hub.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/scope.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/core/esm/scope.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Scope: () => (/* binding */ Scope),\n/* harmony export */   getGlobalScope: () => (/* binding */ getGlobalScope),\n/* harmony export */   setGlobalScope: () => (/* binding */ setGlobalScope)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _eventProcessors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./eventProcessors.js */ \"(ssr)/./node_modules/@sentry/core/esm/eventProcessors.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./session.js */ \"(ssr)/./node_modules/@sentry/core/esm/session.js\");\n/* harmony import */ var _utils_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/applyScopeDataToEvent.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/applyScopeDataToEvent.js\");\n\n\n\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */ const DEFAULT_MAX_BREADCRUMBS = 100;\n/**\n * The global scope is kept in this module.\n * When accessing this via `getGlobalScope()` we'll make sure to set one if none is currently present.\n */ let globalScope;\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */ class Scope {\n    /** Flag if notifying is happening. */ /** Callback for client to receive scope changes. */ /** Callback list that will be called after {@link applyToEvent}. */ /** Array of breadcrumbs. */ /** User */ /** Tags */ /** Extra */ /** Contexts */ /** Attachments */ /** Propagation Context for distributed tracing */ /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */ /** Fingerprint */ /** Severity */ // eslint-disable-next-line deprecation/deprecation\n    /**\n   * Transaction Name\n   */ /** Span */ /** Session */ /** Request Mode Session Status */ /** The client on this scope */ // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n    constructor(){\n        this._notifyingListeners = false;\n        this._scopeListeners = [];\n        this._eventProcessors = [];\n        this._breadcrumbs = [];\n        this._attachments = [];\n        this._user = {};\n        this._tags = {};\n        this._extra = {};\n        this._contexts = {};\n        this._sdkProcessingMetadata = {};\n        this._propagationContext = generatePropagationContext();\n    }\n    /**\n   * Inherit values from the parent scope.\n   * @deprecated Use `scope.clone()` and `new Scope()` instead.\n   */ static clone(scope) {\n        return scope ? scope.clone() : new Scope();\n    }\n    /**\n   * Clone this scope instance.\n   */ clone() {\n        const newScope = new Scope();\n        newScope._breadcrumbs = [\n            ...this._breadcrumbs\n        ];\n        newScope._tags = {\n            ...this._tags\n        };\n        newScope._extra = {\n            ...this._extra\n        };\n        newScope._contexts = {\n            ...this._contexts\n        };\n        newScope._user = this._user;\n        newScope._level = this._level;\n        newScope._span = this._span;\n        newScope._session = this._session;\n        newScope._transactionName = this._transactionName;\n        newScope._fingerprint = this._fingerprint;\n        newScope._eventProcessors = [\n            ...this._eventProcessors\n        ];\n        newScope._requestSession = this._requestSession;\n        newScope._attachments = [\n            ...this._attachments\n        ];\n        newScope._sdkProcessingMetadata = {\n            ...this._sdkProcessingMetadata\n        };\n        newScope._propagationContext = {\n            ...this._propagationContext\n        };\n        newScope._client = this._client;\n        return newScope;\n    }\n    /** Update the client on the scope. */ setClient(client) {\n        this._client = client;\n    }\n    /**\n   * Get the client assigned to this scope.\n   *\n   * It is generally recommended to use the global function `Sentry.getClient()` instead, unless you know what you are doing.\n   */ getClient() {\n        return this._client;\n    }\n    /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */ addScopeListener(callback) {\n        this._scopeListeners.push(callback);\n    }\n    /**\n   * @inheritDoc\n   */ addEventProcessor(callback) {\n        this._eventProcessors.push(callback);\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setUser(user) {\n        // If null is passed we want to unset everything, but still define keys,\n        // so that later down in the pipeline any existing values are cleared.\n        this._user = user || {\n            email: undefined,\n            id: undefined,\n            ip_address: undefined,\n            segment: undefined,\n            username: undefined\n        };\n        if (this._session) {\n            (0,_session_js__WEBPACK_IMPORTED_MODULE_0__.updateSession)(this._session, {\n                user\n            });\n        }\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getUser() {\n        return this._user;\n    }\n    /**\n   * @inheritDoc\n   */ getRequestSession() {\n        return this._requestSession;\n    }\n    /**\n   * @inheritDoc\n   */ setRequestSession(requestSession) {\n        this._requestSession = requestSession;\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setTags(tags) {\n        this._tags = {\n            ...this._tags,\n            ...tags\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setTag(key, value) {\n        this._tags = {\n            ...this._tags,\n            [key]: value\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setExtras(extras) {\n        this._extra = {\n            ...this._extra,\n            ...extras\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setExtra(key, extra) {\n        this._extra = {\n            ...this._extra,\n            [key]: extra\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setFingerprint(fingerprint) {\n        this._fingerprint = fingerprint;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setLevel(// eslint-disable-next-line deprecation/deprecation\n    level) {\n        this._level = level;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * Sets the transaction name on the scope for future events.\n   * @deprecated Use extra or tags instead.\n   */ setTransactionName(name) {\n        this._transactionName = name;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setContext(key, context) {\n        if (context === null) {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete this._contexts[key];\n        } else {\n            this._contexts[key] = context;\n        }\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * Sets the Span on the scope.\n   * @param span Span\n   * @deprecated Instead of setting a span on a scope, use `startSpan()`/`startSpanManual()` instead.\n   */ setSpan(span) {\n        this._span = span;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * Returns the `Span` if there is one.\n   * @deprecated Use `getActiveSpan()` instead.\n   */ getSpan() {\n        return this._span;\n    }\n    /**\n   * Returns the `Transaction` attached to the scope (if there is one).\n   * @deprecated You should not rely on the transaction, but just use `startSpan()` APIs instead.\n   */ getTransaction() {\n        // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n        // have a pointer to the currently-active transaction.\n        const span = this._span;\n        // Cannot replace with getRootSpan because getRootSpan returns a span, not a transaction\n        // Also, this method will be removed anyway.\n        // eslint-disable-next-line deprecation/deprecation\n        return span && span.transaction;\n    }\n    /**\n   * @inheritDoc\n   */ setSession(session) {\n        if (!session) {\n            delete this._session;\n        } else {\n            this._session = session;\n        }\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getSession() {\n        return this._session;\n    }\n    /**\n   * @inheritDoc\n   */ update(captureContext) {\n        if (!captureContext) {\n            return this;\n        }\n        const scopeToMerge = typeof captureContext === \"function\" ? captureContext(this) : captureContext;\n        if (scopeToMerge instanceof Scope) {\n            const scopeData = scopeToMerge.getScopeData();\n            this._tags = {\n                ...this._tags,\n                ...scopeData.tags\n            };\n            this._extra = {\n                ...this._extra,\n                ...scopeData.extra\n            };\n            this._contexts = {\n                ...this._contexts,\n                ...scopeData.contexts\n            };\n            if (scopeData.user && Object.keys(scopeData.user).length) {\n                this._user = scopeData.user;\n            }\n            if (scopeData.level) {\n                this._level = scopeData.level;\n            }\n            if (scopeData.fingerprint.length) {\n                this._fingerprint = scopeData.fingerprint;\n            }\n            if (scopeToMerge.getRequestSession()) {\n                this._requestSession = scopeToMerge.getRequestSession();\n            }\n            if (scopeData.propagationContext) {\n                this._propagationContext = scopeData.propagationContext;\n            }\n        } else if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(scopeToMerge)) {\n            const scopeContext = captureContext;\n            this._tags = {\n                ...this._tags,\n                ...scopeContext.tags\n            };\n            this._extra = {\n                ...this._extra,\n                ...scopeContext.extra\n            };\n            this._contexts = {\n                ...this._contexts,\n                ...scopeContext.contexts\n            };\n            if (scopeContext.user) {\n                this._user = scopeContext.user;\n            }\n            if (scopeContext.level) {\n                this._level = scopeContext.level;\n            }\n            if (scopeContext.fingerprint) {\n                this._fingerprint = scopeContext.fingerprint;\n            }\n            if (scopeContext.requestSession) {\n                this._requestSession = scopeContext.requestSession;\n            }\n            if (scopeContext.propagationContext) {\n                this._propagationContext = scopeContext.propagationContext;\n            }\n        }\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ clear() {\n        this._breadcrumbs = [];\n        this._tags = {};\n        this._extra = {};\n        this._user = {};\n        this._contexts = {};\n        this._level = undefined;\n        this._transactionName = undefined;\n        this._fingerprint = undefined;\n        this._requestSession = undefined;\n        this._span = undefined;\n        this._session = undefined;\n        this._notifyScopeListeners();\n        this._attachments = [];\n        this._propagationContext = generatePropagationContext();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n        const maxCrumbs = typeof maxBreadcrumbs === \"number\" ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n        // No data has been changed, so don't notify scope listeners\n        if (maxCrumbs <= 0) {\n            return this;\n        }\n        const mergedBreadcrumb = {\n            timestamp: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.dateTimestampInSeconds)(),\n            ...breadcrumb\n        };\n        const breadcrumbs = this._breadcrumbs;\n        breadcrumbs.push(mergedBreadcrumb);\n        this._breadcrumbs = breadcrumbs.length > maxCrumbs ? breadcrumbs.slice(-maxCrumbs) : breadcrumbs;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getLastBreadcrumb() {\n        return this._breadcrumbs[this._breadcrumbs.length - 1];\n    }\n    /**\n   * @inheritDoc\n   */ clearBreadcrumbs() {\n        this._breadcrumbs = [];\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ addAttachment(attachment) {\n        this._attachments.push(attachment);\n        return this;\n    }\n    /**\n   * @inheritDoc\n   * @deprecated Use `getScopeData()` instead.\n   */ getAttachments() {\n        const data = this.getScopeData();\n        return data.attachments;\n    }\n    /**\n   * @inheritDoc\n   */ clearAttachments() {\n        this._attachments = [];\n        return this;\n    }\n    /** @inheritDoc */ getScopeData() {\n        const { _breadcrumbs, _attachments, _contexts, _tags, _extra, _user, _level, _fingerprint, _eventProcessors, _propagationContext, _sdkProcessingMetadata, _transactionName, _span } = this;\n        return {\n            breadcrumbs: _breadcrumbs,\n            attachments: _attachments,\n            contexts: _contexts,\n            tags: _tags,\n            extra: _extra,\n            user: _user,\n            level: _level,\n            fingerprint: _fingerprint || [],\n            eventProcessors: _eventProcessors,\n            propagationContext: _propagationContext,\n            sdkProcessingMetadata: _sdkProcessingMetadata,\n            transactionName: _transactionName,\n            span: _span\n        };\n    }\n    /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   * @deprecated Use `applyScopeDataToEvent()` directly\n   */ applyToEvent(event, hint = {}, additionalEventProcessors = []) {\n        (0,_utils_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__.applyScopeDataToEvent)(event, this.getScopeData());\n        // TODO (v8): Update this order to be: Global > Client > Scope\n        const eventProcessors = [\n            ...additionalEventProcessors,\n            // eslint-disable-next-line deprecation/deprecation\n            ...(0,_eventProcessors_js__WEBPACK_IMPORTED_MODULE_4__.getGlobalEventProcessors)(),\n            ...this._eventProcessors\n        ];\n        return (0,_eventProcessors_js__WEBPACK_IMPORTED_MODULE_4__.notifyEventProcessors)(eventProcessors, event, hint);\n    }\n    /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */ setSDKProcessingMetadata(newData) {\n        this._sdkProcessingMetadata = {\n            ...this._sdkProcessingMetadata,\n            ...newData\n        };\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setPropagationContext(context) {\n        this._propagationContext = context;\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getPropagationContext() {\n        return this._propagationContext;\n    }\n    /**\n   * Capture an exception for this scope.\n   *\n   * @param exception The exception to capture.\n   * @param hint Optinal additional data to attach to the Sentry event.\n   * @returns the id of the captured Sentry event.\n   */ captureException(exception, hint) {\n        const eventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.uuid4)();\n        if (!this._client) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.logger.warn(\"No client configured on scope - will not capture exception!\");\n            return eventId;\n        }\n        const syntheticException = new Error(\"Sentry syntheticException\");\n        this._client.captureException(exception, {\n            originalException: exception,\n            syntheticException,\n            ...hint,\n            event_id: eventId\n        }, this);\n        return eventId;\n    }\n    /**\n   * Capture a message for this scope.\n   *\n   * @param message The message to capture.\n   * @param level An optional severity level to report the message with.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured message.\n   */ captureMessage(message, level, hint) {\n        const eventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.uuid4)();\n        if (!this._client) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.logger.warn(\"No client configured on scope - will not capture message!\");\n            return eventId;\n        }\n        const syntheticException = new Error(message);\n        this._client.captureMessage(message, level, {\n            originalException: message,\n            syntheticException,\n            ...hint,\n            event_id: eventId\n        }, this);\n        return eventId;\n    }\n    /**\n   * Captures a manually created event for this scope and sends it to Sentry.\n   *\n   * @param exception The event to capture.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured event.\n   */ captureEvent(event, hint) {\n        const eventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.uuid4)();\n        if (!this._client) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.logger.warn(\"No client configured on scope - will not capture event!\");\n            return eventId;\n        }\n        this._client.captureEvent(event, {\n            ...hint,\n            event_id: eventId\n        }, this);\n        return eventId;\n    }\n    /**\n   * This will be called on every set call.\n   */ _notifyScopeListeners() {\n        // We need this check for this._notifyingListeners to be able to work on scope during updates\n        // If this check is not here we'll produce endless recursion when something is done with the scope\n        // during the callback.\n        if (!this._notifyingListeners) {\n            this._notifyingListeners = true;\n            this._scopeListeners.forEach((callback)=>{\n                callback(this);\n            });\n            this._notifyingListeners = false;\n        }\n    }\n}\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */ function getGlobalScope() {\n    if (!globalScope) {\n        globalScope = new Scope();\n    }\n    return globalScope;\n}\n/**\n * This is mainly needed for tests.\n * DO NOT USE this, as this is an internal API and subject to change.\n * @hidden\n */ function setGlobalScope(scope) {\n    globalScope = scope;\n}\nfunction generatePropagationContext() {\n    return {\n        traceId: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.uuid4)(),\n        spanId: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.uuid4)().substring(16)\n    };\n}\n //# sourceMappingURL=scope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/scope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/session.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/esm/session.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeSession: () => (/* binding */ closeSession),\n/* harmony export */   makeSession: () => (/* binding */ makeSession),\n/* harmony export */   updateSession: () => (/* binding */ updateSession)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/object.js\");\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */ function makeSession(context) {\n    // Both timestamp and started are in seconds since the UNIX epoch.\n    const startingTime = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.timestampInSeconds)();\n    const session = {\n        sid: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.uuid4)(),\n        init: true,\n        timestamp: startingTime,\n        started: startingTime,\n        duration: 0,\n        status: \"ok\",\n        errors: 0,\n        ignoreDuration: false,\n        toJSON: ()=>sessionToJSON(session)\n    };\n    if (context) {\n        updateSession(session, context);\n    }\n    return session;\n}\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */ // eslint-disable-next-line complexity\nfunction updateSession(session, context = {}) {\n    if (context.user) {\n        if (!session.ipAddress && context.user.ip_address) {\n            session.ipAddress = context.user.ip_address;\n        }\n        if (!session.did && !context.did) {\n            session.did = context.user.id || context.user.email || context.user.username;\n        }\n    }\n    session.timestamp = context.timestamp || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.timestampInSeconds)();\n    if (context.abnormal_mechanism) {\n        session.abnormal_mechanism = context.abnormal_mechanism;\n    }\n    if (context.ignoreDuration) {\n        session.ignoreDuration = context.ignoreDuration;\n    }\n    if (context.sid) {\n        // Good enough uuid validation. — Kamil\n        session.sid = context.sid.length === 32 ? context.sid : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.uuid4)();\n    }\n    if (context.init !== undefined) {\n        session.init = context.init;\n    }\n    if (!session.did && context.did) {\n        session.did = `${context.did}`;\n    }\n    if (typeof context.started === \"number\") {\n        session.started = context.started;\n    }\n    if (session.ignoreDuration) {\n        session.duration = undefined;\n    } else if (typeof context.duration === \"number\") {\n        session.duration = context.duration;\n    } else {\n        const duration = session.timestamp - session.started;\n        session.duration = duration >= 0 ? duration : 0;\n    }\n    if (context.release) {\n        session.release = context.release;\n    }\n    if (context.environment) {\n        session.environment = context.environment;\n    }\n    if (!session.ipAddress && context.ipAddress) {\n        session.ipAddress = context.ipAddress;\n    }\n    if (!session.userAgent && context.userAgent) {\n        session.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === \"number\") {\n        session.errors = context.errors;\n    }\n    if (context.status) {\n        session.status = context.status;\n    }\n}\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */ function closeSession(session, status) {\n    let context = {};\n    if (status) {\n        context = {\n            status\n        };\n    } else if (session.status === \"ok\") {\n        context = {\n            status: \"exited\"\n        };\n    }\n    updateSession(session, context);\n}\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */ function sessionToJSON(session) {\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.dropUndefinedKeys)({\n        sid: `${session.sid}`,\n        init: session.init,\n        // Make sure that sec is converted to ms for date constructor\n        started: new Date(session.started * 1000).toISOString(),\n        timestamp: new Date(session.timestamp * 1000).toISOString(),\n        status: session.status,\n        errors: session.errors,\n        did: typeof session.did === \"number\" || typeof session.did === \"string\" ? `${session.did}` : undefined,\n        duration: session.duration,\n        abnormal_mechanism: session.abnormal_mechanism,\n        attrs: {\n            release: session.release,\n            environment: session.environment,\n            ip_address: session.ipAddress,\n            user_agent: session.userAgent\n        }\n    });\n}\n //# sourceMappingURL=session.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/session.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDynamicSamplingContextFromClient: () => (/* binding */ getDynamicSamplingContextFromClient),\n/* harmony export */   getDynamicSamplingContextFromSpan: () => (/* binding */ getDynamicSamplingContextFromSpan)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@sentry/core/esm/constants.js\");\n/* harmony import */ var _exports_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../exports.js */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _utils_getRootSpan_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getRootSpan.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/getRootSpan.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/spanUtils.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/spanUtils.js\");\n\n\n\n\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */ function getDynamicSamplingContextFromClient(trace_id, client, scope) {\n    const options = client.getOptions();\n    const { publicKey: public_key } = client.getDsn() || {};\n    // TODO(v8): Remove segment from User\n    // eslint-disable-next-line deprecation/deprecation\n    const { segment: user_segment } = scope && scope.getUser() || {};\n    const dsc = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)({\n        environment: options.environment || _constants_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_ENVIRONMENT,\n        release: options.release,\n        user_segment,\n        public_key,\n        trace_id\n    });\n    client.emit && client.emit(\"createDsc\", dsc);\n    return dsc;\n}\n/**\n * A Span with a frozen dynamic sampling context.\n */ /**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */ function getDynamicSamplingContextFromSpan(span) {\n    const client = (0,_exports_js__WEBPACK_IMPORTED_MODULE_2__.getClient)();\n    if (!client) {\n        return {};\n    }\n    // passing emit=false here to only emit later once the DSC is actually populated\n    const dsc = getDynamicSamplingContextFromClient((0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanToJSON)(span).trace_id || \"\", client, (0,_exports_js__WEBPACK_IMPORTED_MODULE_2__.getCurrentScope)());\n    // TODO (v8): Remove v7FrozenDsc as a Transaction will no longer have _frozenDynamicSamplingContext\n    const txn = (0,_utils_getRootSpan_js__WEBPACK_IMPORTED_MODULE_4__.getRootSpan)(span);\n    if (!txn) {\n        return dsc;\n    }\n    // TODO (v8): Remove v7FrozenDsc as a Transaction will no longer have _frozenDynamicSamplingContext\n    // For now we need to avoid breaking users who directly created a txn with a DSC, where this field is still set.\n    // @see Transaction class constructor\n    const v7FrozenDsc = txn && txn._frozenDynamicSamplingContext;\n    if (v7FrozenDsc) {\n        return v7FrozenDsc;\n    }\n    // TODO (v8): Replace txn.metadata with txn.attributes[]\n    // We can't do this yet because attributes aren't always set yet.\n    // eslint-disable-next-line deprecation/deprecation\n    const { sampleRate: maybeSampleRate, source } = txn.metadata;\n    if (maybeSampleRate != null) {\n        dsc.sample_rate = `${maybeSampleRate}`;\n    }\n    // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n    const jsonSpan = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanToJSON)(txn);\n    // after JSON conversion, txn.name becomes jsonSpan.description\n    if (source && source !== \"url\") {\n        dsc.transaction = jsonSpan.description;\n    }\n    dsc.sampled = String((0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanIsSampled)(txn));\n    client.emit && client.emit(\"createDsc\", dsc);\n    return dsc;\n}\n //# sourceMappingURL=dynamicSamplingContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFjaW5nL2R5bmFtaWNTYW1wbGluZ0NvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFrRDtBQUNJO0FBQ0s7QUFDTDtBQUNZO0FBRWxFOzs7O0NBSUMsR0FDRCxTQUFTTyxvQ0FDUEMsUUFBUSxFQUNSQyxNQUFNLEVBQ05DLEtBQUs7SUFFTCxNQUFNQyxVQUFVRixPQUFPRyxVQUFVO0lBRWpDLE1BQU0sRUFBRUMsV0FBV0MsVUFBVSxFQUFFLEdBQUdMLE9BQU9NLE1BQU0sTUFBTSxDQUFDO0lBQ3RELHFDQUFxQztJQUNyQyxtREFBbUQ7SUFDbkQsTUFBTSxFQUFFQyxTQUFTQyxZQUFZLEVBQUUsR0FBRyxTQUFVUCxNQUFNUSxPQUFPLE1BQU8sQ0FBQztJQUVqRSxNQUFNQyxNQUFNbkIsZ0VBQWlCQSxDQUFDO1FBQzVCb0IsYUFBYVQsUUFBUVMsV0FBVyxJQUFJbkIsOERBQW1CQTtRQUN2RG9CLFNBQVNWLFFBQVFVLE9BQU87UUFDeEJKO1FBQ0FIO1FBQ0FOO0lBQ0Y7SUFFQUMsT0FBT2EsSUFBSSxJQUFJYixPQUFPYSxJQUFJLENBQUMsYUFBYUg7SUFFeEMsT0FBT0E7QUFDVDtBQUVBOztDQUVDLEdBRUQ7Ozs7OztDQU1DLEdBQ0QsU0FBU0ksa0NBQWtDQyxJQUFJO0lBQzdDLE1BQU1mLFNBQVNQLHNEQUFTQTtJQUN4QixJQUFJLENBQUNPLFFBQVE7UUFDWCxPQUFPLENBQUM7SUFDVjtJQUVBLGdGQUFnRjtJQUNoRixNQUFNVSxNQUFNWixvQ0FBb0NGLCtEQUFVQSxDQUFDbUIsTUFBTWhCLFFBQVEsSUFBSSxJQUFJQyxRQUFRTiw0REFBZUE7SUFFeEcsbUdBQW1HO0lBQ25HLE1BQU1zQixNQUFNckIsa0VBQVdBLENBQUNvQjtJQUN4QixJQUFJLENBQUNDLEtBQUs7UUFDUixPQUFPTjtJQUNUO0lBRUEsbUdBQW1HO0lBQ25HLGdIQUFnSDtJQUNoSCxxQ0FBcUM7SUFDckMsTUFBTU8sY0FBY0QsT0FBT0EsSUFBSUUsNkJBQTZCO0lBQzVELElBQUlELGFBQWE7UUFDZixPQUFPQTtJQUNUO0lBRUEsd0RBQXdEO0lBQ3hELGlFQUFpRTtJQUNqRSxtREFBbUQ7SUFDbkQsTUFBTSxFQUFFRSxZQUFZQyxlQUFlLEVBQUVDLE1BQU0sRUFBRSxHQUFHTCxJQUFJTSxRQUFRO0lBQzVELElBQUlGLG1CQUFtQixNQUFNO1FBQzNCVixJQUFJYSxXQUFXLEdBQUcsQ0FBQyxFQUFFSCxnQkFBZ0IsQ0FBQztJQUN4QztJQUVBLDRHQUE0RztJQUM1RyxNQUFNSSxXQUFXNUIsK0RBQVVBLENBQUNvQjtJQUU1QiwrREFBK0Q7SUFDL0QsSUFBSUssVUFBVUEsV0FBVyxPQUFPO1FBQzlCWCxJQUFJZSxXQUFXLEdBQUdELFNBQVNFLFdBQVc7SUFDeEM7SUFFQWhCLElBQUlpQixPQUFPLEdBQUdDLE9BQU8vQixrRUFBYUEsQ0FBQ21CO0lBRW5DaEIsT0FBT2EsSUFBSSxJQUFJYixPQUFPYSxJQUFJLENBQUMsYUFBYUg7SUFFeEMsT0FBT0E7QUFDVDtBQUVrRixDQUNsRixrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnJhbGluay13ZWIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFjaW5nL2R5bmFtaWNTYW1wbGluZ0NvbnRleHQuanM/YjdmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkcm9wVW5kZWZpbmVkS2V5cyB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgREVGQVVMVF9FTlZJUk9OTUVOVCB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBnZXRDbGllbnQsIGdldEN1cnJlbnRTY29wZSB9IGZyb20gJy4uL2V4cG9ydHMuanMnO1xuaW1wb3J0IHsgZ2V0Um9vdFNwYW4gfSBmcm9tICcuLi91dGlscy9nZXRSb290U3Bhbi5qcyc7XG5pbXBvcnQgeyBzcGFuVG9KU09OLCBzcGFuSXNTYW1wbGVkIH0gZnJvbSAnLi4vdXRpbHMvc3BhblV0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZHluYW1pYyBzYW1wbGluZyBjb250ZXh0IGZyb20gYSBjbGllbnQuXG4gKlxuICogRGlzcGF0Y2hlcyB0aGUgYGNyZWF0ZURzY2AgbGlmZWN5Y2xlIGhvb2sgYXMgYSBzaWRlIGVmZmVjdC5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21DbGllbnQoXG4gIHRyYWNlX2lkLFxuICBjbGllbnQsXG4gIHNjb3BlLFxuKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuXG4gIGNvbnN0IHsgcHVibGljS2V5OiBwdWJsaWNfa2V5IH0gPSBjbGllbnQuZ2V0RHNuKCkgfHwge307XG4gIC8vIFRPRE8odjgpOiBSZW1vdmUgc2VnbWVudCBmcm9tIFVzZXJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGNvbnN0IHsgc2VnbWVudDogdXNlcl9zZWdtZW50IH0gPSAoc2NvcGUgJiYgc2NvcGUuZ2V0VXNlcigpKSB8fCB7fTtcblxuICBjb25zdCBkc2MgPSBkcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgZW52aXJvbm1lbnQ6IG9wdGlvbnMuZW52aXJvbm1lbnQgfHwgREVGQVVMVF9FTlZJUk9OTUVOVCxcbiAgICByZWxlYXNlOiBvcHRpb25zLnJlbGVhc2UsXG4gICAgdXNlcl9zZWdtZW50LFxuICAgIHB1YmxpY19rZXksXG4gICAgdHJhY2VfaWQsXG4gIH0pIDtcblxuICBjbGllbnQuZW1pdCAmJiBjbGllbnQuZW1pdCgnY3JlYXRlRHNjJywgZHNjKTtcblxuICByZXR1cm4gZHNjO1xufVxuXG4vKipcbiAqIEEgU3BhbiB3aXRoIGEgZnJvemVuIGR5bmFtaWMgc2FtcGxpbmcgY29udGV4dC5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkeW5hbWljIHNhbXBsaW5nIGNvbnRleHQgZnJvbSBhIHNwYW4gKGFuZCBjbGllbnQgYW5kIHNjb3BlKVxuICpcbiAqIEBwYXJhbSBzcGFuIHRoZSBzcGFuIGZyb20gd2hpY2ggYSBmZXcgdmFsdWVzIGxpa2UgdGhlIHJvb3Qgc3BhbiBuYW1lIGFuZCBzYW1wbGUgcmF0ZSBhcmUgZXh0cmFjdGVkLlxuICpcbiAqIEByZXR1cm5zIGEgZHluYW1pYyBzYW1wbGluZyBjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbihzcGFuKSB7XG4gIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICBpZiAoIWNsaWVudCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIC8vIHBhc3NpbmcgZW1pdD1mYWxzZSBoZXJlIHRvIG9ubHkgZW1pdCBsYXRlciBvbmNlIHRoZSBEU0MgaXMgYWN0dWFsbHkgcG9wdWxhdGVkXG4gIGNvbnN0IGRzYyA9IGdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tQ2xpZW50KHNwYW5Ub0pTT04oc3BhbikudHJhY2VfaWQgfHwgJycsIGNsaWVudCwgZ2V0Q3VycmVudFNjb3BlKCkpO1xuXG4gIC8vIFRPRE8gKHY4KTogUmVtb3ZlIHY3RnJvemVuRHNjIGFzIGEgVHJhbnNhY3Rpb24gd2lsbCBubyBsb25nZXIgaGF2ZSBfZnJvemVuRHluYW1pY1NhbXBsaW5nQ29udGV4dFxuICBjb25zdCB0eG4gPSBnZXRSb290U3BhbihzcGFuKSA7XG4gIGlmICghdHhuKSB7XG4gICAgcmV0dXJuIGRzYztcbiAgfVxuXG4gIC8vIFRPRE8gKHY4KTogUmVtb3ZlIHY3RnJvemVuRHNjIGFzIGEgVHJhbnNhY3Rpb24gd2lsbCBubyBsb25nZXIgaGF2ZSBfZnJvemVuRHluYW1pY1NhbXBsaW5nQ29udGV4dFxuICAvLyBGb3Igbm93IHdlIG5lZWQgdG8gYXZvaWQgYnJlYWtpbmcgdXNlcnMgd2hvIGRpcmVjdGx5IGNyZWF0ZWQgYSB0eG4gd2l0aCBhIERTQywgd2hlcmUgdGhpcyBmaWVsZCBpcyBzdGlsbCBzZXQuXG4gIC8vIEBzZWUgVHJhbnNhY3Rpb24gY2xhc3MgY29uc3RydWN0b3JcbiAgY29uc3QgdjdGcm96ZW5Ec2MgPSB0eG4gJiYgdHhuLl9mcm96ZW5EeW5hbWljU2FtcGxpbmdDb250ZXh0O1xuICBpZiAodjdGcm96ZW5Ec2MpIHtcbiAgICByZXR1cm4gdjdGcm96ZW5Ec2M7XG4gIH1cblxuICAvLyBUT0RPICh2OCk6IFJlcGxhY2UgdHhuLm1ldGFkYXRhIHdpdGggdHhuLmF0dHJpYnV0ZXNbXVxuICAvLyBXZSBjYW4ndCBkbyB0aGlzIHlldCBiZWNhdXNlIGF0dHJpYnV0ZXMgYXJlbid0IGFsd2F5cyBzZXQgeWV0LlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgY29uc3QgeyBzYW1wbGVSYXRlOiBtYXliZVNhbXBsZVJhdGUsIHNvdXJjZSB9ID0gdHhuLm1ldGFkYXRhO1xuICBpZiAobWF5YmVTYW1wbGVSYXRlICE9IG51bGwpIHtcbiAgICBkc2Muc2FtcGxlX3JhdGUgPSBgJHttYXliZVNhbXBsZVJhdGV9YDtcbiAgfVxuXG4gIC8vIFdlIGRvbid0IHdhbnQgdG8gaGF2ZSBhIHRyYW5zYWN0aW9uIG5hbWUgaW4gdGhlIERTQyBpZiB0aGUgc291cmNlIGlzIFwidXJsXCIgYmVjYXVzZSBVUkxzIG1pZ2h0IGNvbnRhaW4gUElJXG4gIGNvbnN0IGpzb25TcGFuID0gc3BhblRvSlNPTih0eG4pO1xuXG4gIC8vIGFmdGVyIEpTT04gY29udmVyc2lvbiwgdHhuLm5hbWUgYmVjb21lcyBqc29uU3Bhbi5kZXNjcmlwdGlvblxuICBpZiAoc291cmNlICYmIHNvdXJjZSAhPT0gJ3VybCcpIHtcbiAgICBkc2MudHJhbnNhY3Rpb24gPSBqc29uU3Bhbi5kZXNjcmlwdGlvbjtcbiAgfVxuXG4gIGRzYy5zYW1wbGVkID0gU3RyaW5nKHNwYW5Jc1NhbXBsZWQodHhuKSk7XG5cbiAgY2xpZW50LmVtaXQgJiYgY2xpZW50LmVtaXQoJ2NyZWF0ZURzYycsIGRzYyk7XG5cbiAgcmV0dXJuIGRzYztcbn1cblxuZXhwb3J0IHsgZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21DbGllbnQsIGdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHluYW1pY1NhbXBsaW5nQ29udGV4dC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJkcm9wVW5kZWZpbmVkS2V5cyIsIkRFRkFVTFRfRU5WSVJPTk1FTlQiLCJnZXRDbGllbnQiLCJnZXRDdXJyZW50U2NvcGUiLCJnZXRSb290U3BhbiIsInNwYW5Ub0pTT04iLCJzcGFuSXNTYW1wbGVkIiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21DbGllbnQiLCJ0cmFjZV9pZCIsImNsaWVudCIsInNjb3BlIiwib3B0aW9ucyIsImdldE9wdGlvbnMiLCJwdWJsaWNLZXkiLCJwdWJsaWNfa2V5IiwiZ2V0RHNuIiwic2VnbWVudCIsInVzZXJfc2VnbWVudCIsImdldFVzZXIiLCJkc2MiLCJlbnZpcm9ubWVudCIsInJlbGVhc2UiLCJlbWl0IiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuIiwic3BhbiIsInR4biIsInY3RnJvemVuRHNjIiwiX2Zyb3plbkR5bmFtaWNTYW1wbGluZ0NvbnRleHQiLCJzYW1wbGVSYXRlIiwibWF5YmVTYW1wbGVSYXRlIiwic291cmNlIiwibWV0YWRhdGEiLCJzYW1wbGVfcmF0ZSIsImpzb25TcGFuIiwidHJhbnNhY3Rpb24iLCJkZXNjcmlwdGlvbiIsInNhbXBsZWQiLCJTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/utils/applyScopeDataToEvent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/utils/applyScopeDataToEvent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyScopeDataToEvent: () => (/* binding */ applyScopeDataToEvent),\n/* harmony export */   mergeAndOverwriteScopeData: () => (/* binding */ mergeAndOverwriteScopeData),\n/* harmony export */   mergeScopeData: () => (/* binding */ mergeScopeData)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tracing/dynamicSamplingContext.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _getRootSpan_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getRootSpan.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/getRootSpan.js\");\n/* harmony import */ var _spanUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./spanUtils.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/spanUtils.js\");\n\n\n\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */ function applyScopeDataToEvent(event, data) {\n    const { fingerprint, span, breadcrumbs, sdkProcessingMetadata } = data;\n    // Apply general data\n    applyDataToEvent(event, data);\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (span) {\n        applySpanToEvent(event, span);\n    }\n    applyFingerprintToEvent(event, fingerprint);\n    applyBreadcrumbsToEvent(event, breadcrumbs);\n    applySdkMetadataToEvent(event, sdkProcessingMetadata);\n}\n/** Merge data of two scopes together. */ function mergeScopeData(data, mergeData) {\n    const { extra, tags, user, contexts, level, sdkProcessingMetadata, breadcrumbs, fingerprint, eventProcessors, attachments, propagationContext, // eslint-disable-next-line deprecation/deprecation\n    transactionName, span } = mergeData;\n    mergeAndOverwriteScopeData(data, \"extra\", extra);\n    mergeAndOverwriteScopeData(data, \"tags\", tags);\n    mergeAndOverwriteScopeData(data, \"user\", user);\n    mergeAndOverwriteScopeData(data, \"contexts\", contexts);\n    mergeAndOverwriteScopeData(data, \"sdkProcessingMetadata\", sdkProcessingMetadata);\n    if (level) {\n        data.level = level;\n    }\n    if (transactionName) {\n        // eslint-disable-next-line deprecation/deprecation\n        data.transactionName = transactionName;\n    }\n    if (span) {\n        data.span = span;\n    }\n    if (breadcrumbs.length) {\n        data.breadcrumbs = [\n            ...data.breadcrumbs,\n            ...breadcrumbs\n        ];\n    }\n    if (fingerprint.length) {\n        data.fingerprint = [\n            ...data.fingerprint,\n            ...fingerprint\n        ];\n    }\n    if (eventProcessors.length) {\n        data.eventProcessors = [\n            ...data.eventProcessors,\n            ...eventProcessors\n        ];\n    }\n    if (attachments.length) {\n        data.attachments = [\n            ...data.attachments,\n            ...attachments\n        ];\n    }\n    data.propagationContext = {\n        ...data.propagationContext,\n        ...propagationContext\n    };\n}\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */ function mergeAndOverwriteScopeData(data, prop, mergeVal) {\n    if (mergeVal && Object.keys(mergeVal).length) {\n        // Clone object\n        data[prop] = {\n            ...data[prop]\n        };\n        for(const key in mergeVal){\n            if (Object.prototype.hasOwnProperty.call(mergeVal, key)) {\n                data[prop][key] = mergeVal[key];\n            }\n        }\n    }\n}\nfunction applyDataToEvent(event, data) {\n    const { extra, tags, user, contexts, level, // eslint-disable-next-line deprecation/deprecation\n    transactionName } = data;\n    const cleanedExtra = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)(extra);\n    if (cleanedExtra && Object.keys(cleanedExtra).length) {\n        event.extra = {\n            ...cleanedExtra,\n            ...event.extra\n        };\n    }\n    const cleanedTags = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)(tags);\n    if (cleanedTags && Object.keys(cleanedTags).length) {\n        event.tags = {\n            ...cleanedTags,\n            ...event.tags\n        };\n    }\n    const cleanedUser = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)(user);\n    if (cleanedUser && Object.keys(cleanedUser).length) {\n        event.user = {\n            ...cleanedUser,\n            ...event.user\n        };\n    }\n    const cleanedContexts = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)(contexts);\n    if (cleanedContexts && Object.keys(cleanedContexts).length) {\n        event.contexts = {\n            ...cleanedContexts,\n            ...event.contexts\n        };\n    }\n    if (level) {\n        event.level = level;\n    }\n    if (transactionName) {\n        event.transaction = transactionName;\n    }\n}\nfunction applyBreadcrumbsToEvent(event, breadcrumbs) {\n    const mergedBreadcrumbs = [\n        ...event.breadcrumbs || [],\n        ...breadcrumbs\n    ];\n    event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\nfunction applySdkMetadataToEvent(event, sdkProcessingMetadata) {\n    event.sdkProcessingMetadata = {\n        ...event.sdkProcessingMetadata,\n        ...sdkProcessingMetadata\n    };\n}\nfunction applySpanToEvent(event, span) {\n    event.contexts = {\n        trace: (0,_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.spanToTraceContext)(span),\n        ...event.contexts\n    };\n    const rootSpan = (0,_getRootSpan_js__WEBPACK_IMPORTED_MODULE_2__.getRootSpan)(span);\n    if (rootSpan) {\n        event.sdkProcessingMetadata = {\n            dynamicSamplingContext: (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_3__.getDynamicSamplingContextFromSpan)(span),\n            ...event.sdkProcessingMetadata\n        };\n        const transactionName = (0,_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.spanToJSON)(rootSpan).description;\n        if (transactionName) {\n            event.tags = {\n                transaction: transactionName,\n                ...event.tags\n            };\n        }\n    }\n}\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */ function applyFingerprintToEvent(event, fingerprint) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.arrayify)(event.fingerprint) : [];\n    // If we have something on the scope, then merge it with event\n    if (fingerprint) {\n        event.fingerprint = event.fingerprint.concat(fingerprint);\n    }\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n        delete event.fingerprint;\n    }\n}\n //# sourceMappingURL=applyScopeDataToEvent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/utils/applyScopeDataToEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/utils/getRootSpan.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/utils/getRootSpan.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRootSpan: () => (/* binding */ getRootSpan)\n/* harmony export */ });\n/**\n * Returns the root span of a given span.\n *\n * As long as we use `Transaction`s internally, the returned root span\n * will be a `Transaction` but be aware that this might change in the future.\n *\n * If the given span has no root span or transaction, `undefined` is returned.\n */ function getRootSpan(span) {\n    // TODO (v8): Remove this check and just return span\n    // eslint-disable-next-line deprecation/deprecation\n    return span.transaction;\n}\n //# sourceMappingURL=getRootSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS91dGlscy9nZXRSb290U3Bhbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNBLFlBQVlDLElBQUk7SUFDdkIsb0RBQW9EO0lBQ3BELG1EQUFtRDtJQUNuRCxPQUFPQSxLQUFLQyxXQUFXO0FBQ3pCO0FBRXVCLENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL29icmFsaW5rLXdlYi8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL3V0aWxzL2dldFJvb3RTcGFuLmpzP2Y2MjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXR1cm5zIHRoZSByb290IHNwYW4gb2YgYSBnaXZlbiBzcGFuLlxuICpcbiAqIEFzIGxvbmcgYXMgd2UgdXNlIGBUcmFuc2FjdGlvbmBzIGludGVybmFsbHksIHRoZSByZXR1cm5lZCByb290IHNwYW5cbiAqIHdpbGwgYmUgYSBgVHJhbnNhY3Rpb25gIGJ1dCBiZSBhd2FyZSB0aGF0IHRoaXMgbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG4gKlxuICogSWYgdGhlIGdpdmVuIHNwYW4gaGFzIG5vIHJvb3Qgc3BhbiBvciB0cmFuc2FjdGlvbiwgYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gKi9cbmZ1bmN0aW9uIGdldFJvb3RTcGFuKHNwYW4pIHtcbiAgLy8gVE9ETyAodjgpOiBSZW1vdmUgdGhpcyBjaGVjayBhbmQganVzdCByZXR1cm4gc3BhblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgcmV0dXJuIHNwYW4udHJhbnNhY3Rpb247XG59XG5cbmV4cG9ydCB7IGdldFJvb3RTcGFuIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRSb290U3Bhbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJnZXRSb290U3BhbiIsInNwYW4iLCJ0cmFuc2FjdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/utils/getRootSpan.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/utils/prepareEvent.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/utils/prepareEvent.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyDebugIds: () => (/* binding */ applyDebugIds),\n/* harmony export */   applyDebugMeta: () => (/* binding */ applyDebugMeta),\n/* harmony export */   parseEventHintOrCaptureContext: () => (/* binding */ parseEventHintOrCaptureContext),\n/* harmony export */   prepareEvent: () => (/* binding */ prepareEvent)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/string.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/normalize.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@sentry/core/esm/constants.js\");\n/* harmony import */ var _eventProcessors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../eventProcessors.js */ \"(ssr)/./node_modules/@sentry/core/esm/eventProcessors.js\");\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scope.js */ \"(ssr)/./node_modules/@sentry/core/esm/scope.js\");\n/* harmony import */ var _applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./applyScopeDataToEvent.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/applyScopeDataToEvent.js\");\n/* harmony import */ var _spanUtils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./spanUtils.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/spanUtils.js\");\n\n\n\n\n\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */ /**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * Note: This also triggers callbacks for `addGlobalEventProcessor`, but not `beforeSend`.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */ function prepareEvent(options, event, hint, scope, client, isolationScope) {\n    const { normalizeDepth = 3, normalizeMaxBreadth = 1000 } = options;\n    const prepared = {\n        ...event,\n        event_id: event.event_id || hint.event_id || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.uuid4)(),\n        timestamp: event.timestamp || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.dateTimestampInSeconds)()\n    };\n    const integrations = hint.integrations || options.integrations.map((i)=>i.name);\n    applyClientOptions(prepared, options);\n    applyIntegrationsMetadata(prepared, integrations);\n    // Only put debug IDs onto frames for error events.\n    if (event.type === undefined) {\n        applyDebugIds(prepared, options.stackParser);\n    }\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    const finalScope = getFinalScope(scope, hint.captureContext);\n    if (hint.mechanism) {\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.addExceptionMechanism)(prepared, hint.mechanism);\n    }\n    const clientEventProcessors = client && client.getEventProcessors ? client.getEventProcessors() : [];\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    // Merge scope data together\n    const data = (0,_scope_js__WEBPACK_IMPORTED_MODULE_2__.getGlobalScope)().getScopeData();\n    if (isolationScope) {\n        const isolationData = isolationScope.getScopeData();\n        (0,_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__.mergeScopeData)(data, isolationData);\n    }\n    if (finalScope) {\n        const finalScopeData = finalScope.getScopeData();\n        (0,_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__.mergeScopeData)(data, finalScopeData);\n    }\n    const attachments = [\n        ...hint.attachments || [],\n        ...data.attachments\n    ];\n    if (attachments.length) {\n        hint.attachments = attachments;\n    }\n    (0,_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__.applyScopeDataToEvent)(prepared, data);\n    // TODO (v8): Update this order to be: Global > Client > Scope\n    const eventProcessors = [\n        ...clientEventProcessors,\n        // eslint-disable-next-line deprecation/deprecation\n        ...(0,_eventProcessors_js__WEBPACK_IMPORTED_MODULE_4__.getGlobalEventProcessors)(),\n        // Run scope event processors _after_ all other processors\n        ...data.eventProcessors\n    ];\n    const result = (0,_eventProcessors_js__WEBPACK_IMPORTED_MODULE_4__.notifyEventProcessors)(eventProcessors, prepared, hint);\n    return result.then((evt)=>{\n        if (evt) {\n            // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n            // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n            // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n            // any new data\n            applyDebugMeta(evt);\n        }\n        if (typeof normalizeDepth === \"number\" && normalizeDepth > 0) {\n            return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n        }\n        return evt;\n    });\n}\n/**\n *  Enhances event using the client configuration.\n *  It takes care of all \"static\" values like environment, release and `dist`,\n *  as well as truncating overly long values.\n * @param event event instance to be enhanced\n */ function applyClientOptions(event, options) {\n    const { environment, release, dist, maxValueLength = 250 } = options;\n    if (!(\"environment\" in event)) {\n        event.environment = \"environment\" in options ? environment : _constants_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_ENVIRONMENT;\n    }\n    if (event.release === undefined && release !== undefined) {\n        event.release = release;\n    }\n    if (event.dist === undefined && dist !== undefined) {\n        event.dist = dist;\n    }\n    if (event.message) {\n        event.message = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.truncate)(event.message, maxValueLength);\n    }\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n        exception.value = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.truncate)(exception.value, maxValueLength);\n    }\n    const request = event.request;\n    if (request && request.url) {\n        request.url = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.truncate)(request.url, maxValueLength);\n    }\n}\nconst debugIdStackParserCache = new WeakMap();\n/**\n * Puts debug IDs into the stack frames of an error event.\n */ function applyDebugIds(event, stackParser) {\n    const debugIdMap = _sentry_utils__WEBPACK_IMPORTED_MODULE_7__.GLOBAL_OBJ._sentryDebugIds;\n    if (!debugIdMap) {\n        return;\n    }\n    let debugIdStackFramesCache;\n    const cachedDebugIdStackFrameCache = debugIdStackParserCache.get(stackParser);\n    if (cachedDebugIdStackFrameCache) {\n        debugIdStackFramesCache = cachedDebugIdStackFrameCache;\n    } else {\n        debugIdStackFramesCache = new Map();\n        debugIdStackParserCache.set(stackParser, debugIdStackFramesCache);\n    }\n    // Build a map of filename -> debug_id\n    const filenameDebugIdMap = Object.keys(debugIdMap).reduce((acc, debugIdStackTrace)=>{\n        let parsedStack;\n        const cachedParsedStack = debugIdStackFramesCache.get(debugIdStackTrace);\n        if (cachedParsedStack) {\n            parsedStack = cachedParsedStack;\n        } else {\n            parsedStack = stackParser(debugIdStackTrace);\n            debugIdStackFramesCache.set(debugIdStackTrace, parsedStack);\n        }\n        for(let i = parsedStack.length - 1; i >= 0; i--){\n            const stackFrame = parsedStack[i];\n            if (stackFrame.filename) {\n                acc[stackFrame.filename] = debugIdMap[debugIdStackTrace];\n                break;\n            }\n        }\n        return acc;\n    }, {});\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        event.exception.values.forEach((exception)=>{\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            exception.stacktrace.frames.forEach((frame)=>{\n                if (frame.filename) {\n                    frame.debug_id = filenameDebugIdMap[frame.filename];\n                }\n            });\n        });\n    } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n    }\n}\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */ function applyDebugMeta(event) {\n    // Extract debug IDs and filenames from the stack frames on the event.\n    const filenameDebugIdMap = {};\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        event.exception.values.forEach((exception)=>{\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            exception.stacktrace.frames.forEach((frame)=>{\n                if (frame.debug_id) {\n                    if (frame.abs_path) {\n                        filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n                    } else if (frame.filename) {\n                        filenameDebugIdMap[frame.filename] = frame.debug_id;\n                    }\n                    delete frame.debug_id;\n                }\n            });\n        });\n    } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n    }\n    if (Object.keys(filenameDebugIdMap).length === 0) {\n        return;\n    }\n    // Fill debug_meta information\n    event.debug_meta = event.debug_meta || {};\n    event.debug_meta.images = event.debug_meta.images || [];\n    const images = event.debug_meta.images;\n    Object.keys(filenameDebugIdMap).forEach((filename)=>{\n        images.push({\n            type: \"sourcemap\",\n            code_file: filename,\n            debug_id: filenameDebugIdMap[filename]\n        });\n    });\n}\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */ function applyIntegrationsMetadata(event, integrationNames) {\n    if (integrationNames.length > 0) {\n        event.sdk = event.sdk || {};\n        event.sdk.integrations = [\n            ...event.sdk.integrations || [],\n            ...integrationNames\n        ];\n    }\n}\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */ function normalizeEvent(event, depth, maxBreadth) {\n    if (!event) {\n        return null;\n    }\n    const normalized = {\n        ...event,\n        ...event.breadcrumbs && {\n            breadcrumbs: event.breadcrumbs.map((b)=>({\n                    ...b,\n                    ...b.data && {\n                        data: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.normalize)(b.data, depth, maxBreadth)\n                    }\n                }))\n        },\n        ...event.user && {\n            user: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.user, depth, maxBreadth)\n        },\n        ...event.contexts && {\n            contexts: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.contexts, depth, maxBreadth)\n        },\n        ...event.extra && {\n            extra: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.extra, depth, maxBreadth)\n        }\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace && normalized.contexts) {\n        normalized.contexts.trace = event.contexts.trace;\n        // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n        if (event.contexts.trace.data) {\n            normalized.contexts.trace.data = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.contexts.trace.data, depth, maxBreadth);\n        }\n    }\n    // event.spans[].data may contain circular/dangerous data so we need to normalize it\n    if (event.spans) {\n        normalized.spans = event.spans.map((span)=>{\n            const data = (0,_spanUtils_js__WEBPACK_IMPORTED_MODULE_9__.spanToJSON)(span).data;\n            if (data) {\n                // This is a bit weird, as we generally have `Span` instances here, but to be safe we do not assume so\n                // eslint-disable-next-line deprecation/deprecation\n                span.data = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.normalize)(data, depth, maxBreadth);\n            }\n            return span;\n        });\n    }\n    return normalized;\n}\nfunction getFinalScope(scope, captureContext) {\n    if (!captureContext) {\n        return scope;\n    }\n    const finalScope = scope ? scope.clone() : new _scope_js__WEBPACK_IMPORTED_MODULE_2__.Scope();\n    finalScope.update(captureContext);\n    return finalScope;\n}\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */ function parseEventHintOrCaptureContext(hint) {\n    if (!hint) {\n        return undefined;\n    }\n    // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n    if (hintIsScopeOrFunction(hint)) {\n        return {\n            captureContext: hint\n        };\n    }\n    if (hintIsScopeContext(hint)) {\n        return {\n            captureContext: hint\n        };\n    }\n    return hint;\n}\nfunction hintIsScopeOrFunction(hint) {\n    return hint instanceof _scope_js__WEBPACK_IMPORTED_MODULE_2__.Scope || typeof hint === \"function\";\n}\nconst captureContextKeys = [\n    \"user\",\n    \"level\",\n    \"extra\",\n    \"contexts\",\n    \"tags\",\n    \"fingerprint\",\n    \"requestSession\",\n    \"propagationContext\"\n];\nfunction hintIsScopeContext(hint) {\n    return Object.keys(hint).some((key)=>captureContextKeys.includes(key));\n}\n //# sourceMappingURL=prepareEvent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/utils/prepareEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/utils/spanUtils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/utils/spanUtils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACE_FLAG_NONE: () => (/* binding */ TRACE_FLAG_NONE),\n/* harmony export */   TRACE_FLAG_SAMPLED: () => (/* binding */ TRACE_FLAG_SAMPLED),\n/* harmony export */   spanIsSampled: () => (/* binding */ spanIsSampled),\n/* harmony export */   spanTimeInputToSeconds: () => (/* binding */ spanTimeInputToSeconds),\n/* harmony export */   spanToJSON: () => (/* binding */ spanToJSON),\n/* harmony export */   spanToTraceContext: () => (/* binding */ spanToTraceContext),\n/* harmony export */   spanToTraceHeader: () => (/* binding */ spanToTraceHeader)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/time.js\");\n\n// These are aligned with OpenTelemetry trace flags\nconst TRACE_FLAG_NONE = 0x0;\nconst TRACE_FLAG_SAMPLED = 0x1;\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n */ function spanToTraceContext(span) {\n    const { spanId: span_id, traceId: trace_id } = span.spanContext();\n    const { data, op, parent_span_id, status, tags, origin } = spanToJSON(span);\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)({\n        data,\n        op,\n        parent_span_id,\n        span_id,\n        status,\n        tags,\n        trace_id,\n        origin\n    });\n}\n/**\n * Convert a Span to a Sentry trace header.\n */ function spanToTraceHeader(span) {\n    const { traceId, spanId } = span.spanContext();\n    const sampled = spanIsSampled(span);\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.generateSentryTraceHeader)(traceId, spanId, sampled);\n}\n/**\n * Convert a span time input intp a timestamp in seconds.\n */ function spanTimeInputToSeconds(input) {\n    if (typeof input === \"number\") {\n        return ensureTimestampInSeconds(input);\n    }\n    if (Array.isArray(input)) {\n        // See {@link HrTime} for the array-based time format\n        return input[0] + input[1] / 1e9;\n    }\n    if (input instanceof Date) {\n        return ensureTimestampInSeconds(input.getTime());\n    }\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.timestampInSeconds)();\n}\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */ function ensureTimestampInSeconds(timestamp) {\n    const isMs = timestamp > 9999999999;\n    return isMs ? timestamp / 1000 : timestamp;\n}\n/**\n * Convert a span to a JSON representation.\n * Note that all fields returned here are optional and need to be guarded against.\n *\n * Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n * This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n * And `spanToJSON` needs the Span class from `span.ts` to check here.\n * TODO v8: When we remove the deprecated stuff from `span.ts`, we can remove the circular dependency again.\n */ function spanToJSON(span) {\n    if (spanIsSpanClass(span)) {\n        return span.getSpanJSON();\n    }\n    // Fallback: We also check for `.toJSON()` here...\n    // eslint-disable-next-line deprecation/deprecation\n    if (typeof span.toJSON === \"function\") {\n        // eslint-disable-next-line deprecation/deprecation\n        return span.toJSON();\n    }\n    return {};\n}\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */ function spanIsSpanClass(span) {\n    return typeof span.getSpanJSON === \"function\";\n}\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */ function spanIsSampled(span) {\n    // We align our trace flags with the ones OpenTelemetry use\n    // So we also check for sampled the same way they do.\n    const { traceFlags } = span.spanContext();\n    // eslint-disable-next-line no-bitwise\n    return Boolean(traceFlags & TRACE_FLAG_SAMPLED);\n}\n //# sourceMappingURL=spanUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS91dGlscy9zcGFuVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFpRztBQUVqRyxtREFBbUQ7QUFDbkQsTUFBTUcsa0JBQWtCO0FBQ3hCLE1BQU1DLHFCQUFxQjtBQUUzQjs7Q0FFQyxHQUNELFNBQVNDLG1CQUFtQkMsSUFBSTtJQUM5QixNQUFNLEVBQUVDLFFBQVFDLE9BQU8sRUFBRUMsU0FBU0MsUUFBUSxFQUFFLEdBQUdKLEtBQUtLLFdBQVc7SUFDL0QsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEVBQUUsRUFBRUMsY0FBYyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsTUFBTSxFQUFFLEdBQUdDLFdBQVdaO0lBRXRFLE9BQU9OLGdFQUFpQkEsQ0FBQztRQUN2Qlk7UUFDQUM7UUFDQUM7UUFDQU47UUFDQU87UUFDQUM7UUFDQU47UUFDQU87SUFDRjtBQUNGO0FBRUE7O0NBRUMsR0FDRCxTQUFTRSxrQkFBa0JiLElBQUk7SUFDN0IsTUFBTSxFQUFFRyxPQUFPLEVBQUVGLE1BQU0sRUFBRSxHQUFHRCxLQUFLSyxXQUFXO0lBQzVDLE1BQU1TLFVBQVVDLGNBQWNmO0lBQzlCLE9BQU9MLHdFQUF5QkEsQ0FBQ1EsU0FBU0YsUUFBUWE7QUFDcEQ7QUFFQTs7Q0FFQyxHQUNELFNBQVNFLHVCQUF1QkMsS0FBSztJQUNuQyxJQUFJLE9BQU9BLFVBQVUsVUFBVTtRQUM3QixPQUFPQyx5QkFBeUJEO0lBQ2xDO0lBRUEsSUFBSUUsTUFBTUMsT0FBTyxDQUFDSCxRQUFRO1FBQ3hCLHFEQUFxRDtRQUNyRCxPQUFPQSxLQUFLLENBQUMsRUFBRSxHQUFHQSxLQUFLLENBQUMsRUFBRSxHQUFHO0lBQy9CO0lBRUEsSUFBSUEsaUJBQWlCSSxNQUFNO1FBQ3pCLE9BQU9ILHlCQUF5QkQsTUFBTUssT0FBTztJQUMvQztJQUVBLE9BQU8xQixpRUFBa0JBO0FBQzNCO0FBRUE7O0NBRUMsR0FDRCxTQUFTc0IseUJBQXlCSyxTQUFTO0lBQ3pDLE1BQU1DLE9BQU9ELFlBQVk7SUFDekIsT0FBT0MsT0FBT0QsWUFBWSxPQUFPQTtBQUNuQztBQUVBOzs7Ozs7OztDQVFDLEdBQ0QsU0FBU1gsV0FBV1osSUFBSTtJQUN0QixJQUFJeUIsZ0JBQWdCekIsT0FBTztRQUN6QixPQUFPQSxLQUFLMEIsV0FBVztJQUN6QjtJQUVBLGtEQUFrRDtJQUNsRCxtREFBbUQ7SUFDbkQsSUFBSSxPQUFPMUIsS0FBSzJCLE1BQU0sS0FBSyxZQUFZO1FBQ3JDLG1EQUFtRDtRQUNuRCxPQUFPM0IsS0FBSzJCLE1BQU07SUFDcEI7SUFFQSxPQUFPLENBQUM7QUFDVjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNGLGdCQUFnQnpCLElBQUk7SUFDM0IsT0FBTyxPQUFPLEtBQVEwQixXQUFXLEtBQUs7QUFDeEM7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNYLGNBQWNmLElBQUk7SUFDekIsMkRBQTJEO0lBQzNELHFEQUFxRDtJQUNyRCxNQUFNLEVBQUU0QixVQUFVLEVBQUUsR0FBRzVCLEtBQUtLLFdBQVc7SUFDdkMsc0NBQXNDO0lBQ3RDLE9BQU93QixRQUFRRCxhQUFhOUI7QUFDOUI7QUFFeUksQ0FDekkscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JyYWxpbmstd2ViLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vdXRpbHMvc3BhblV0aWxzLmpzPzYwMGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZHJvcFVuZGVmaW5lZEtleXMsIGdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIsIHRpbWVzdGFtcEluU2Vjb25kcyB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG4vLyBUaGVzZSBhcmUgYWxpZ25lZCB3aXRoIE9wZW5UZWxlbWV0cnkgdHJhY2UgZmxhZ3NcbmNvbnN0IFRSQUNFX0ZMQUdfTk9ORSA9IDB4MDtcbmNvbnN0IFRSQUNFX0ZMQUdfU0FNUExFRCA9IDB4MTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgc3BhbiB0byBhIHRyYWNlIGNvbnRleHQsIHdoaWNoIGNhbiBiZSBzZW50IGFzIHRoZSBgdHJhY2VgIGNvbnRleHQgaW4gYW4gZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIHNwYW5Ub1RyYWNlQ29udGV4dChzcGFuKSB7XG4gIGNvbnN0IHsgc3BhbklkOiBzcGFuX2lkLCB0cmFjZUlkOiB0cmFjZV9pZCB9ID0gc3Bhbi5zcGFuQ29udGV4dCgpO1xuICBjb25zdCB7IGRhdGEsIG9wLCBwYXJlbnRfc3Bhbl9pZCwgc3RhdHVzLCB0YWdzLCBvcmlnaW4gfSA9IHNwYW5Ub0pTT04oc3Bhbik7XG5cbiAgcmV0dXJuIGRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICBkYXRhLFxuICAgIG9wLFxuICAgIHBhcmVudF9zcGFuX2lkLFxuICAgIHNwYW5faWQsXG4gICAgc3RhdHVzLFxuICAgIHRhZ3MsXG4gICAgdHJhY2VfaWQsXG4gICAgb3JpZ2luLFxuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgU3BhbiB0byBhIFNlbnRyeSB0cmFjZSBoZWFkZXIuXG4gKi9cbmZ1bmN0aW9uIHNwYW5Ub1RyYWNlSGVhZGVyKHNwYW4pIHtcbiAgY29uc3QgeyB0cmFjZUlkLCBzcGFuSWQgfSA9IHNwYW4uc3BhbkNvbnRleHQoKTtcbiAgY29uc3Qgc2FtcGxlZCA9IHNwYW5Jc1NhbXBsZWQoc3Bhbik7XG4gIHJldHVybiBnZW5lcmF0ZVNlbnRyeVRyYWNlSGVhZGVyKHRyYWNlSWQsIHNwYW5JZCwgc2FtcGxlZCk7XG59XG5cbi8qKlxuICogQ29udmVydCBhIHNwYW4gdGltZSBpbnB1dCBpbnRwIGEgdGltZXN0YW1wIGluIHNlY29uZHMuXG4gKi9cbmZ1bmN0aW9uIHNwYW5UaW1lSW5wdXRUb1NlY29uZHMoaW5wdXQpIHtcbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZW5zdXJlVGltZXN0YW1wSW5TZWNvbmRzKGlucHV0KTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgIC8vIFNlZSB7QGxpbmsgSHJUaW1lfSBmb3IgdGhlIGFycmF5LWJhc2VkIHRpbWUgZm9ybWF0XG4gICAgcmV0dXJuIGlucHV0WzBdICsgaW5wdXRbMV0gLyAxZTk7XG4gIH1cblxuICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIGVuc3VyZVRpbWVzdGFtcEluU2Vjb25kcyhpbnB1dC5nZXRUaW1lKCkpO1xuICB9XG5cbiAgcmV0dXJuIHRpbWVzdGFtcEluU2Vjb25kcygpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgdGltZXN0YW1wIHRvIHNlY29uZCwgaWYgaXQgd2FzIGluIG1pbGxpc2Vjb25kcywgb3Iga2VlcHMgaXQgYXMgc2Vjb25kLlxuICovXG5mdW5jdGlvbiBlbnN1cmVUaW1lc3RhbXBJblNlY29uZHModGltZXN0YW1wKSB7XG4gIGNvbnN0IGlzTXMgPSB0aW1lc3RhbXAgPiA5OTk5OTk5OTk5O1xuICByZXR1cm4gaXNNcyA/IHRpbWVzdGFtcCAvIDEwMDAgOiB0aW1lc3RhbXA7XG59XG5cbi8qKlxuICogQ29udmVydCBhIHNwYW4gdG8gYSBKU09OIHJlcHJlc2VudGF0aW9uLlxuICogTm90ZSB0aGF0IGFsbCBmaWVsZHMgcmV0dXJuZWQgaGVyZSBhcmUgb3B0aW9uYWwgYW5kIG5lZWQgdG8gYmUgZ3VhcmRlZCBhZ2FpbnN0LlxuICpcbiAqIE5vdGU6IEJlY2F1c2Ugb2YgdGhpcywgd2UgY3VycmVudGx5IGhhdmUgYSBjaXJjdWxhciB0eXBlIGRlcGVuZGVuY3kgKHdoaWNoIHdlIG9wdGVkIG91dCBvZiBpbiBwYWNrYWdlLmpzb24pLlxuICogVGhpcyBpcyBub3QgYXZvaWRhYmxlIGFzIHdlIG5lZWQgYHNwYW5Ub0pTT05gIGluIGBzcGFuVXRpbHMudHNgLCB3aGljaCBpbiB0dXJuIGlzIG5lZWRlZCBieSBgc3Bhbi50c2AgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICogQW5kIGBzcGFuVG9KU09OYCBuZWVkcyB0aGUgU3BhbiBjbGFzcyBmcm9tIGBzcGFuLnRzYCB0byBjaGVjayBoZXJlLlxuICogVE9ETyB2ODogV2hlbiB3ZSByZW1vdmUgdGhlIGRlcHJlY2F0ZWQgc3R1ZmYgZnJvbSBgc3Bhbi50c2AsIHdlIGNhbiByZW1vdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kgYWdhaW4uXG4gKi9cbmZ1bmN0aW9uIHNwYW5Ub0pTT04oc3Bhbikge1xuICBpZiAoc3BhbklzU3BhbkNsYXNzKHNwYW4pKSB7XG4gICAgcmV0dXJuIHNwYW4uZ2V0U3BhbkpTT04oKTtcbiAgfVxuXG4gIC8vIEZhbGxiYWNrOiBXZSBhbHNvIGNoZWNrIGZvciBgLnRvSlNPTigpYCBoZXJlLi4uXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICBpZiAodHlwZW9mIHNwYW4udG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgcmV0dXJuIHNwYW4udG9KU09OKCk7XG4gIH1cblxuICByZXR1cm4ge307XG59XG5cbi8qKlxuICogU2FkbHksIGR1ZSB0byBjaXJjdWxhciBkZXBlbmRlbmN5IGNoZWNrcyB3ZSBjYW5ub3QgYWN0dWFsbHkgaW1wb3J0IHRoZSBTcGFuIGNsYXNzIGhlcmUgYW5kIGNoZWNrIGZvciBpbnN0YW5jZW9mLlxuICogOiggU28gaW5zdGVhZCB3ZSBhcHByb3hpbWF0ZSB0aGlzIGJ5IGNoZWNraW5nIGlmIGl0IGhhcyB0aGUgYGdldFNwYW5KU09OYCBtZXRob2QuXG4gKi9cbmZ1bmN0aW9uIHNwYW5Jc1NwYW5DbGFzcyhzcGFuKSB7XG4gIHJldHVybiB0eXBlb2YgKHNwYW4gKS5nZXRTcGFuSlNPTiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBzcGFuIGlzIHNhbXBsZWQuXG4gKiBJbiBtb3N0IGNhc2VzLCB5b3Ugc2hvdWxkIGp1c3QgdXNlIGBzcGFuLmlzUmVjb3JkaW5nKClgIGluc3RlYWQuXG4gKiBIb3dldmVyLCB0aGlzIGhhcyBhIHNsaWdodGx5IGRpZmZlcmVudCBzZW1hbnRpYywgYXMgaXQgYWxzbyByZXR1cm5zIGZhbHNlIGlmIHRoZSBzcGFuIGlzIGZpbmlzaGVkLlxuICogU28gaW4gdGhlIGNhc2Ugd2hlcmUgdGhpcyBkaXN0aW5jdGlvbiBpcyBpbXBvcnRhbnQsIHVzZSB0aGlzIG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gc3BhbklzU2FtcGxlZChzcGFuKSB7XG4gIC8vIFdlIGFsaWduIG91ciB0cmFjZSBmbGFncyB3aXRoIHRoZSBvbmVzIE9wZW5UZWxlbWV0cnkgdXNlXG4gIC8vIFNvIHdlIGFsc28gY2hlY2sgZm9yIHNhbXBsZWQgdGhlIHNhbWUgd2F5IHRoZXkgZG8uXG4gIGNvbnN0IHsgdHJhY2VGbGFncyB9ID0gc3Bhbi5zcGFuQ29udGV4dCgpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICByZXR1cm4gQm9vbGVhbih0cmFjZUZsYWdzICYgVFJBQ0VfRkxBR19TQU1QTEVEKTtcbn1cblxuZXhwb3J0IHsgVFJBQ0VfRkxBR19OT05FLCBUUkFDRV9GTEFHX1NBTVBMRUQsIHNwYW5Jc1NhbXBsZWQsIHNwYW5UaW1lSW5wdXRUb1NlY29uZHMsIHNwYW5Ub0pTT04sIHNwYW5Ub1RyYWNlQ29udGV4dCwgc3BhblRvVHJhY2VIZWFkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwYW5VdGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJkcm9wVW5kZWZpbmVkS2V5cyIsImdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIiLCJ0aW1lc3RhbXBJblNlY29uZHMiLCJUUkFDRV9GTEFHX05PTkUiLCJUUkFDRV9GTEFHX1NBTVBMRUQiLCJzcGFuVG9UcmFjZUNvbnRleHQiLCJzcGFuIiwic3BhbklkIiwic3Bhbl9pZCIsInRyYWNlSWQiLCJ0cmFjZV9pZCIsInNwYW5Db250ZXh0IiwiZGF0YSIsIm9wIiwicGFyZW50X3NwYW5faWQiLCJzdGF0dXMiLCJ0YWdzIiwib3JpZ2luIiwic3BhblRvSlNPTiIsInNwYW5Ub1RyYWNlSGVhZGVyIiwic2FtcGxlZCIsInNwYW5Jc1NhbXBsZWQiLCJzcGFuVGltZUlucHV0VG9TZWNvbmRzIiwiaW5wdXQiLCJlbnN1cmVUaW1lc3RhbXBJblNlY29uZHMiLCJBcnJheSIsImlzQXJyYXkiLCJEYXRlIiwiZ2V0VGltZSIsInRpbWVzdGFtcCIsImlzTXMiLCJzcGFuSXNTcGFuQ2xhc3MiLCJnZXRTcGFuSlNPTiIsInRvSlNPTiIsInRyYWNlRmxhZ3MiLCJCb29sZWFuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/utils/spanUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/version.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/esm/version.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION)\n/* harmony export */ });\nconst SDK_VERSION = \"7.104.0\";\n //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxjQUFjO0FBRUcsQ0FDdkIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JyYWxpbmstd2ViLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vdmVyc2lvbi5qcz9jNDExIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNES19WRVJTSU9OID0gJzcuMTA0LjAnO1xuXG5leHBvcnQgeyBTREtfVkVSU0lPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJTREtfVkVSU0lPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/baggage.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/baggage.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BAGGAGE_HEADER_NAME: () => (/* binding */ BAGGAGE_HEADER_NAME),\n/* harmony export */   MAX_BAGGAGE_STRING_LENGTH: () => (/* binding */ MAX_BAGGAGE_STRING_LENGTH),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX_REGEX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX_REGEX),\n/* harmony export */   baggageHeaderToDynamicSamplingContext: () => (/* binding */ baggageHeaderToDynamicSamplingContext),\n/* harmony export */   dynamicSamplingContextToSentryBaggageHeader: () => (/* binding */ dynamicSamplingContextToSentryBaggageHeader)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n\n\n\nconst BAGGAGE_HEADER_NAME = \"baggage\";\nconst SENTRY_BAGGAGE_KEY_PREFIX = \"sentry-\";\nconst SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */ const MAX_BAGGAGE_STRING_LENGTH = 8192;\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */ function baggageHeaderToDynamicSamplingContext(// Very liberal definition of what any incoming header might look like\nbaggageHeader) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(baggageHeader) && !Array.isArray(baggageHeader)) {\n        return undefined;\n    }\n    // Intermediary object to store baggage key value pairs of incoming baggage headers on.\n    // It is later used to read Sentry-DSC-values from.\n    let baggageObject = {};\n    if (Array.isArray(baggageHeader)) {\n        // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n        baggageObject = baggageHeader.reduce((acc, curr)=>{\n            const currBaggageObject = baggageHeaderToObject(curr);\n            for (const key of Object.keys(currBaggageObject)){\n                acc[key] = currBaggageObject[key];\n            }\n            return acc;\n        }, {});\n    } else {\n        // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but\n        // this is how we choose to handle it)\n        if (!baggageHeader) {\n            return undefined;\n        }\n        baggageObject = baggageHeaderToObject(baggageHeader);\n    }\n    // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n    const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value])=>{\n        if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n            const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n            acc[nonPrefixedKey] = value;\n        }\n        return acc;\n    }, {});\n    // Only return a dynamic sampling context object if there are keys in it.\n    // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n    if (Object.keys(dynamicSamplingContext).length > 0) {\n        return dynamicSamplingContext;\n    } else {\n        return undefined;\n    }\n}\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */ function dynamicSamplingContextToSentryBaggageHeader(// this also takes undefined for convenience and bundle size in other places\ndynamicSamplingContext) {\n    if (!dynamicSamplingContext) {\n        return undefined;\n    }\n    // Prefix all DSC keys with \"sentry-\" and put them into a new object\n    const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce((acc, [dscKey, dscValue])=>{\n        if (dscValue) {\n            acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n        }\n        return acc;\n    }, {});\n    return objectToBaggageHeader(sentryPrefixedDSC);\n}\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */ function baggageHeaderToObject(baggageHeader) {\n    return baggageHeader.split(\",\").map((baggageEntry)=>baggageEntry.split(\"=\").map((keyOrValue)=>decodeURIComponent(keyOrValue.trim()))).reduce((acc, [key, value])=>{\n        acc[key] = value;\n        return acc;\n    }, {});\n}\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */ function objectToBaggageHeader(object) {\n    if (Object.keys(object).length === 0) {\n        // An empty baggage header is not spec compliant: We return undefined.\n        return undefined;\n    }\n    return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex)=>{\n        const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n        const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n        if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`);\n            return baggageHeader;\n        } else {\n            return newBaggageHeader;\n        }\n    }, \"\");\n}\n //# sourceMappingURL=baggage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/baggage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/browser.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/browser.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getComponentName: () => (/* binding */ getComponentName),\n/* harmony export */   getDomElement: () => (/* binding */ getDomElement),\n/* harmony export */   getLocationHref: () => (/* binding */ getLocationHref),\n/* harmony export */   htmlTreeAsString: () => (/* binding */ htmlTreeAsString)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = (0,_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalObject)();\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function htmlTreeAsString(elem, options = {}) {\n    if (!elem) {\n        return \"<unknown>\";\n    }\n    // try/catch both:\n    // - accessing event.target (see getsentry/raven-js#838, #768)\n    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n    // - can throw an exception in some circumstances.\n    try {\n        let currentElem = elem;\n        const MAX_TRAVERSE_HEIGHT = 5;\n        const out = [];\n        let height = 0;\n        let len = 0;\n        const separator = \" > \";\n        const sepLength = separator.length;\n        let nextStr;\n        const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n        const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n        while(currentElem && height++ < MAX_TRAVERSE_HEIGHT){\n            nextStr = _htmlElementAsString(currentElem, keyAttrs);\n            // bail out if\n            // - nextStr is the 'html' element\n            // - the length of the string that would be created exceeds maxStringLength\n            //   (ignore this limit if we are on the first iteration)\n            if (nextStr === \"html\" || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n                break;\n            }\n            out.push(nextStr);\n            len += nextStr.length;\n            currentElem = currentElem.parentNode;\n        }\n        return out.reverse().join(separator);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function _htmlElementAsString(el, keyAttrs) {\n    const elem = el;\n    const out = [];\n    let className;\n    let classes;\n    let key;\n    let attr;\n    let i;\n    if (!elem || !elem.tagName) {\n        return \"\";\n    }\n    // @ts-expect-error WINDOW has HTMLElement\n    if (WINDOW.HTMLElement) {\n        // If using the component name annotation plugin, this value may be available on the DOM node\n        if (elem instanceof HTMLElement && elem.dataset && elem.dataset[\"sentryComponent\"]) {\n            return elem.dataset[\"sentryComponent\"];\n        }\n    }\n    out.push(elem.tagName.toLowerCase());\n    // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n    const keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter((keyAttr)=>elem.getAttribute(keyAttr)).map((keyAttr)=>[\n            keyAttr,\n            elem.getAttribute(keyAttr)\n        ]) : null;\n    if (keyAttrPairs && keyAttrPairs.length) {\n        keyAttrPairs.forEach((keyAttrPair)=>{\n            out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n        });\n    } else {\n        if (elem.id) {\n            out.push(`#${elem.id}`);\n        }\n        // eslint-disable-next-line prefer-const\n        className = elem.className;\n        if (className && (0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(className)) {\n            classes = className.split(/\\s+/);\n            for(i = 0; i < classes.length; i++){\n                out.push(`.${classes[i]}`);\n            }\n        }\n    }\n    const allowedAttrs = [\n        \"aria-label\",\n        \"type\",\n        \"name\",\n        \"title\",\n        \"alt\"\n    ];\n    for(i = 0; i < allowedAttrs.length; i++){\n        key = allowedAttrs[i];\n        attr = elem.getAttribute(key);\n        if (attr) {\n            out.push(`[${key}=\"${attr}\"]`);\n        }\n    }\n    return out.join(\"\");\n}\n/**\n * A safe form of location.href\n */ function getLocationHref() {\n    try {\n        return WINDOW.document.location.href;\n    } catch (oO) {\n        return \"\";\n    }\n}\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n    if (WINDOW.document && WINDOW.document.querySelector) {\n        return WINDOW.document.querySelector(selector);\n    }\n    return null;\n}\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` attribute. This attribute is added at build-time\n * by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */ function getComponentName(elem) {\n    // @ts-expect-error WINDOW has HTMLElement\n    if (!WINDOW.HTMLElement) {\n        return null;\n    }\n    let currentElem = elem;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    for(let i = 0; i < MAX_TRAVERSE_HEIGHT; i++){\n        if (!currentElem) {\n            return null;\n        }\n        if (currentElem instanceof HTMLElement && currentElem.dataset[\"sentryComponent\"]) {\n            return currentElem.dataset[\"sentryComponent\"];\n        }\n        currentElem = currentElem.parentNode;\n    }\n    return null;\n}\n //# sourceMappingURL=browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/debug-build.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/debug-build.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD = typeof __SENTRY_DEBUG__ === \"undefined\" || __SENTRY_DEBUG__;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDRCxNQUFNQSxjQUFlLE9BQU9DLHFCQUFxQixlQUFlQTtBQUV6QyxDQUN2Qix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnJhbGluay13ZWIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vZGVidWctYnVpbGQuanM/MTYzOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAqL1xuY29uc3QgREVCVUdfQlVJTEQgPSAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pO1xuXG5leHBvcnQgeyBERUJVR19CVUlMRCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctYnVpbGQuanMubWFwXG4iXSwibmFtZXMiOlsiREVCVUdfQlVJTEQiLCJfX1NFTlRSWV9ERUJVR19fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/is.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/utils/esm/is.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDOMError: () => (/* binding */ isDOMError),\n/* harmony export */   isDOMException: () => (/* binding */ isDOMException),\n/* harmony export */   isElement: () => (/* binding */ isElement),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isErrorEvent: () => (/* binding */ isErrorEvent),\n/* harmony export */   isEvent: () => (/* binding */ isEvent),\n/* harmony export */   isInstanceOf: () => (/* binding */ isInstanceOf),\n/* harmony export */   isNaN: () => (/* binding */ isNaN),\n/* harmony export */   isParameterizedString: () => (/* binding */ isParameterizedString),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isPrimitive: () => (/* binding */ isPrimitive),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSyntheticEvent: () => (/* binding */ isSyntheticEvent),\n/* harmony export */   isThenable: () => (/* binding */ isThenable),\n/* harmony export */   isVueViewModel: () => (/* binding */ isVueViewModel)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isError(wat) {\n    switch(objectToString.call(wat)){\n        case \"[object Error]\":\n        case \"[object Exception]\":\n        case \"[object DOMException]\":\n            return true;\n        default:\n            return isInstanceOf(wat, Error);\n    }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */ function isBuiltin(wat, className) {\n    return objectToString.call(wat) === `[object ${className}]`;\n}\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isErrorEvent(wat) {\n    return isBuiltin(wat, \"ErrorEvent\");\n}\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMError(wat) {\n    return isBuiltin(wat, \"DOMError\");\n}\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMException(wat) {\n    return isBuiltin(wat, \"DOMException\");\n}\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isString(wat) {\n    return isBuiltin(wat, \"String\");\n}\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isParameterizedString(wat) {\n    return typeof wat === \"object\" && wat !== null && \"__sentry_template_string__\" in wat && \"__sentry_template_values__\" in wat;\n}\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPrimitive(wat) {\n    return wat === null || isParameterizedString(wat) || typeof wat !== \"object\" && typeof wat !== \"function\";\n}\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPlainObject(wat) {\n    return isBuiltin(wat, \"Object\");\n}\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isEvent(wat) {\n    return typeof Event !== \"undefined\" && isInstanceOf(wat, Event);\n}\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isElement(wat) {\n    return typeof Element !== \"undefined\" && isInstanceOf(wat, Element);\n}\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isRegExp(wat) {\n    return isBuiltin(wat, \"RegExp\");\n}\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */ function isThenable(wat) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return Boolean(wat && wat.then && typeof wat.then === \"function\");\n}\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isSyntheticEvent(wat) {\n    return isPlainObject(wat) && \"nativeEvent\" in wat && \"preventDefault\" in wat && \"stopPropagation\" in wat;\n}\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isNaN(wat) {\n    return typeof wat === \"number\" && wat !== wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */ function isInstanceOf(wat, base) {\n    try {\n        return wat instanceof base;\n    } catch (_e) {\n        return false;\n    }\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isVueViewModel(wat) {\n    // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n    return !!(typeof wat === \"object\" && wat !== null && (wat.__isVue || wat._isVue));\n}\n //# sourceMappingURL=is.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/is.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/logger.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/logger.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONSOLE_LEVELS: () => (/* binding */ CONSOLE_LEVELS),\n/* harmony export */   consoleSandbox: () => (/* binding */ consoleSandbox),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   originalConsoleMethods: () => (/* binding */ originalConsoleMethods)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n/** Prefix for logging strings */ const PREFIX = \"Sentry Logger \";\nconst CONSOLE_LEVELS = [\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\",\n    \"log\",\n    \"assert\",\n    \"trace\"\n];\n/** This may be mutated by the console instrumentation. */ const originalConsoleMethods = {};\n/** JSDoc */ /**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */ function consoleSandbox(callback) {\n    if (!(\"console\" in _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ)) {\n        return callback();\n    }\n    const console = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console;\n    const wrappedFuncs = {};\n    const wrappedLevels = Object.keys(originalConsoleMethods);\n    // Restore all wrapped console methods\n    wrappedLevels.forEach((level)=>{\n        const originalConsoleMethod = originalConsoleMethods[level];\n        wrappedFuncs[level] = console[level];\n        console[level] = originalConsoleMethod;\n    });\n    try {\n        return callback();\n    } finally{\n        // Revert restoration to wrapped state\n        wrappedLevels.forEach((level)=>{\n            console[level] = wrappedFuncs[level];\n        });\n    }\n}\nfunction makeLogger() {\n    let enabled = false;\n    const logger = {\n        enable: ()=>{\n            enabled = true;\n        },\n        disable: ()=>{\n            enabled = false;\n        },\n        isEnabled: ()=>enabled\n    };\n    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n        CONSOLE_LEVELS.forEach((name)=>{\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            logger[name] = (...args)=>{\n                if (enabled) {\n                    consoleSandbox(()=>{\n                        _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n                    });\n                }\n            };\n        });\n    } else {\n        CONSOLE_LEVELS.forEach((name)=>{\n            logger[name] = ()=>undefined;\n        });\n    }\n    return logger;\n}\nconst logger = makeLogger();\n //# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUErQztBQUNIO0FBRTVDLCtCQUErQixHQUMvQixNQUFNRSxTQUFTO0FBRWYsTUFBTUMsaUJBQWlCO0lBQ3JCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRCx3REFBd0QsR0FDeEQsTUFBTUMseUJBRUgsQ0FBQztBQUVKLFVBQVUsR0FFVjs7Ozs7Q0FLQyxHQUNELFNBQVNDLGVBQWVDLFFBQVE7SUFDOUIsSUFBSSxDQUFFLG1FQUFzQixHQUFJO1FBQzlCLE9BQU9BO0lBQ1Q7SUFFQSxNQUFNQyxVQUFVTixxREFBVUEsQ0FBQ00sT0FBTztJQUNsQyxNQUFNQyxlQUFlLENBQUM7SUFFdEIsTUFBTUMsZ0JBQWdCQyxPQUFPQyxJQUFJLENBQUNQO0lBRWxDLHNDQUFzQztJQUN0Q0ssY0FBY0csT0FBTyxDQUFDQyxDQUFBQTtRQUNwQixNQUFNQyx3QkFBd0JWLHNCQUFzQixDQUFDUyxNQUFNO1FBQzNETCxZQUFZLENBQUNLLE1BQU0sR0FBR04sT0FBTyxDQUFDTSxNQUFNO1FBQ3BDTixPQUFPLENBQUNNLE1BQU0sR0FBR0M7SUFDbkI7SUFFQSxJQUFJO1FBQ0YsT0FBT1I7SUFDVCxTQUFVO1FBQ1Isc0NBQXNDO1FBQ3RDRyxjQUFjRyxPQUFPLENBQUNDLENBQUFBO1lBQ3BCTixPQUFPLENBQUNNLE1BQU0sR0FBR0wsWUFBWSxDQUFDSyxNQUFNO1FBQ3RDO0lBQ0Y7QUFDRjtBQUVBLFNBQVNFO0lBQ1AsSUFBSUMsVUFBVTtJQUNkLE1BQU1DLFNBQVM7UUFDYkMsUUFBUTtZQUNORixVQUFVO1FBQ1o7UUFDQUcsU0FBUztZQUNQSCxVQUFVO1FBQ1o7UUFDQUksV0FBVyxJQUFNSjtJQUNuQjtJQUVBLElBQUloQix3REFBV0EsRUFBRTtRQUNmRyxlQUFlUyxPQUFPLENBQUNTLENBQUFBO1lBQ3JCLDhEQUE4RDtZQUM5REosTUFBTSxDQUFDSSxLQUFLLEdBQUcsQ0FBQyxHQUFHQztnQkFDakIsSUFBSU4sU0FBUztvQkFDWFgsZUFBZTt3QkFDYkoscURBQVVBLENBQUNNLE9BQU8sQ0FBQ2MsS0FBSyxDQUFDLENBQUMsRUFBRW5CLE9BQU8sQ0FBQyxFQUFFbUIsS0FBSyxFQUFFLENBQUMsS0FBS0M7b0JBQ3JEO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGLE9BQU87UUFDTG5CLGVBQWVTLE9BQU8sQ0FBQ1MsQ0FBQUE7WUFDckJKLE1BQU0sQ0FBQ0ksS0FBSyxHQUFHLElBQU1FO1FBQ3ZCO0lBQ0Y7SUFFQSxPQUFPTjtBQUNUO0FBRUEsTUFBTUEsU0FBU0Y7QUFFMkQsQ0FDMUUsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JyYWxpbmstd2ViLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2xvZ2dlci5qcz84Y2NlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFQlVHX0JVSUxEIH0gZnJvbSAnLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi93b3JsZHdpZGUuanMnO1xuXG4vKiogUHJlZml4IGZvciBsb2dnaW5nIHN0cmluZ3MgKi9cbmNvbnN0IFBSRUZJWCA9ICdTZW50cnkgTG9nZ2VyICc7XG5cbmNvbnN0IENPTlNPTEVfTEVWRUxTID0gW1xuICAnZGVidWcnLFxuICAnaW5mbycsXG4gICd3YXJuJyxcbiAgJ2Vycm9yJyxcbiAgJ2xvZycsXG4gICdhc3NlcnQnLFxuICAndHJhY2UnLFxuXSA7XG5cbi8qKiBUaGlzIG1heSBiZSBtdXRhdGVkIGJ5IHRoZSBjb25zb2xlIGluc3RydW1lbnRhdGlvbi4gKi9cbmNvbnN0IG9yaWdpbmFsQ29uc29sZU1ldGhvZHNcblxuID0ge307XG5cbi8qKiBKU0RvYyAqL1xuXG4vKipcbiAqIFRlbXBvcmFyaWx5IGRpc2FibGUgc2VudHJ5IGNvbnNvbGUgaW5zdHJ1bWVudGF0aW9ucy5cbiAqXG4gKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIHJ1biBhZ2FpbnN0IHRoZSBvcmlnaW5hbCBgY29uc29sZWAgbWVzc2FnZXNcbiAqIEByZXR1cm5zIFRoZSByZXN1bHRzIG9mIHRoZSBjYWxsYmFja1xuICovXG5mdW5jdGlvbiBjb25zb2xlU2FuZGJveChjYWxsYmFjaykge1xuICBpZiAoISgnY29uc29sZScgaW4gR0xPQkFMX09CSikpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIGNvbnN0IGNvbnNvbGUgPSBHTE9CQUxfT0JKLmNvbnNvbGUgO1xuICBjb25zdCB3cmFwcGVkRnVuY3MgPSB7fTtcblxuICBjb25zdCB3cmFwcGVkTGV2ZWxzID0gT2JqZWN0LmtleXMob3JpZ2luYWxDb25zb2xlTWV0aG9kcykgO1xuXG4gIC8vIFJlc3RvcmUgYWxsIHdyYXBwZWQgY29uc29sZSBtZXRob2RzXG4gIHdyYXBwZWRMZXZlbHMuZm9yRWFjaChsZXZlbCA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxDb25zb2xlTWV0aG9kID0gb3JpZ2luYWxDb25zb2xlTWV0aG9kc1tsZXZlbF0gO1xuICAgIHdyYXBwZWRGdW5jc1tsZXZlbF0gPSBjb25zb2xlW2xldmVsXSA7XG4gICAgY29uc29sZVtsZXZlbF0gPSBvcmlnaW5hbENvbnNvbGVNZXRob2Q7XG4gIH0pO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgLy8gUmV2ZXJ0IHJlc3RvcmF0aW9uIHRvIHdyYXBwZWQgc3RhdGVcbiAgICB3cmFwcGVkTGV2ZWxzLmZvckVhY2gobGV2ZWwgPT4ge1xuICAgICAgY29uc29sZVtsZXZlbF0gPSB3cmFwcGVkRnVuY3NbbGV2ZWxdIDtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlTG9nZ2VyKCkge1xuICBsZXQgZW5hYmxlZCA9IGZhbHNlO1xuICBjb25zdCBsb2dnZXIgPSB7XG4gICAgZW5hYmxlOiAoKSA9PiB7XG4gICAgICBlbmFibGVkID0gdHJ1ZTtcbiAgICB9LFxuICAgIGRpc2FibGU6ICgpID0+IHtcbiAgICAgIGVuYWJsZWQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGlzRW5hYmxlZDogKCkgPT4gZW5hYmxlZCxcbiAgfTtcblxuICBpZiAoREVCVUdfQlVJTEQpIHtcbiAgICBDT05TT0xFX0xFVkVMUy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgIGxvZ2dlcltuYW1lXSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgICAgICAgR0xPQkFMX09CSi5jb25zb2xlW25hbWVdKGAke1BSRUZJWH1bJHtuYW1lfV06YCwgLi4uYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgQ09OU09MRV9MRVZFTFMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIGxvZ2dlcltuYW1lXSA9ICgpID0+IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBsb2dnZXIgO1xufVxuXG5jb25zdCBsb2dnZXIgPSBtYWtlTG9nZ2VyKCk7XG5cbmV4cG9ydCB7IENPTlNPTEVfTEVWRUxTLCBjb25zb2xlU2FuZGJveCwgbG9nZ2VyLCBvcmlnaW5hbENvbnNvbGVNZXRob2RzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwXG4iXSwibmFtZXMiOlsiREVCVUdfQlVJTEQiLCJHTE9CQUxfT0JKIiwiUFJFRklYIiwiQ09OU09MRV9MRVZFTFMiLCJvcmlnaW5hbENvbnNvbGVNZXRob2RzIiwiY29uc29sZVNhbmRib3giLCJjYWxsYmFjayIsImNvbnNvbGUiLCJ3cmFwcGVkRnVuY3MiLCJ3cmFwcGVkTGV2ZWxzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJsZXZlbCIsIm9yaWdpbmFsQ29uc29sZU1ldGhvZCIsIm1ha2VMb2dnZXIiLCJlbmFibGVkIiwibG9nZ2VyIiwiZW5hYmxlIiwiZGlzYWJsZSIsImlzRW5hYmxlZCIsIm5hbWUiLCJhcmdzIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/memo.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/memo.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoBuilder: () => (/* binding */ memoBuilder)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */ /* eslint-disable @typescript-eslint/no-explicit-any */ /**\n * Helper to decycle json objects\n */ function memoBuilder() {\n    const hasWeakSet = typeof WeakSet === \"function\";\n    const inner = hasWeakSet ? new WeakSet() : [];\n    function memoize(obj) {\n        if (hasWeakSet) {\n            if (inner.has(obj)) {\n                return true;\n            }\n            inner.add(obj);\n            return false;\n        }\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let i = 0; i < inner.length; i++){\n            const value = inner[i];\n            if (value === obj) {\n                return true;\n            }\n        }\n        inner.push(obj);\n        return false;\n    }\n    function unmemoize(obj) {\n        if (hasWeakSet) {\n            inner.delete(obj);\n        } else {\n            for(let i = 0; i < inner.length; i++){\n                if (inner[i] === obj) {\n                    inner.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }\n    return [\n        memoize,\n        unmemoize\n    ];\n}\n //# sourceMappingURL=memo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbWVtby5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsNkRBQTZELEdBQzdELHFEQUFxRCxHQUVyRDs7Q0FFQyxHQUNELFNBQVNBO0lBQ1AsTUFBTUMsYUFBYSxPQUFPQyxZQUFZO0lBQ3RDLE1BQU1DLFFBQVFGLGFBQWEsSUFBSUMsWUFBWSxFQUFFO0lBQzdDLFNBQVNFLFFBQVFDLEdBQUc7UUFDbEIsSUFBSUosWUFBWTtZQUNkLElBQUlFLE1BQU1HLEdBQUcsQ0FBQ0QsTUFBTTtnQkFDbEIsT0FBTztZQUNUO1lBQ0FGLE1BQU1JLEdBQUcsQ0FBQ0Y7WUFDVixPQUFPO1FBQ1Q7UUFDQSw0REFBNEQ7UUFDNUQsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlMLE1BQU1NLE1BQU0sRUFBRUQsSUFBSztZQUNyQyxNQUFNRSxRQUFRUCxLQUFLLENBQUNLLEVBQUU7WUFDdEIsSUFBSUUsVUFBVUwsS0FBSztnQkFDakIsT0FBTztZQUNUO1FBQ0Y7UUFDQUYsTUFBTVEsSUFBSSxDQUFDTjtRQUNYLE9BQU87SUFDVDtJQUVBLFNBQVNPLFVBQVVQLEdBQUc7UUFDcEIsSUFBSUosWUFBWTtZQUNkRSxNQUFNVSxNQUFNLENBQUNSO1FBQ2YsT0FBTztZQUNMLElBQUssSUFBSUcsSUFBSSxHQUFHQSxJQUFJTCxNQUFNTSxNQUFNLEVBQUVELElBQUs7Z0JBQ3JDLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLSCxLQUFLO29CQUNwQkYsTUFBTVcsTUFBTSxDQUFDTixHQUFHO29CQUNoQjtnQkFDRjtZQUNGO1FBQ0Y7SUFDRjtJQUNBLE9BQU87UUFBQ0o7UUFBU1E7S0FBVTtBQUM3QjtBQUV1QixDQUN2QixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnJhbGluay13ZWIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbWVtby5qcz9jZGQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuXG4vKipcbiAqIEhlbHBlciB0byBkZWN5Y2xlIGpzb24gb2JqZWN0c1xuICovXG5mdW5jdGlvbiBtZW1vQnVpbGRlcigpIHtcbiAgY29uc3QgaGFzV2Vha1NldCA9IHR5cGVvZiBXZWFrU2V0ID09PSAnZnVuY3Rpb24nO1xuICBjb25zdCBpbm5lciA9IGhhc1dlYWtTZXQgPyBuZXcgV2Vha1NldCgpIDogW107XG4gIGZ1bmN0aW9uIG1lbW9pemUob2JqKSB7XG4gICAgaWYgKGhhc1dlYWtTZXQpIHtcbiAgICAgIGlmIChpbm5lci5oYXMob2JqKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlubmVyLmFkZChvYmopO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1mb3Itb2ZcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlubmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGlubmVyW2ldO1xuICAgICAgaWYgKHZhbHVlID09PSBvYmopIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlubmVyLnB1c2gob2JqKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiB1bm1lbW9pemUob2JqKSB7XG4gICAgaWYgKGhhc1dlYWtTZXQpIHtcbiAgICAgIGlubmVyLmRlbGV0ZShvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlubmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpbm5lcltpXSA9PT0gb2JqKSB7XG4gICAgICAgICAgaW5uZXIuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBbbWVtb2l6ZSwgdW5tZW1vaXplXTtcbn1cblxuZXhwb3J0IHsgbWVtb0J1aWxkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbW8uanMubWFwXG4iXSwibmFtZXMiOlsibWVtb0J1aWxkZXIiLCJoYXNXZWFrU2V0IiwiV2Vha1NldCIsImlubmVyIiwibWVtb2l6ZSIsIm9iaiIsImhhcyIsImFkZCIsImkiLCJsZW5ndGgiLCJ2YWx1ZSIsInB1c2giLCJ1bm1lbW9pemUiLCJkZWxldGUiLCJzcGxpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/memo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/misc.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/misc.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addContextToFrame: () => (/* binding */ addContextToFrame),\n/* harmony export */   addExceptionMechanism: () => (/* binding */ addExceptionMechanism),\n/* harmony export */   addExceptionTypeValue: () => (/* binding */ addExceptionTypeValue),\n/* harmony export */   arrayify: () => (/* binding */ arrayify),\n/* harmony export */   checkOrSetAlreadyCaught: () => (/* binding */ checkOrSetAlreadyCaught),\n/* harmony export */   getEventDescription: () => (/* binding */ getEventDescription),\n/* harmony export */   parseSemver: () => (/* binding */ parseSemver),\n/* harmony export */   uuid4: () => (/* binding */ uuid4)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/utils/esm/string.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */ function uuid4() {\n    const gbl = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n    const crypto = gbl.crypto || gbl.msCrypto;\n    let getRandomByte = ()=>Math.random() * 16;\n    try {\n        if (crypto && crypto.randomUUID) {\n            return crypto.randomUUID().replace(/-/g, \"\");\n        }\n        if (crypto && crypto.getRandomValues) {\n            getRandomByte = ()=>{\n                // crypto.getRandomValues might return undefined instead of the typed array\n                // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n                // However, `typedArray` is still filled in-place.\n                // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n                const typedArray = new Uint8Array(1);\n                crypto.getRandomValues(typedArray);\n                return typedArray[0];\n            };\n        }\n    } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n    }\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n    // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n    return ([\n        1e7\n    ] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, (c)=>// eslint-disable-next-line no-bitwise\n        (c ^ (getRandomByte() & 15) >> c / 4).toString(16));\n}\nfunction getFirstException(event) {\n    return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */ function getEventDescription(event) {\n    const { message, event_id: eventId } = event;\n    if (message) {\n        return message;\n    }\n    const firstException = getFirstException(event);\n    if (firstException) {\n        if (firstException.type && firstException.value) {\n            return `${firstException.type}: ${firstException.value}`;\n        }\n        return firstException.type || firstException.value || eventId || \"<unknown>\";\n    }\n    return eventId || \"<unknown>\";\n}\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */ function addExceptionTypeValue(event, value, type) {\n    const exception = event.exception = event.exception || {};\n    const values = exception.values = exception.values || [];\n    const firstException = values[0] = values[0] || {};\n    if (!firstException.value) {\n        firstException.value = value || \"\";\n    }\n    if (!firstException.type) {\n        firstException.type = type || \"Error\";\n    }\n}\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */ function addExceptionMechanism(event, newMechanism) {\n    const firstException = getFirstException(event);\n    if (!firstException) {\n        return;\n    }\n    const defaultMechanism = {\n        type: \"generic\",\n        handled: true\n    };\n    const currentMechanism = firstException.mechanism;\n    firstException.mechanism = {\n        ...defaultMechanism,\n        ...currentMechanism,\n        ...newMechanism\n    };\n    if (newMechanism && \"data\" in newMechanism) {\n        const mergedData = {\n            ...currentMechanism && currentMechanism.data,\n            ...newMechanism.data\n        };\n        firstException.mechanism.data = mergedData;\n    }\n}\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n/**\n * Represents Semantic Versioning object\n */ /**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */ function parseSemver(input) {\n    const match = input.match(SEMVER_REGEXP) || [];\n    const major = parseInt(match[1], 10);\n    const minor = parseInt(match[2], 10);\n    const patch = parseInt(match[3], 10);\n    return {\n        buildmetadata: match[5],\n        major: isNaN(major) ? undefined : major,\n        minor: isNaN(minor) ? undefined : minor,\n        patch: isNaN(patch) ? undefined : patch,\n        prerelease: match[4]\n    };\n}\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */ function addContextToFrame(lines, frame, linesOfContext = 5) {\n    // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n    if (frame.lineno === undefined) {\n        return;\n    }\n    const maxLines = lines.length;\n    const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n    frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n    frame.context_line = (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n    frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n}\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */ function checkOrSetAlreadyCaught(exception) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (exception && exception.__sentry_captured__) {\n        return true;\n    }\n    try {\n        // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n        // `ExtraErrorData` integration\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(exception, \"__sentry_captured__\", true);\n    } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n    }\n    return false;\n}\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */ function arrayify(maybeArray) {\n    return Array.isArray(maybeArray) ? maybeArray : [\n        maybeArray\n    ];\n}\n //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/misc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/node-stack-trace.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/node-stack-trace.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filenameIsInApp: () => (/* binding */ filenameIsInApp),\n/* harmony export */   node: () => (/* binding */ node)\n/* harmony export */ });\n/**\n * Does this filename look like it's part of the app code?\n */ function filenameIsInApp(filename, isNative = false) {\n    const isInternal = isNative || filename && // It's not internal if it's an absolute linux path\n    !filename.startsWith(\"/\") && // It's not internal if it's an absolute windows path\n    !filename.match(/^[A-Z]:/) && // It's not internal if the path is starting with a dot\n    !filename.startsWith(\".\") && // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n    !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//); // Schema from: https://stackoverflow.com/a/3641782\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    return !isInternal && filename !== undefined && !filename.includes(\"node_modules/\");\n}\n/** Node Stack line parser */ // eslint-disable-next-line complexity\nfunction node(getModule) {\n    const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n    const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n    // eslint-disable-next-line complexity\n    return (line)=>{\n        const lineMatch = line.match(FULL_MATCH);\n        if (lineMatch) {\n            let object;\n            let method;\n            let functionName;\n            let typeName;\n            let methodName;\n            if (lineMatch[1]) {\n                functionName = lineMatch[1];\n                let methodStart = functionName.lastIndexOf(\".\");\n                if (functionName[methodStart - 1] === \".\") {\n                    methodStart--;\n                }\n                if (methodStart > 0) {\n                    object = functionName.slice(0, methodStart);\n                    method = functionName.slice(methodStart + 1);\n                    const objectEnd = object.indexOf(\".Module\");\n                    if (objectEnd > 0) {\n                        functionName = functionName.slice(objectEnd + 1);\n                        object = object.slice(0, objectEnd);\n                    }\n                }\n                typeName = undefined;\n            }\n            if (method) {\n                typeName = object;\n                methodName = method;\n            }\n            if (method === \"<anonymous>\") {\n                methodName = undefined;\n                functionName = undefined;\n            }\n            if (functionName === undefined) {\n                methodName = methodName || \"<anonymous>\";\n                functionName = typeName ? `${typeName}.${methodName}` : methodName;\n            }\n            let filename = lineMatch[2] && lineMatch[2].startsWith(\"file://\") ? lineMatch[2].slice(7) : lineMatch[2];\n            const isNative = lineMatch[5] === \"native\";\n            // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n            if (filename && filename.match(/\\/[A-Z]:/)) {\n                filename = filename.slice(1);\n            }\n            if (!filename && lineMatch[5] && !isNative) {\n                filename = lineMatch[5];\n            }\n            return {\n                filename,\n                module: getModule ? getModule(filename) : undefined,\n                function: functionName,\n                lineno: parseInt(lineMatch[3], 10) || undefined,\n                colno: parseInt(lineMatch[4], 10) || undefined,\n                in_app: filenameIsInApp(filename, isNative)\n            };\n        }\n        if (line.match(FILENAME_MATCH)) {\n            return {\n                filename: line\n            };\n        }\n        return undefined;\n    };\n}\n //# sourceMappingURL=node-stack-trace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbm9kZS1zdGFjay10cmFjZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOztDQUVDLEdBQ0QsU0FBU0EsZ0JBQWdCQyxRQUFRLEVBQUVDLFdBQVcsS0FBSztJQUNqRCxNQUFNQyxhQUNKRCxZQUNDRCxZQUNDLG1EQUFtRDtJQUNuRCxDQUFDQSxTQUFTRyxVQUFVLENBQUMsUUFDckIscURBQXFEO0lBQ3JELENBQUNILFNBQVNJLEtBQUssQ0FBQyxjQUNoQix1REFBdUQ7SUFDdkQsQ0FBQ0osU0FBU0csVUFBVSxDQUFDLFFBQ3JCLDZJQUE2STtJQUM3SSxDQUFDSCxTQUFTSSxLQUFLLENBQUMscUNBQXNDLG1EQUFtRDtJQUU3RyxxRkFBcUY7SUFDckYseUVBQXlFO0lBQ3pFLHlEQUF5RDtJQUV6RCxPQUFPLENBQUNGLGNBQWNGLGFBQWFLLGFBQWEsQ0FBQ0wsU0FBU00sUUFBUSxDQUFDO0FBQ3JFO0FBRUEsMkJBQTJCLEdBQzNCLHNDQUFzQztBQUN0QyxTQUFTQyxLQUFLQyxTQUFTO0lBQ3JCLE1BQU1DLGlCQUFpQjtJQUN2QixNQUFNQyxhQUFhO0lBRW5CLHNDQUFzQztJQUN0QyxPQUFPLENBQUNDO1FBQ04sTUFBTUMsWUFBWUQsS0FBS1AsS0FBSyxDQUFDTTtRQUU3QixJQUFJRSxXQUFXO1lBQ2IsSUFBSUM7WUFDSixJQUFJQztZQUNKLElBQUlDO1lBQ0osSUFBSUM7WUFDSixJQUFJQztZQUVKLElBQUlMLFNBQVMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2hCRyxlQUFlSCxTQUFTLENBQUMsRUFBRTtnQkFFM0IsSUFBSU0sY0FBY0gsYUFBYUksV0FBVyxDQUFDO2dCQUMzQyxJQUFJSixZQUFZLENBQUNHLGNBQWMsRUFBRSxLQUFLLEtBQUs7b0JBQ3pDQTtnQkFDRjtnQkFFQSxJQUFJQSxjQUFjLEdBQUc7b0JBQ25CTCxTQUFTRSxhQUFhSyxLQUFLLENBQUMsR0FBR0Y7b0JBQy9CSixTQUFTQyxhQUFhSyxLQUFLLENBQUNGLGNBQWM7b0JBQzFDLE1BQU1HLFlBQVlSLE9BQU9TLE9BQU8sQ0FBQztvQkFDakMsSUFBSUQsWUFBWSxHQUFHO3dCQUNqQk4sZUFBZUEsYUFBYUssS0FBSyxDQUFDQyxZQUFZO3dCQUM5Q1IsU0FBU0EsT0FBT08sS0FBSyxDQUFDLEdBQUdDO29CQUMzQjtnQkFDRjtnQkFDQUwsV0FBV1g7WUFDYjtZQUVBLElBQUlTLFFBQVE7Z0JBQ1ZFLFdBQVdIO2dCQUNYSSxhQUFhSDtZQUNmO1lBRUEsSUFBSUEsV0FBVyxlQUFlO2dCQUM1QkcsYUFBYVo7Z0JBQ2JVLGVBQWVWO1lBQ2pCO1lBRUEsSUFBSVUsaUJBQWlCVixXQUFXO2dCQUM5QlksYUFBYUEsY0FBYztnQkFDM0JGLGVBQWVDLFdBQVcsQ0FBQyxFQUFFQSxTQUFTLENBQUMsRUFBRUMsV0FBVyxDQUFDLEdBQUdBO1lBQzFEO1lBRUEsSUFBSWpCLFdBQVdZLFNBQVMsQ0FBQyxFQUFFLElBQUlBLFNBQVMsQ0FBQyxFQUFFLENBQUNULFVBQVUsQ0FBQyxhQUFhUyxTQUFTLENBQUMsRUFBRSxDQUFDUSxLQUFLLENBQUMsS0FBS1IsU0FBUyxDQUFDLEVBQUU7WUFDeEcsTUFBTVgsV0FBV1csU0FBUyxDQUFDLEVBQUUsS0FBSztZQUVsQyxvRkFBb0Y7WUFDcEYsSUFBSVosWUFBWUEsU0FBU0ksS0FBSyxDQUFDLGFBQWE7Z0JBQzFDSixXQUFXQSxTQUFTb0IsS0FBSyxDQUFDO1lBQzVCO1lBRUEsSUFBSSxDQUFDcEIsWUFBWVksU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDWCxVQUFVO2dCQUMxQ0QsV0FBV1ksU0FBUyxDQUFDLEVBQUU7WUFDekI7WUFFQSxPQUFPO2dCQUNMWjtnQkFDQXVCLFFBQVFmLFlBQVlBLFVBQVVSLFlBQVlLO2dCQUMxQ21CLFVBQVVUO2dCQUNWVSxRQUFRQyxTQUFTZCxTQUFTLENBQUMsRUFBRSxFQUFFLE9BQU9QO2dCQUN0Q3NCLE9BQU9ELFNBQVNkLFNBQVMsQ0FBQyxFQUFFLEVBQUUsT0FBT1A7Z0JBQ3JDdUIsUUFBUTdCLGdCQUFnQkMsVUFBVUM7WUFDcEM7UUFDRjtRQUVBLElBQUlVLEtBQUtQLEtBQUssQ0FBQ0ssaUJBQWlCO1lBQzlCLE9BQU87Z0JBQ0xULFVBQVVXO1lBQ1o7UUFDRjtRQUVBLE9BQU9OO0lBQ1Q7QUFDRjtBQUVpQyxDQUNqQyw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnJhbGluay13ZWIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbm9kZS1zdGFjay10cmFjZS5qcz8wNTk4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRG9lcyB0aGlzIGZpbGVuYW1lIGxvb2sgbGlrZSBpdCdzIHBhcnQgb2YgdGhlIGFwcCBjb2RlP1xuICovXG5mdW5jdGlvbiBmaWxlbmFtZUlzSW5BcHAoZmlsZW5hbWUsIGlzTmF0aXZlID0gZmFsc2UpIHtcbiAgY29uc3QgaXNJbnRlcm5hbCA9XG4gICAgaXNOYXRpdmUgfHxcbiAgICAoZmlsZW5hbWUgJiZcbiAgICAgIC8vIEl0J3Mgbm90IGludGVybmFsIGlmIGl0J3MgYW4gYWJzb2x1dGUgbGludXggcGF0aFxuICAgICAgIWZpbGVuYW1lLnN0YXJ0c1dpdGgoJy8nKSAmJlxuICAgICAgLy8gSXQncyBub3QgaW50ZXJuYWwgaWYgaXQncyBhbiBhYnNvbHV0ZSB3aW5kb3dzIHBhdGhcbiAgICAgICFmaWxlbmFtZS5tYXRjaCgvXltBLVpdOi8pICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiB0aGUgcGF0aCBpcyBzdGFydGluZyB3aXRoIGEgZG90XG4gICAgICAhZmlsZW5hbWUuc3RhcnRzV2l0aCgnLicpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiB0aGUgZnJhbWUgaGFzIGEgcHJvdG9jb2wuIEluIG5vZGUsIHRoaXMgaXMgdXN1YWxseSB0aGUgY2FzZSBpZiB0aGUgZmlsZSBnb3QgcHJlLXByb2Nlc3NlZCB3aXRoIGEgYnVuZGxlciBsaWtlIHdlYnBhY2tcbiAgICAgICFmaWxlbmFtZS5tYXRjaCgvXlthLXpBLVpdKFthLXpBLVowLTkuXFwtK10pKjpcXC9cXC8vKSk7IC8vIFNjaGVtYSBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzY0MTc4MlxuXG4gIC8vIGluX2FwcCBpcyBhbGwgdGhhdCdzIG5vdCBhbiBpbnRlcm5hbCBOb2RlIGZ1bmN0aW9uIG9yIGEgbW9kdWxlIHdpdGhpbiBub2RlX21vZHVsZXNcbiAgLy8gbm90ZSB0aGF0IGlzTmF0aXZlIGFwcGVhcnMgdG8gcmV0dXJuIHRydWUgZXZlbiBmb3Igbm9kZSBjb3JlIGxpYnJhcmllc1xuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yYXZlbi1ub2RlL2lzc3Vlcy8xNzZcblxuICByZXR1cm4gIWlzSW50ZXJuYWwgJiYgZmlsZW5hbWUgIT09IHVuZGVmaW5lZCAmJiAhZmlsZW5hbWUuaW5jbHVkZXMoJ25vZGVfbW9kdWxlcy8nKTtcbn1cblxuLyoqIE5vZGUgU3RhY2sgbGluZSBwYXJzZXIgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBub2RlKGdldE1vZHVsZSkge1xuICBjb25zdCBGSUxFTkFNRV9NQVRDSCA9IC9eXFxzKlstXXs0LH0kLztcbiAgY29uc3QgRlVMTF9NQVRDSCA9IC9hdCAoPzphc3luYyApPyg/OiguKz8pXFxzK1xcKCk/KD86KC4rKTooXFxkKyk6KFxcZCspP3woW14pXSspKVxcKT8vO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gIHJldHVybiAobGluZSkgPT4ge1xuICAgIGNvbnN0IGxpbmVNYXRjaCA9IGxpbmUubWF0Y2goRlVMTF9NQVRDSCk7XG5cbiAgICBpZiAobGluZU1hdGNoKSB7XG4gICAgICBsZXQgb2JqZWN0O1xuICAgICAgbGV0IG1ldGhvZDtcbiAgICAgIGxldCBmdW5jdGlvbk5hbWU7XG4gICAgICBsZXQgdHlwZU5hbWU7XG4gICAgICBsZXQgbWV0aG9kTmFtZTtcblxuICAgICAgaWYgKGxpbmVNYXRjaFsxXSkge1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSBsaW5lTWF0Y2hbMV07XG5cbiAgICAgICAgbGV0IG1ldGhvZFN0YXJ0ID0gZnVuY3Rpb25OYW1lLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICAgIGlmIChmdW5jdGlvbk5hbWVbbWV0aG9kU3RhcnQgLSAxXSA9PT0gJy4nKSB7XG4gICAgICAgICAgbWV0aG9kU3RhcnQtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRob2RTdGFydCA+IDApIHtcbiAgICAgICAgICBvYmplY3QgPSBmdW5jdGlvbk5hbWUuc2xpY2UoMCwgbWV0aG9kU3RhcnQpO1xuICAgICAgICAgIG1ldGhvZCA9IGZ1bmN0aW9uTmFtZS5zbGljZShtZXRob2RTdGFydCArIDEpO1xuICAgICAgICAgIGNvbnN0IG9iamVjdEVuZCA9IG9iamVjdC5pbmRleE9mKCcuTW9kdWxlJyk7XG4gICAgICAgICAgaWYgKG9iamVjdEVuZCA+IDApIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTmFtZS5zbGljZShvYmplY3RFbmQgKyAxKTtcbiAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5zbGljZSgwLCBvYmplY3RFbmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0eXBlTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICB0eXBlTmFtZSA9IG9iamVjdDtcbiAgICAgICAgbWV0aG9kTmFtZSA9IG1ldGhvZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGhvZCA9PT0gJzxhbm9ueW1vdXM+Jykge1xuICAgICAgICBtZXRob2ROYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChmdW5jdGlvbk5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXRob2ROYW1lID0gbWV0aG9kTmFtZSB8fCAnPGFub255bW91cz4nO1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSB0eXBlTmFtZSA/IGAke3R5cGVOYW1lfS4ke21ldGhvZE5hbWV9YCA6IG1ldGhvZE5hbWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBmaWxlbmFtZSA9IGxpbmVNYXRjaFsyXSAmJiBsaW5lTWF0Y2hbMl0uc3RhcnRzV2l0aCgnZmlsZTovLycpID8gbGluZU1hdGNoWzJdLnNsaWNlKDcpIDogbGluZU1hdGNoWzJdO1xuICAgICAgY29uc3QgaXNOYXRpdmUgPSBsaW5lTWF0Y2hbNV0gPT09ICduYXRpdmUnO1xuXG4gICAgICAvLyBJZiBpdCdzIGEgV2luZG93cyBwYXRoLCB0cmltIHRoZSBsZWFkaW5nIHNsYXNoIHNvIHRoYXQgYC9DOi9mb29gIGJlY29tZXMgYEM6L2Zvb2BcbiAgICAgIGlmIChmaWxlbmFtZSAmJiBmaWxlbmFtZS5tYXRjaCgvXFwvW0EtWl06LykpIHtcbiAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZS5zbGljZSgxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmaWxlbmFtZSAmJiBsaW5lTWF0Y2hbNV0gJiYgIWlzTmF0aXZlKSB7XG4gICAgICAgIGZpbGVuYW1lID0gbGluZU1hdGNoWzVdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxlbmFtZSxcbiAgICAgICAgbW9kdWxlOiBnZXRNb2R1bGUgPyBnZXRNb2R1bGUoZmlsZW5hbWUpIDogdW5kZWZpbmVkLFxuICAgICAgICBmdW5jdGlvbjogZnVuY3Rpb25OYW1lLFxuICAgICAgICBsaW5lbm86IHBhcnNlSW50KGxpbmVNYXRjaFszXSwgMTApIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgY29sbm86IHBhcnNlSW50KGxpbmVNYXRjaFs0XSwgMTApIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgaW5fYXBwOiBmaWxlbmFtZUlzSW5BcHAoZmlsZW5hbWUsIGlzTmF0aXZlKSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGxpbmUubWF0Y2goRklMRU5BTUVfTUFUQ0gpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxlbmFtZTogbGluZSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IHsgZmlsZW5hbWVJc0luQXBwLCBub2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLXN0YWNrLXRyYWNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbImZpbGVuYW1lSXNJbkFwcCIsImZpbGVuYW1lIiwiaXNOYXRpdmUiLCJpc0ludGVybmFsIiwic3RhcnRzV2l0aCIsIm1hdGNoIiwidW5kZWZpbmVkIiwiaW5jbHVkZXMiLCJub2RlIiwiZ2V0TW9kdWxlIiwiRklMRU5BTUVfTUFUQ0giLCJGVUxMX01BVENIIiwibGluZSIsImxpbmVNYXRjaCIsIm9iamVjdCIsIm1ldGhvZCIsImZ1bmN0aW9uTmFtZSIsInR5cGVOYW1lIiwibWV0aG9kTmFtZSIsIm1ldGhvZFN0YXJ0IiwibGFzdEluZGV4T2YiLCJzbGljZSIsIm9iamVjdEVuZCIsImluZGV4T2YiLCJtb2R1bGUiLCJmdW5jdGlvbiIsImxpbmVubyIsInBhcnNlSW50IiwiY29sbm8iLCJpbl9hcHAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/node-stack-trace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/normalize.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/normalize.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeToSize: () => (/* binding */ normalizeToSize),\n/* harmony export */   normalizeUrlToBase: () => (/* binding */ normalizeUrlToBase),\n/* harmony export */   walk: () => (/* binding */ visit)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _memo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./memo.js */ \"(ssr)/./node_modules/@sentry/utils/esm/memo.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stacktrace.js */ \"(ssr)/./node_modules/@sentry/utils/esm/stacktrace.js\");\n\n\n\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n    try {\n        // since we're at the outermost level, we don't provide a key\n        return visit(\"\", input, depth, maxProperties);\n    } catch (err) {\n        return {\n            ERROR: `**non-serializable** (${err})`\n        };\n    }\n}\n/** JSDoc */ function normalizeToSize(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobject, // Default Node.js REPL depth\ndepth = 3, // 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize = 100 * 1024) {\n    const normalized = normalize(object, depth);\n    if (jsonSize(normalized) > maxSize) {\n        return normalizeToSize(object, depth - 1, maxSize);\n    }\n    return normalized;\n}\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */ function visit(key, value, depth = +Infinity, maxProperties = +Infinity, memo = (0,_memo_js__WEBPACK_IMPORTED_MODULE_0__.memoBuilder)()) {\n    const [memoize, unmemoize] = memo;\n    // Get the simple cases out of the way first\n    if (value == null || // this matches null and undefined -> eqeq not eqeqeq\n    [\n        \"number\",\n        \"boolean\",\n        \"string\"\n    ].includes(typeof value) && !(0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isNaN)(value)) {\n        return value;\n    }\n    const stringified = stringifyValue(key, value);\n    // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n    // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n    if (!stringified.startsWith(\"[object \")) {\n        return stringified;\n    }\n    // From here on, we can assert that `value` is either an object or an array.\n    // Do not normalize objects that we know have already been normalized. As a general rule, the\n    // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n    // have already been normalized.\n    if (value[\"__sentry_skip_normalization__\"]) {\n        return value;\n    }\n    // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n    // We keep a certain amount of depth.\n    // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n    const remainingDepth = typeof value[\"__sentry_override_normalization_depth__\"] === \"number\" ? value[\"__sentry_override_normalization_depth__\"] : depth;\n    // We're also done if we've reached the max depth\n    if (remainingDepth === 0) {\n        // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n        return stringified.replace(\"object \", \"\");\n    }\n    // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n    if (memoize(value)) {\n        return \"[Circular ~]\";\n    }\n    // If the value has a `toJSON` method, we call it to extract more information\n    const valueWithToJSON = value;\n    if (valueWithToJSON && typeof valueWithToJSON.toJSON === \"function\") {\n        try {\n            const jsonValue = valueWithToJSON.toJSON();\n            // We need to normalize the return value of `.toJSON()` in case it has circular references\n            return visit(\"\", jsonValue, remainingDepth - 1, maxProperties, memo);\n        } catch (err) {\n        // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n        }\n    }\n    // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n    // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n    // property/entry, and keep track of the number of items we add to it.\n    const normalized = Array.isArray(value) ? [] : {};\n    let numAdded = 0;\n    // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n    // properties are non-enumerable and otherwise would get missed.\n    const visitable = (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.convertToPlainObject)(value);\n    for(const visitKey in visitable){\n        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n        if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n            continue;\n        }\n        if (numAdded >= maxProperties) {\n            normalized[visitKey] = \"[MaxProperties ~]\";\n            break;\n        }\n        // Recursively visit all the child nodes\n        const visitValue = visitable[visitKey];\n        normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n        numAdded++;\n    }\n    // Once we've visited all the branches, remove the parent from memo storage\n    unmemoize(value);\n    // Return accumulated values\n    return normalized;\n}\n/* eslint-disable complexity */ /**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */ function stringifyValue(key, // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n    try {\n        if (key === \"domain\" && value && typeof value === \"object\" && value._events) {\n            return \"[Domain]\";\n        }\n        if (key === \"domainEmitter\") {\n            return \"[DomainEmitter]\";\n        }\n        // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n        // which won't throw if they are not present.\n        if (typeof global !== \"undefined\" && value === global) {\n            return \"[Global]\";\n        }\n        // eslint-disable-next-line no-restricted-globals\n        if (false) {}\n        // eslint-disable-next-line no-restricted-globals\n        if (typeof document !== \"undefined\" && value === document) {\n            return \"[Document]\";\n        }\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isVueViewModel)(value)) {\n            return \"[VueViewModel]\";\n        }\n        // React's SyntheticEvent thingy\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isSyntheticEvent)(value)) {\n            return \"[SyntheticEvent]\";\n        }\n        if (typeof value === \"number\" && value !== value) {\n            return \"[NaN]\";\n        }\n        if (typeof value === \"function\") {\n            return `[Function: ${(0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(value)}]`;\n        }\n        if (typeof value === \"symbol\") {\n            return `[${String(value)}]`;\n        }\n        // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n        if (typeof value === \"bigint\") {\n            return `[BigInt: ${String(value)}]`;\n        }\n        // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n        // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n        // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n        // we can make sure that only plain objects come out that way.\n        const objName = getConstructorName(value);\n        // Handle HTML Elements\n        if (/^HTML(\\w*)Element$/.test(objName)) {\n            return `[HTMLElement: ${objName}]`;\n        }\n        return `[object ${objName}]`;\n    } catch (err) {\n        return `**non-serializable** (${err})`;\n    }\n}\n/* eslint-enable complexity */ function getConstructorName(value) {\n    const prototype = Object.getPrototypeOf(value);\n    return prototype ? prototype.constructor.name : \"null prototype\";\n}\n/** Calculates bytes size of input string */ function utf8Length(value) {\n    // eslint-disable-next-line no-bitwise\n    return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n    return utf8Length(JSON.stringify(value));\n}\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */ function normalizeUrlToBase(url, basePath) {\n    const escapedBase = basePath// Backslash to forward\n    .replace(/\\\\/g, \"/\")// Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    let newUrl = url;\n    try {\n        newUrl = decodeURI(url);\n    } catch (_Oo) {\n    // Sometime this breaks\n    }\n    return newUrl.replace(/\\\\/g, \"/\").replace(/webpack:\\/?/g, \"\") // Remove intermediate base path\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n    .replace(new RegExp(`(file://)?/*${escapedBase}/*`, \"ig\"), \"app:///\");\n}\n //# sourceMappingURL=normalize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/normalize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/object.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/object.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNonEnumerableProperty: () => (/* binding */ addNonEnumerableProperty),\n/* harmony export */   convertToPlainObject: () => (/* binding */ convertToPlainObject),\n/* harmony export */   dropUndefinedKeys: () => (/* binding */ dropUndefinedKeys),\n/* harmony export */   extractExceptionKeysForMessage: () => (/* binding */ extractExceptionKeysForMessage),\n/* harmony export */   fill: () => (/* binding */ fill),\n/* harmony export */   getOriginalFunction: () => (/* binding */ getOriginalFunction),\n/* harmony export */   markFunctionWrapped: () => (/* binding */ markFunctionWrapped),\n/* harmony export */   objectify: () => (/* binding */ objectify),\n/* harmony export */   urlEncode: () => (/* binding */ urlEncode)\n/* harmony export */ });\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./browser.js */ \"(ssr)/./node_modules/@sentry/utils/esm/browser.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/utils/esm/string.js\");\n\n\n\n\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */ function fill(source, name, replacementFactory) {\n    if (!(name in source)) {\n        return;\n    }\n    const original = source[name];\n    const wrapped = replacementFactory(original);\n    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n    // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n    if (typeof wrapped === \"function\") {\n        markFunctionWrapped(wrapped, original);\n    }\n    source[name] = wrapped;\n}\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */ function addNonEnumerableProperty(obj, name, value) {\n    try {\n        Object.defineProperty(obj, name, {\n            // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n            value: value,\n            writable: true,\n            configurable: true\n        });\n    } catch (o_O) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n    }\n}\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */ function markFunctionWrapped(wrapped, original) {\n    try {\n        const proto = original.prototype || {};\n        wrapped.prototype = original.prototype = proto;\n        addNonEnumerableProperty(wrapped, \"__sentry_original__\", original);\n    } catch (o_O) {} // eslint-disable-line no-empty\n}\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */ function getOriginalFunction(func) {\n    return func.__sentry_original__;\n}\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */ function urlEncode(object) {\n    return Object.keys(object).map((key)=>`${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`).join(\"&\");\n}\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */ function convertToPlainObject(value) {\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isError)(value)) {\n        return {\n            message: value.message,\n            name: value.name,\n            stack: value.stack,\n            ...getOwnProperties(value)\n        };\n    } else if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isEvent)(value)) {\n        const newObj = {\n            type: value.type,\n            target: serializeEventTarget(value.target),\n            currentTarget: serializeEventTarget(value.currentTarget),\n            ...getOwnProperties(value)\n        };\n        if (typeof CustomEvent !== \"undefined\" && (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isInstanceOf)(value, CustomEvent)) {\n            newObj.detail = value.detail;\n        }\n        return newObj;\n    } else {\n        return value;\n    }\n}\n/** Creates a string representation of the target of an `Event` object */ function serializeEventTarget(target) {\n    try {\n        return (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(target) ? (0,_browser_js__WEBPACK_IMPORTED_MODULE_3__.htmlTreeAsString)(target) : Object.prototype.toString.call(target);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/** Filters out all but an object's own properties */ function getOwnProperties(obj) {\n    if (typeof obj === \"object\" && obj !== null) {\n        const extractedProps = {};\n        for(const property in obj){\n            if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                extractedProps[property] = obj[property];\n            }\n        }\n        return extractedProps;\n    } else {\n        return {};\n    }\n}\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */ function extractExceptionKeysForMessage(exception, maxLength = 40) {\n    const keys = Object.keys(convertToPlainObject(exception));\n    keys.sort();\n    if (!keys.length) {\n        return \"[object has no keys]\";\n    }\n    if (keys[0].length >= maxLength) {\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(keys[0], maxLength);\n    }\n    for(let includedKeys = keys.length; includedKeys > 0; includedKeys--){\n        const serialized = keys.slice(0, includedKeys).join(\", \");\n        if (serialized.length > maxLength) {\n            continue;\n        }\n        if (includedKeys === keys.length) {\n            return serialized;\n        }\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(serialized, maxLength);\n    }\n    return \"\";\n}\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */ function dropUndefinedKeys(inputValue) {\n    // This map keeps track of what already visited nodes map to.\n    // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n    // references as the input object.\n    const memoizationMap = new Map();\n    // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n    return _dropUndefinedKeys(inputValue, memoizationMap);\n}\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n    if (isPojo(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = {};\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        for (const key of Object.keys(inputValue)){\n            if (typeof inputValue[key] !== \"undefined\") {\n                returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n            }\n        }\n        return returnValue;\n    }\n    if (Array.isArray(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = [];\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        inputValue.forEach((item)=>{\n            returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n        });\n        return returnValue;\n    }\n    return inputValue;\n}\nfunction isPojo(input) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(input)) {\n        return false;\n    }\n    try {\n        const name = Object.getPrototypeOf(input).constructor.name;\n        return !name || name === \"Object\";\n    } catch (e) {\n        return true;\n    }\n}\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */ function objectify(wat) {\n    let objectified;\n    switch(true){\n        case wat === undefined || wat === null:\n            objectified = new String(wat);\n            break;\n        // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n        // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n        // an object in order to wrap it.\n        case typeof wat === \"symbol\" || typeof wat === \"bigint\":\n            objectified = Object(wat);\n            break;\n        // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n        case (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPrimitive)(wat):\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            objectified = new wat.constructor(wat);\n            break;\n        // by process of elimination, at this point we know that `wat` must already be an object\n        default:\n            objectified = wat;\n            break;\n    }\n    return objectified;\n}\n //# sourceMappingURL=object.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/stacktrace.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/stacktrace.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStackParser: () => (/* binding */ createStackParser),\n/* harmony export */   filenameIsInApp: () => (/* reexport safe */ _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__.filenameIsInApp),\n/* harmony export */   getFunctionName: () => (/* binding */ getFunctionName),\n/* harmony export */   nodeStackLineParser: () => (/* binding */ nodeStackLineParser),\n/* harmony export */   stackParserFromStackParserOptions: () => (/* binding */ stackParserFromStackParserOptions),\n/* harmony export */   stripSentryFramesAndReverse: () => (/* binding */ stripSentryFramesAndReverse)\n/* harmony export */ });\n/* harmony import */ var _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node-stack-trace.js */ \"(ssr)/./node_modules/@sentry/utils/esm/node-stack-trace.js\");\n\n\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */ function createStackParser(...parsers) {\n    const sortedParsers = parsers.sort((a, b)=>a[0] - b[0]).map((p)=>p[1]);\n    return (stack, skipFirst = 0)=>{\n        const frames = [];\n        const lines = stack.split(\"\\n\");\n        for(let i = skipFirst; i < lines.length; i++){\n            const line = lines[i];\n            // Ignore lines over 1kb as they are unlikely to be stack frames.\n            // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n            // input size. Huge strings can result in hangs/Denial of Service:\n            // https://github.com/getsentry/sentry-javascript/issues/2286\n            if (line.length > 1024) {\n                continue;\n            }\n            // https://github.com/getsentry/sentry-javascript/issues/5459\n            // Remove webpack (error: *) wrappers\n            const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, \"$1\") : line;\n            // https://github.com/getsentry/sentry-javascript/issues/7813\n            // Skip Error: lines\n            if (cleanedLine.match(/\\S*Error: /)) {\n                continue;\n            }\n            for (const parser of sortedParsers){\n                const frame = parser(cleanedLine);\n                if (frame) {\n                    frames.push(frame);\n                    break;\n                }\n            }\n            if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n                break;\n            }\n        }\n        return stripSentryFramesAndReverse(frames);\n    };\n}\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */ function stackParserFromStackParserOptions(stackParser) {\n    if (Array.isArray(stackParser)) {\n        return createStackParser(...stackParser);\n    }\n    return stackParser;\n}\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */ function stripSentryFramesAndReverse(stack) {\n    if (!stack.length) {\n        return [];\n    }\n    const localStack = Array.from(stack);\n    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n    if (/sentryWrapped/.test(localStack[localStack.length - 1].function || \"\")) {\n        localStack.pop();\n    }\n    // Reversing in the middle of the procedure allows us to just pop the values off the stack\n    localStack.reverse();\n    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n    if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || \"\")) {\n        localStack.pop();\n        // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n        // is produced within the hub itself, making it:\n        //\n        //   Sentry.captureException()\n        //   getCurrentHub().captureException()\n        //\n        // instead of just the top `Sentry` call itself.\n        // This forces us to possibly strip an additional frame in the exact same was as above.\n        if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || \"\")) {\n            localStack.pop();\n        }\n    }\n    return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map((frame)=>({\n            ...frame,\n            filename: frame.filename || localStack[localStack.length - 1].filename,\n            function: frame.function || \"?\"\n        }));\n}\nconst defaultFunctionName = \"<anonymous>\";\n/**\n * Safely extract function name from itself\n */ function getFunctionName(fn) {\n    try {\n        if (!fn || typeof fn !== \"function\") {\n            return defaultFunctionName;\n        }\n        return fn.name || defaultFunctionName;\n    } catch (e) {\n        // Just accessing custom props in some Selenium environments\n        // can cause a \"Permission denied\" exception (see raven-js#495).\n        return defaultFunctionName;\n    }\n}\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */ function nodeStackLineParser(getModule) {\n    return [\n        90,\n        (0,_node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__.node)(getModule)\n    ];\n}\n //# sourceMappingURL=stacktrace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/stacktrace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/string.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/string.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMatchingPattern: () => (/* binding */ isMatchingPattern),\n/* harmony export */   safeJoin: () => (/* binding */ safeJoin),\n/* harmony export */   snipLine: () => (/* binding */ snipLine),\n/* harmony export */   stringMatchesSomePattern: () => (/* binding */ stringMatchesSomePattern),\n/* harmony export */   truncate: () => (/* binding */ truncate)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */ function truncate(str, max = 0) {\n    if (typeof str !== \"string\" || max === 0) {\n        return str;\n    }\n    return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */ function snipLine(line, colno) {\n    let newLine = line;\n    const lineLength = newLine.length;\n    if (lineLength <= 150) {\n        return newLine;\n    }\n    if (colno > lineLength) {\n        // eslint-disable-next-line no-param-reassign\n        colno = lineLength;\n    }\n    let start = Math.max(colno - 60, 0);\n    if (start < 5) {\n        start = 0;\n    }\n    let end = Math.min(start + 140, lineLength);\n    if (end > lineLength - 5) {\n        end = lineLength;\n    }\n    if (end === lineLength) {\n        start = Math.max(end - 140, 0);\n    }\n    newLine = newLine.slice(start, end);\n    if (start > 0) {\n        newLine = `'{snip} ${newLine}`;\n    }\n    if (end < lineLength) {\n        newLine += \" {snip}\";\n    }\n    return newLine;\n}\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction safeJoin(input, delimiter) {\n    if (!Array.isArray(input)) {\n        return \"\";\n    }\n    const output = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for(let i = 0; i < input.length; i++){\n        const value = input[i];\n        try {\n            // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n            // console warnings. This happens when a Vue template is rendered with\n            // an undeclared variable, which we try to stringify, ultimately causing\n            // Vue to issue another warning which repeats indefinitely.\n            // see: https://github.com/getsentry/sentry-javascript/pull/8981\n            if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isVueViewModel)(value)) {\n                output.push(\"[VueViewModel]\");\n            } else {\n                output.push(String(value));\n            }\n        } catch (e) {\n            output.push(\"[value cannot be serialized]\");\n        }\n    }\n    return output.join(delimiter);\n}\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */ function isMatchingPattern(value, pattern, requireExactStringMatch = false) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {\n        return false;\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isRegExp)(pattern)) {\n        return pattern.test(value);\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(pattern)) {\n        return requireExactStringMatch ? value === pattern : value.includes(pattern);\n    }\n    return false;\n}\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */ function stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {\n    return patterns.some((pattern)=>isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n //# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/syncpromise.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/syncpromise.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SyncPromise: () => (/* binding */ SyncPromise),\n/* harmony export */   rejectedSyncPromise: () => (/* binding */ rejectedSyncPromise),\n/* harmony export */   resolvedSyncPromise: () => (/* binding */ resolvedSyncPromise)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */ /** SyncPromise internal states */ var States;\n(function(States) {\n    /** Pending */ const PENDING = 0;\n    States[States[\"PENDING\"] = PENDING] = \"PENDING\";\n    /** Resolved / OK */ const RESOLVED = 1;\n    States[States[\"RESOLVED\"] = RESOLVED] = \"RESOLVED\";\n    /** Rejected / Error */ const REJECTED = 2;\n    States[States[\"REJECTED\"] = REJECTED] = \"REJECTED\";\n})(States || (States = {}));\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */ function resolvedSyncPromise(value) {\n    return new SyncPromise((resolve)=>{\n        resolve(value);\n    });\n}\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */ function rejectedSyncPromise(reason) {\n    return new SyncPromise((_, reject)=>{\n        reject(reason);\n    });\n}\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */ class SyncPromise {\n    constructor(executor){\n        SyncPromise.prototype.__init.call(this);\n        SyncPromise.prototype.__init2.call(this);\n        SyncPromise.prototype.__init3.call(this);\n        SyncPromise.prototype.__init4.call(this);\n        this._state = States.PENDING;\n        this._handlers = [];\n        try {\n            executor(this._resolve, this._reject);\n        } catch (e) {\n            this._reject(e);\n        }\n    }\n    /** JSDoc */ then(onfulfilled, onrejected) {\n        return new SyncPromise((resolve, reject)=>{\n            this._handlers.push([\n                false,\n                (result)=>{\n                    if (!onfulfilled) {\n                        // TODO: ¯\\_(ツ)_/¯\n                        // TODO: FIXME\n                        resolve(result);\n                    } else {\n                        try {\n                            resolve(onfulfilled(result));\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }\n                },\n                (reason)=>{\n                    if (!onrejected) {\n                        reject(reason);\n                    } else {\n                        try {\n                            resolve(onrejected(reason));\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }\n                }\n            ]);\n            this._executeHandlers();\n        });\n    }\n    /** JSDoc */ catch(onrejected) {\n        return this.then((val)=>val, onrejected);\n    }\n    /** JSDoc */ finally(onfinally) {\n        return new SyncPromise((resolve, reject)=>{\n            let val;\n            let isRejected;\n            return this.then((value)=>{\n                isRejected = false;\n                val = value;\n                if (onfinally) {\n                    onfinally();\n                }\n            }, (reason)=>{\n                isRejected = true;\n                val = reason;\n                if (onfinally) {\n                    onfinally();\n                }\n            }).then(()=>{\n                if (isRejected) {\n                    reject(val);\n                    return;\n                }\n                resolve(val);\n            });\n        });\n    }\n    /** JSDoc */ __init() {\n        this._resolve = (value)=>{\n            this._setResult(States.RESOLVED, value);\n        };\n    }\n    /** JSDoc */ __init2() {\n        this._reject = (reason)=>{\n            this._setResult(States.REJECTED, reason);\n        };\n    }\n    /** JSDoc */ __init3() {\n        this._setResult = (state, value)=>{\n            if (this._state !== States.PENDING) {\n                return;\n            }\n            if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isThenable)(value)) {\n                void value.then(this._resolve, this._reject);\n                return;\n            }\n            this._state = state;\n            this._value = value;\n            this._executeHandlers();\n        };\n    }\n    /** JSDoc */ __init4() {\n        this._executeHandlers = ()=>{\n            if (this._state === States.PENDING) {\n                return;\n            }\n            const cachedHandlers = this._handlers.slice();\n            this._handlers = [];\n            cachedHandlers.forEach((handler)=>{\n                if (handler[0]) {\n                    return;\n                }\n                if (this._state === States.RESOLVED) {\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    handler[1](this._value);\n                }\n                if (this._state === States.REJECTED) {\n                    handler[2](this._value);\n                }\n                handler[0] = true;\n            });\n        };\n    }\n}\n //# sourceMappingURL=syncpromise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/syncpromise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/time.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/time.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _browserPerformanceTimeOriginMode: () => (/* binding */ _browserPerformanceTimeOriginMode),\n/* harmony export */   browserPerformanceTimeOrigin: () => (/* binding */ browserPerformanceTimeOrigin),\n/* harmony export */   dateTimestampInSeconds: () => (/* binding */ dateTimestampInSeconds),\n/* harmony export */   timestampInSeconds: () => (/* binding */ timestampInSeconds),\n/* harmony export */   timestampWithMs: () => (/* binding */ timestampWithMs)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/utils/esm/worldwide.js\");\n\nconst ONE_SECOND_IN_MS = 1000;\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */ /**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n *\n * TODO(v8): Return type should be rounded.\n */ function dateTimestampInSeconds() {\n    return Date.now() / ONE_SECOND_IN_MS;\n}\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */ function createUnixTimestampInSecondsFunc() {\n    const { performance } = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n    if (!performance || !performance.now) {\n        return dateTimestampInSeconds;\n    }\n    // Some browser and environments don't have a timeOrigin, so we fallback to\n    // using Date.now() to compute the starting time.\n    const approxStartingTimeOrigin = Date.now() - performance.now();\n    const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;\n    // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n    // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n    //\n    // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n    // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n    // correct for this.\n    // See: https://github.com/getsentry/sentry-javascript/issues/2590\n    // See: https://github.com/mdn/content/issues/4713\n    // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n    return ()=>{\n        return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n    };\n}\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */ const timestampInSeconds = createUnixTimestampInSecondsFunc();\n/**\n * Re-exported with an old name for backwards-compatibility.\n * TODO (v8): Remove this\n *\n * @deprecated Use `timestampInSeconds` instead.\n */ const timestampWithMs = timestampInSeconds;\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */ let _browserPerformanceTimeOriginMode;\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */ const browserPerformanceTimeOrigin = (()=>{\n    // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n    // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n    // data as reliable if they are within a reasonable threshold of the current time.\n    const { performance } = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n    if (!performance || !performance.now) {\n        _browserPerformanceTimeOriginMode = \"none\";\n        return undefined;\n    }\n    const threshold = 3600 * 1000;\n    const performanceNow = performance.now();\n    const dateNow = Date.now();\n    // if timeOrigin isn't available set delta to threshold so it isn't used\n    const timeOriginDelta = performance.timeOrigin ? Math.abs(performance.timeOrigin + performanceNow - dateNow) : threshold;\n    const timeOriginIsReliable = timeOriginDelta < threshold;\n    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n    // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n    // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n    // Date API.\n    // eslint-disable-next-line deprecation/deprecation\n    const navigationStart = performance.timing && performance.timing.navigationStart;\n    const hasNavigationStart = typeof navigationStart === \"number\";\n    // if navigationStart isn't available set delta to threshold so it isn't used\n    const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n    const navigationStartIsReliable = navigationStartDelta < threshold;\n    if (timeOriginIsReliable || navigationStartIsReliable) {\n        // Use the more reliable time origin\n        if (timeOriginDelta <= navigationStartDelta) {\n            _browserPerformanceTimeOriginMode = \"timeOrigin\";\n            return performance.timeOrigin;\n        } else {\n            _browserPerformanceTimeOriginMode = \"navigationStart\";\n            return navigationStart;\n        }\n    }\n    // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n    _browserPerformanceTimeOriginMode = \"dateNow\";\n    return dateNow;\n})();\n //# sourceMappingURL=time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/time.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/tracing.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/tracing.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACEPARENT_REGEXP: () => (/* binding */ TRACEPARENT_REGEXP),\n/* harmony export */   extractTraceparentData: () => (/* binding */ extractTraceparentData),\n/* harmony export */   generateSentryTraceHeader: () => (/* binding */ generateSentryTraceHeader),\n/* harmony export */   propagationContextFromHeaders: () => (/* binding */ propagationContextFromHeaders),\n/* harmony export */   tracingContextFromHeaders: () => (/* binding */ tracingContextFromHeaders)\n/* harmony export */ });\n/* harmony import */ var _baggage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage.js */ \"(ssr)/./node_modules/@sentry/utils/esm/baggage.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./misc.js */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nconst TRACEPARENT_REGEXP = new RegExp(\"^[ \\\\t]*\" + // whitespace\n\"([0-9a-f]{32})?\" + // trace_id\n\"-?([0-9a-f]{16})?\" + // span_id\n\"-?([01])?\" + // sampled\n\"[ \\\\t]*$\");\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */ function extractTraceparentData(traceparent) {\n    if (!traceparent) {\n        return undefined;\n    }\n    const matches = traceparent.match(TRACEPARENT_REGEXP);\n    if (!matches) {\n        return undefined;\n    }\n    let parentSampled;\n    if (matches[3] === \"1\") {\n        parentSampled = true;\n    } else if (matches[3] === \"0\") {\n        parentSampled = false;\n    }\n    return {\n        traceId: matches[1],\n        parentSampled,\n        parentSpanId: matches[2]\n    };\n}\n/**\n * Create tracing context from incoming headers.\n *\n * @deprecated Use `propagationContextFromHeaders` instead.\n */ // TODO(v8): Remove this function\nfunction tracingContextFromHeaders(sentryTrace, baggage) {\n    const traceparentData = extractTraceparentData(sentryTrace);\n    const dynamicSamplingContext = (0,_baggage_js__WEBPACK_IMPORTED_MODULE_0__.baggageHeaderToDynamicSamplingContext)(baggage);\n    const { traceId, parentSpanId, parentSampled } = traceparentData || {};\n    if (!traceparentData) {\n        return {\n            traceparentData,\n            dynamicSamplingContext: undefined,\n            propagationContext: {\n                traceId: traceId || (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(),\n                spanId: (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16)\n            }\n        };\n    } else {\n        return {\n            traceparentData,\n            dynamicSamplingContext: dynamicSamplingContext || {},\n            propagationContext: {\n                traceId: traceId || (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(),\n                parentSpanId: parentSpanId || (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16),\n                spanId: (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16),\n                sampled: parentSampled,\n                dsc: dynamicSamplingContext || {}\n            }\n        };\n    }\n}\n/**\n * Create a propagation context from incoming headers.\n */ function propagationContextFromHeaders(sentryTrace, baggage) {\n    const traceparentData = extractTraceparentData(sentryTrace);\n    const dynamicSamplingContext = (0,_baggage_js__WEBPACK_IMPORTED_MODULE_0__.baggageHeaderToDynamicSamplingContext)(baggage);\n    const { traceId, parentSpanId, parentSampled } = traceparentData || {};\n    if (!traceparentData) {\n        return {\n            traceId: traceId || (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(),\n            spanId: (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16)\n        };\n    } else {\n        return {\n            traceId: traceId || (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(),\n            parentSpanId: parentSpanId || (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16),\n            spanId: (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16),\n            sampled: parentSampled,\n            dsc: dynamicSamplingContext || {}\n        };\n    }\n}\n/**\n * Create sentry-trace header from span context values.\n */ function generateSentryTraceHeader(traceId = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(), spanId = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16), sampled) {\n    let sampledString = \"\";\n    if (sampled !== undefined) {\n        sampledString = sampled ? \"-1\" : \"-0\";\n    }\n    return `${traceId}-${spanId}${sampledString}`;\n}\n //# sourceMappingURL=tracing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/tracing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/utils/esm/worldwide.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/worldwide.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GLOBAL_OBJ: () => (/* binding */ GLOBAL_OBJ),\n/* harmony export */   getGlobalObject: () => (/* binding */ getGlobalObject),\n/* harmony export */   getGlobalSingleton: () => (/* binding */ getGlobalSingleton)\n/* harmony export */ });\n/** Internal global with common properties and Sentry extensions  */ // The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification\n// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js\n// core-js has the following licence:\n//\n// Copyright (c) 2014-2022 Denis Pushkarev\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/** Returns 'obj' if it's the global object, otherwise returns undefined */ function isGlobalObj(obj) {\n    return obj && obj.Math == Math ? obj : undefined;\n}\n/** Get's the global object for the current JavaScript runtime */ const GLOBAL_OBJ = typeof globalThis == \"object\" && isGlobalObj(globalThis) || // eslint-disable-next-line no-restricted-globals\n false && 0 || typeof self == \"object\" && isGlobalObj(self) || typeof global == \"object\" && isGlobalObj(global) || function() {\n    return this;\n}() || {};\n/**\n * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8\n */ function getGlobalObject() {\n    return GLOBAL_OBJ;\n}\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */ function getGlobalSingleton(name, creator, obj) {\n    const gbl = obj || GLOBAL_OBJ;\n    const __SENTRY__ = gbl.__SENTRY__ = gbl.__SENTRY__ || {};\n    const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n    return singleton;\n}\n //# sourceMappingURL=worldwide.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vd29ybGR3aWRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtFQUFrRSxHQUVsRSxnR0FBZ0c7QUFDaEcseUhBQXlIO0FBQ3pILHFDQUFxQztBQUNyQyxFQUFFO0FBQ0YsMENBQTBDO0FBQzFDLEVBQUU7QUFDRiwrRUFBK0U7QUFDL0UsZ0ZBQWdGO0FBQ2hGLCtFQUErRTtBQUMvRSw0RUFBNEU7QUFDNUUsd0VBQXdFO0FBQ3hFLDJEQUEyRDtBQUMzRCxFQUFFO0FBQ0YsNkVBQTZFO0FBQzdFLHNEQUFzRDtBQUN0RCxFQUFFO0FBQ0YsNkVBQTZFO0FBQzdFLDJFQUEyRTtBQUMzRSw4RUFBOEU7QUFDOUUseUVBQXlFO0FBQ3pFLGdGQUFnRjtBQUNoRiw0RUFBNEU7QUFDNUUsZ0JBQWdCO0FBRWhCLHlFQUF5RSxHQUN6RSxTQUFTQSxZQUFZQyxHQUFHO0lBQ3RCLE9BQU9BLE9BQU9BLElBQUlDLElBQUksSUFBSUEsT0FBT0QsTUFBTUU7QUFDekM7QUFFQSwrREFBK0QsR0FDL0QsTUFBTUMsYUFDSixPQUFRQyxjQUFjLFlBQVlMLFlBQVlLLGVBQzlDLGlEQUFpRDtBQUNoRCxNQUFpQixJQUFZTCxDQUFtQk0sSUFDaEQsT0FBT0MsUUFBUSxZQUFZUCxZQUFZTyxTQUN2QyxPQUFPQyxVQUFVLFlBQVlSLFlBQVlRLFdBQzFDO0lBQ0UsT0FBTyxJQUFJO0FBQ2IsT0FDQSxDQUFDO0FBRUg7O0NBRUMsR0FDRCxTQUFTQztJQUNQLE9BQU9MO0FBQ1Q7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBQ0QsU0FBU00sbUJBQW1CQyxJQUFJLEVBQUVDLE9BQU8sRUFBRVgsR0FBRztJQUM1QyxNQUFNWSxNQUFPWixPQUFPRztJQUNwQixNQUFNVSxhQUFjRCxJQUFJQyxVQUFVLEdBQUdELElBQUlDLFVBQVUsSUFBSSxDQUFDO0lBQ3hELE1BQU1DLFlBQVlELFVBQVUsQ0FBQ0gsS0FBSyxJQUFLRyxDQUFBQSxVQUFVLENBQUNILEtBQUssR0FBR0MsU0FBUTtJQUNsRSxPQUFPRztBQUNUO0FBRTJELENBQzNELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL29icmFsaW5rLXdlYi8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS93b3JsZHdpZGUuanM/MDEwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogSW50ZXJuYWwgZ2xvYmFsIHdpdGggY29tbW9uIHByb3BlcnRpZXMgYW5kIFNlbnRyeSBleHRlbnNpb25zICAqL1xuXG4vLyBUaGUgY29kZSBiZWxvdyBmb3IgJ2lzR2xvYmFsT2JqJyBhbmQgJ0dMT0JBTF9PQkonIHdhcyBjb3BpZWQgZnJvbSBjb3JlLWpzIGJlZm9yZSBtb2RpZmljYXRpb25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2Jsb2IvMWI5NDRkZjU1MjgyY2RjOTljOTBkYjVmNDllYjBiNmVkYTJjYzBhMy9wYWNrYWdlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanNcbi8vIGNvcmUtanMgaGFzIHRoZSBmb2xsb3dpbmcgbGljZW5jZTpcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAyMiBEZW5pcyBQdXNoa2FyZXZcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG4vKiogUmV0dXJucyAnb2JqJyBpZiBpdCdzIHRoZSBnbG9iYWwgb2JqZWN0LCBvdGhlcndpc2UgcmV0dXJucyB1bmRlZmluZWQgKi9cbmZ1bmN0aW9uIGlzR2xvYmFsT2JqKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5NYXRoID09IE1hdGggPyBvYmogOiB1bmRlZmluZWQ7XG59XG5cbi8qKiBHZXQncyB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgdGhlIGN1cnJlbnQgSmF2YVNjcmlwdCBydW50aW1lICovXG5jb25zdCBHTE9CQUxfT0JKID1cbiAgKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGlzR2xvYmFsT2JqKGdsb2JhbFRoaXMpKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIGlzR2xvYmFsT2JqKHdpbmRvdykpIHx8XG4gICh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBpc0dsb2JhbE9iaihzZWxmKSkgfHxcbiAgKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgaXNHbG9iYWxPYmooZ2xvYmFsKSkgfHxcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSkoKSB8fFxuICB7fTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgR0xPQkFMX09CSiBpbnN0ZWFkIG9yIFdJTkRPVyBmcm9tIEBzZW50cnkvYnJvd3Nlci4gVGhpcyB3aWxsIGJlIHJlbW92ZWQgaW4gdjhcbiAqL1xuZnVuY3Rpb24gZ2V0R2xvYmFsT2JqZWN0KCkge1xuICByZXR1cm4gR0xPQkFMX09CSiA7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGdsb2JhbCBzaW5nbGV0b24gY29udGFpbmVkIGluIHRoZSBnbG9iYWwgYF9fU0VOVFJZX19gIG9iamVjdC5cbiAqXG4gKiBJZiB0aGUgc2luZ2xldG9uIGRvZXNuJ3QgYWxyZWFkeSBleGlzdCBpbiBgX19TRU5UUllfX2AsIGl0IHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGUgZ2l2ZW4gZmFjdG9yeVxuICogZnVuY3Rpb24gYW5kIGFkZGVkIHRvIHRoZSBgX19TRU5UUllfX2Agb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBuYW1lIG5hbWUgb2YgdGhlIGdsb2JhbCBzaW5nbGV0b24gb24gX19TRU5UUllfX1xuICogQHBhcmFtIGNyZWF0b3IgY3JlYXRvciBGYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgc2luZ2xldG9uIGlmIGl0IGRvZXNuJ3QgYWxyZWFkeSBleGlzdCBvbiBgX19TRU5UUllfX2BcbiAqIEBwYXJhbSBvYmogKE9wdGlvbmFsKSBUaGUgZ2xvYmFsIG9iamVjdCBvbiB3aGljaCB0byBsb29rIGZvciBgX19TRU5UUllfX2AsIGlmIG5vdCBgR0xPQkFMX09CSmAncyByZXR1cm4gdmFsdWVcbiAqIEByZXR1cm5zIHRoZSBzaW5nbGV0b25cbiAqL1xuZnVuY3Rpb24gZ2V0R2xvYmFsU2luZ2xldG9uKG5hbWUsIGNyZWF0b3IsIG9iaikge1xuICBjb25zdCBnYmwgPSAob2JqIHx8IEdMT0JBTF9PQkopIDtcbiAgY29uc3QgX19TRU5UUllfXyA9IChnYmwuX19TRU5UUllfXyA9IGdibC5fX1NFTlRSWV9fIHx8IHt9KTtcbiAgY29uc3Qgc2luZ2xldG9uID0gX19TRU5UUllfX1tuYW1lXSB8fCAoX19TRU5UUllfX1tuYW1lXSA9IGNyZWF0b3IoKSk7XG4gIHJldHVybiBzaW5nbGV0b247XG59XG5cbmV4cG9ydCB7IEdMT0JBTF9PQkosIGdldEdsb2JhbE9iamVjdCwgZ2V0R2xvYmFsU2luZ2xldG9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JsZHdpZGUuanMubWFwXG4iXSwibmFtZXMiOlsiaXNHbG9iYWxPYmoiLCJvYmoiLCJNYXRoIiwidW5kZWZpbmVkIiwiR0xPQkFMX09CSiIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJzZWxmIiwiZ2xvYmFsIiwiZ2V0R2xvYmFsT2JqZWN0IiwiZ2V0R2xvYmFsU2luZ2xldG9uIiwibmFtZSIsImNyZWF0b3IiLCJnYmwiLCJfX1NFTlRSWV9fIiwic2luZ2xldG9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/utils/esm/worldwide.js\n");

/***/ })

};
;