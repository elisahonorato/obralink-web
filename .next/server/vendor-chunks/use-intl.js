"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/use-intl";
exports.ids = ["vendor-chunks/use-intl"];
exports.modules = {

/***/ "(ssr)/./node_modules/use-intl/dist/_IntlProvider.js":
/*!*****************************************************!*\
  !*** ./node_modules/use-intl/dist/_IntlProvider.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./development/_IntlProvider.js */ \"(ssr)/./node_modules/use-intl/dist/development/_IntlProvider.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9fSW50bFByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDZJQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL29icmFsaW5rLXdlYi8uL25vZGVfbW9kdWxlcy91c2UtaW50bC9kaXN0L19JbnRsUHJvdmlkZXIuanM/YTg2YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL19JbnRsUHJvdmlkZXIuanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZXZlbG9wbWVudC9fSW50bFByb3ZpZGVyLmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/_IntlProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/_useLocale.js":
/*!**************************************************!*\
  !*** ./node_modules/use-intl/dist/_useLocale.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./development/_useLocale.js */ \"(ssr)/./node_modules/use-intl/dist/development/_useLocale.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9fdXNlTG9jYWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLHVJQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL29icmFsaW5rLXdlYi8uL25vZGVfbW9kdWxlcy91c2UtaW50bC9kaXN0L191c2VMb2NhbGUuanM/MTYxYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL191c2VMb2NhbGUuanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZXZlbG9wbWVudC9fdXNlTG9jYWxlLmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/_useLocale.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/development/IntlContext-b5cc6be8.js":
/*!************************************************************************!*\
  !*** ./node_modules/use-intl/dist/development/IntlContext-b5cc6be8.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst IntlContext = /*#__PURE__*/ React.createContext(undefined);\nvar IntlContext$1 = IntlContext;\nexports.IntlContext = IntlContext$1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9kZXZlbG9wbWVudC9JbnRsQ29udGV4dC1iNWNjNmJlOC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCLE1BQU1DLGNBQWMsV0FBVyxHQUFFRixNQUFNRyxhQUFhLENBQUNDO0FBQ3JELElBQUlDLGdCQUFnQkg7QUFFcEJJLG1CQUFtQixHQUFHRCIsInNvdXJjZXMiOlsid2VicGFjazovL29icmFsaW5rLXdlYi8uL25vZGVfbW9kdWxlcy91c2UtaW50bC9kaXN0L2RldmVsb3BtZW50L0ludGxDb250ZXh0LWI1Y2M2YmU4LmpzPzQ3MGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5jb25zdCBJbnRsQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG52YXIgSW50bENvbnRleHQkMSA9IEludGxDb250ZXh0O1xuXG5leHBvcnRzLkludGxDb250ZXh0ID0gSW50bENvbnRleHQkMTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJJbnRsQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJ1bmRlZmluZWQiLCJJbnRsQ29udGV4dCQxIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/development/IntlContext-b5cc6be8.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/development/_IntlProvider.js":
/*!*****************************************************************!*\
  !*** ./node_modules/use-intl/dist/development/_IntlProvider.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar initializeConfig = __webpack_require__(/*! ./initializeConfig-c503e215.js */ \"(ssr)/./node_modules/use-intl/dist/development/initializeConfig-c503e215.js\");\nvar IntlContext = __webpack_require__(/*! ./IntlContext-b5cc6be8.js */ \"(ssr)/./node_modules/use-intl/dist/development/IntlContext-b5cc6be8.js\");\nfunction _interopDefault(e) {\n    return e && e.__esModule ? e : {\n        default: e\n    };\n}\nvar React__default = /*#__PURE__*/ _interopDefault(React);\nfunction IntlProvider(_ref) {\n    let { children, defaultTranslationValues, formats, getMessageFallback, locale, messages, now, onError, timeZone } = _ref;\n    const [messageFormatCache] = React.useState(()=>new Map());\n    // Memoizing this value helps to avoid triggering a re-render of all\n    // context consumers in case the configuration didn't change. However,\n    // if some of the non-primitive values change, a re-render will still\n    // be triggered. Note that there's no need to put `memo` on `IntlProvider`\n    // itself, because the `children` typically change on every render.\n    // There's some burden on the consumer side if it's important to reduce\n    // re-renders, put that's how React works.\n    // See: https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/#context-updates-and-render-optimizations\n    const value = React.useMemo(()=>({\n            ...initializeConfig.initializeConfig({\n                locale,\n                defaultTranslationValues,\n                formats,\n                getMessageFallback,\n                messages,\n                now,\n                onError,\n                timeZone\n            }),\n            messageFormatCache\n        }), [\n        defaultTranslationValues,\n        formats,\n        getMessageFallback,\n        locale,\n        messageFormatCache,\n        messages,\n        now,\n        onError,\n        timeZone\n    ]);\n    return /*#__PURE__*/ React__default.default.createElement(IntlContext.IntlContext.Provider, {\n        value: value\n    }, children);\n}\nexports.IntlProvider = IntlProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9kZXZlbG9wbWVudC9fSW50bFByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBRTdELElBQUlDLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlDLG1CQUFtQkQsbUJBQU9BLENBQUM7QUFDL0IsSUFBSUUsY0FBY0YsbUJBQU9BLENBQUM7QUFFMUIsU0FBU0csZ0JBQWlCQyxDQUFDO0lBQUksT0FBT0EsS0FBS0EsRUFBRUMsVUFBVSxHQUFHRCxJQUFJO1FBQUVFLFNBQVNGO0lBQUU7QUFBRztBQUU5RSxJQUFJRyxpQkFBaUIsV0FBVyxHQUFFSixnQkFBZ0JKO0FBRWxELFNBQVNTLGFBQWFDLElBQUk7SUFDeEIsSUFBSSxFQUNGQyxRQUFRLEVBQ1JDLHdCQUF3QixFQUN4QkMsT0FBTyxFQUNQQyxrQkFBa0IsRUFDbEJDLE1BQU0sRUFDTkMsUUFBUSxFQUNSQyxHQUFHLEVBQ0hDLE9BQU8sRUFDUEMsUUFBUSxFQUNULEdBQUdUO0lBQ0osTUFBTSxDQUFDVSxtQkFBbUIsR0FBR3BCLE1BQU1xQixRQUFRLENBQUMsSUFBTSxJQUFJQztJQUV0RCxvRUFBb0U7SUFDcEUsc0VBQXNFO0lBQ3RFLHFFQUFxRTtJQUNyRSwwRUFBMEU7SUFDMUUsbUVBQW1FO0lBQ25FLHVFQUF1RTtJQUN2RSwwQ0FBMEM7SUFDMUMsK0pBQStKO0lBQy9KLE1BQU12QixRQUFRQyxNQUFNdUIsT0FBTyxDQUFDLElBQU87WUFDakMsR0FBR3JCLGlCQUFpQkEsZ0JBQWdCLENBQUM7Z0JBQ25DYTtnQkFDQUg7Z0JBQ0FDO2dCQUNBQztnQkFDQUU7Z0JBQ0FDO2dCQUNBQztnQkFDQUM7WUFDRixFQUFFO1lBQ0ZDO1FBQ0YsSUFBSTtRQUFDUjtRQUEwQkM7UUFBU0M7UUFBb0JDO1FBQVFLO1FBQW9CSjtRQUFVQztRQUFLQztRQUFTQztLQUFTO0lBQ3pILE9BQU8sV0FBVyxHQUFFWCxlQUFlRCxPQUFPLENBQUNpQixhQUFhLENBQUNyQixZQUFZQSxXQUFXLENBQUNzQixRQUFRLEVBQUU7UUFDekYxQixPQUFPQTtJQUNULEdBQUdZO0FBQ0w7QUFFQWIsb0JBQW9CLEdBQUdXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JyYWxpbmstd2ViLy4vbm9kZV9tb2R1bGVzL3VzZS1pbnRsL2Rpc3QvZGV2ZWxvcG1lbnQvX0ludGxQcm92aWRlci5qcz9hMzJmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBpbml0aWFsaXplQ29uZmlnID0gcmVxdWlyZSgnLi9pbml0aWFsaXplQ29uZmlnLWM1MDNlMjE1LmpzJyk7XG52YXIgSW50bENvbnRleHQgPSByZXF1aXJlKCcuL0ludGxDb250ZXh0LWI1Y2M2YmU4LmpzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH1cblxudmFyIFJlYWN0X19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdChSZWFjdCk7XG5cbmZ1bmN0aW9uIEludGxQcm92aWRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgZGVmYXVsdFRyYW5zbGF0aW9uVmFsdWVzLFxuICAgIGZvcm1hdHMsXG4gICAgZ2V0TWVzc2FnZUZhbGxiYWNrLFxuICAgIGxvY2FsZSxcbiAgICBtZXNzYWdlcyxcbiAgICBub3csXG4gICAgb25FcnJvcixcbiAgICB0aW1lWm9uZVxuICB9ID0gX3JlZjtcbiAgY29uc3QgW21lc3NhZ2VGb3JtYXRDYWNoZV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBuZXcgTWFwKCkpO1xuXG4gIC8vIE1lbW9pemluZyB0aGlzIHZhbHVlIGhlbHBzIHRvIGF2b2lkIHRyaWdnZXJpbmcgYSByZS1yZW5kZXIgb2YgYWxsXG4gIC8vIGNvbnRleHQgY29uc3VtZXJzIGluIGNhc2UgdGhlIGNvbmZpZ3VyYXRpb24gZGlkbid0IGNoYW5nZS4gSG93ZXZlcixcbiAgLy8gaWYgc29tZSBvZiB0aGUgbm9uLXByaW1pdGl2ZSB2YWx1ZXMgY2hhbmdlLCBhIHJlLXJlbmRlciB3aWxsIHN0aWxsXG4gIC8vIGJlIHRyaWdnZXJlZC4gTm90ZSB0aGF0IHRoZXJlJ3Mgbm8gbmVlZCB0byBwdXQgYG1lbW9gIG9uIGBJbnRsUHJvdmlkZXJgXG4gIC8vIGl0c2VsZiwgYmVjYXVzZSB0aGUgYGNoaWxkcmVuYCB0eXBpY2FsbHkgY2hhbmdlIG9uIGV2ZXJ5IHJlbmRlci5cbiAgLy8gVGhlcmUncyBzb21lIGJ1cmRlbiBvbiB0aGUgY29uc3VtZXIgc2lkZSBpZiBpdCdzIGltcG9ydGFudCB0byByZWR1Y2VcbiAgLy8gcmUtcmVuZGVycywgcHV0IHRoYXQncyBob3cgUmVhY3Qgd29ya3MuXG4gIC8vIFNlZTogaHR0cHM6Ly9ibG9nLmlzcXVhcmVkc29mdHdhcmUuY29tLzIwMjAvMDUvYmxvZ2dlZC1hbnN3ZXJzLWEtbW9zdGx5LWNvbXBsZXRlLWd1aWRlLXRvLXJlYWN0LXJlbmRlcmluZy1iZWhhdmlvci8jY29udGV4dC11cGRhdGVzLWFuZC1yZW5kZXItb3B0aW1pemF0aW9uc1xuICBjb25zdCB2YWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICAuLi5pbml0aWFsaXplQ29uZmlnLmluaXRpYWxpemVDb25maWcoe1xuICAgICAgbG9jYWxlLFxuICAgICAgZGVmYXVsdFRyYW5zbGF0aW9uVmFsdWVzLFxuICAgICAgZm9ybWF0cyxcbiAgICAgIGdldE1lc3NhZ2VGYWxsYmFjayxcbiAgICAgIG1lc3NhZ2VzLFxuICAgICAgbm93LFxuICAgICAgb25FcnJvcixcbiAgICAgIHRpbWVab25lXG4gICAgfSksXG4gICAgbWVzc2FnZUZvcm1hdENhY2hlXG4gIH0pLCBbZGVmYXVsdFRyYW5zbGF0aW9uVmFsdWVzLCBmb3JtYXRzLCBnZXRNZXNzYWdlRmFsbGJhY2ssIGxvY2FsZSwgbWVzc2FnZUZvcm1hdENhY2hlLCBtZXNzYWdlcywgbm93LCBvbkVycm9yLCB0aW1lWm9uZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChJbnRsQ29udGV4dC5JbnRsQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB2YWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmV4cG9ydHMuSW50bFByb3ZpZGVyID0gSW50bFByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUmVhY3QiLCJyZXF1aXJlIiwiaW5pdGlhbGl6ZUNvbmZpZyIsIkludGxDb250ZXh0IiwiX2ludGVyb3BEZWZhdWx0IiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiUmVhY3RfX2RlZmF1bHQiLCJJbnRsUHJvdmlkZXIiLCJfcmVmIiwiY2hpbGRyZW4iLCJkZWZhdWx0VHJhbnNsYXRpb25WYWx1ZXMiLCJmb3JtYXRzIiwiZ2V0TWVzc2FnZUZhbGxiYWNrIiwibG9jYWxlIiwibWVzc2FnZXMiLCJub3ciLCJvbkVycm9yIiwidGltZVpvbmUiLCJtZXNzYWdlRm9ybWF0Q2FjaGUiLCJ1c2VTdGF0ZSIsIk1hcCIsInVzZU1lbW8iLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/development/_IntlProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/development/_useLocale-321e619f.js":
/*!***********************************************************************!*\
  !*** ./node_modules/use-intl/dist/development/_useLocale-321e619f.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar IntlContext = __webpack_require__(/*! ./IntlContext-b5cc6be8.js */ \"(ssr)/./node_modules/use-intl/dist/development/IntlContext-b5cc6be8.js\");\nfunction useIntlContext() {\n    const context = React.useContext(IntlContext.IntlContext);\n    if (!context) {\n        throw new Error(\"No intl context found. Have you configured the provider?\");\n    }\n    return context;\n}\nfunction useLocale() {\n    return useIntlContext().locale;\n}\nexports.useIntlContext = useIntlContext;\nexports.useLocale = useLocale;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9kZXZlbG9wbWVudC9fdXNlTG9jYWxlLTMyMWU2MTlmLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUM7QUFFMUIsU0FBU0U7SUFDUCxNQUFNQyxVQUFVSixNQUFNSyxVQUFVLENBQUNILFlBQVlBLFdBQVc7SUFDeEQsSUFBSSxDQUFDRSxTQUFTO1FBQ1osTUFBTSxJQUFJRSxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Y7QUFDVDtBQUVBLFNBQVNHO0lBQ1AsT0FBT0osaUJBQWlCSyxNQUFNO0FBQ2hDO0FBRUFDLHNCQUFzQixHQUFHTjtBQUN6Qk0saUJBQWlCLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JyYWxpbmstd2ViLy4vbm9kZV9tb2R1bGVzL3VzZS1pbnRsL2Rpc3QvZGV2ZWxvcG1lbnQvX3VzZUxvY2FsZS0zMjFlNjE5Zi5qcz81NjQ0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBJbnRsQ29udGV4dCA9IHJlcXVpcmUoJy4vSW50bENvbnRleHQtYjVjYzZiZTguanMnKTtcblxuZnVuY3Rpb24gdXNlSW50bENvbnRleHQoKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEludGxDb250ZXh0LkludGxDb250ZXh0KTtcbiAgaWYgKCFjb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbnRsIGNvbnRleHQgZm91bmQuIEhhdmUgeW91IGNvbmZpZ3VyZWQgdGhlIHByb3ZpZGVyPycgKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn1cblxuZnVuY3Rpb24gdXNlTG9jYWxlKCkge1xuICByZXR1cm4gdXNlSW50bENvbnRleHQoKS5sb2NhbGU7XG59XG5cbmV4cG9ydHMudXNlSW50bENvbnRleHQgPSB1c2VJbnRsQ29udGV4dDtcbmV4cG9ydHMudXNlTG9jYWxlID0gdXNlTG9jYWxlO1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIkludGxDb250ZXh0IiwidXNlSW50bENvbnRleHQiLCJjb250ZXh0IiwidXNlQ29udGV4dCIsIkVycm9yIiwidXNlTG9jYWxlIiwibG9jYWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/development/_useLocale-321e619f.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/development/_useLocale.js":
/*!**************************************************************!*\
  !*** ./node_modules/use-intl/dist/development/_useLocale.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar _useLocale = __webpack_require__(/*! ./_useLocale-321e619f.js */ \"(ssr)/./node_modules/use-intl/dist/development/_useLocale-321e619f.js\");\n__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n__webpack_require__(/*! ./IntlContext-b5cc6be8.js */ \"(ssr)/./node_modules/use-intl/dist/development/IntlContext-b5cc6be8.js\");\nexports.useLocale = _useLocale.useLocale;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9kZXZlbG9wbWVudC9fdXNlTG9jYWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBRTdELElBQUlDLGFBQWFDLG1CQUFPQSxDQUFDO0FBQ3pCQSxtQkFBT0EsQ0FBQztBQUNSQSxtQkFBT0EsQ0FBQztBQUlSSCxpQkFBaUIsR0FBR0UsV0FBV0UsU0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL29icmFsaW5rLXdlYi8uL25vZGVfbW9kdWxlcy91c2UtaW50bC9kaXN0L2RldmVsb3BtZW50L191c2VMb2NhbGUuanM/NTBmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBfdXNlTG9jYWxlID0gcmVxdWlyZSgnLi9fdXNlTG9jYWxlLTMyMWU2MTlmLmpzJyk7XG5yZXF1aXJlKCdyZWFjdCcpO1xucmVxdWlyZSgnLi9JbnRsQ29udGV4dC1iNWNjNmJlOC5qcycpO1xuXG5cblxuZXhwb3J0cy51c2VMb2NhbGUgPSBfdXNlTG9jYWxlLnVzZUxvY2FsZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl91c2VMb2NhbGUiLCJyZXF1aXJlIiwidXNlTG9jYWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/development/_useLocale.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/development/core.js":
/*!********************************************************!*\
  !*** ./node_modules/use-intl/dist/development/core.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar initializeConfig = __webpack_require__(/*! ./initializeConfig-c503e215.js */ \"(ssr)/./node_modules/use-intl/dist/development/initializeConfig-c503e215.js\");\nvar createFormatter = __webpack_require__(/*! ./createFormatter-3fcd09b9.js */ \"(ssr)/./node_modules/use-intl/dist/development/createFormatter-3fcd09b9.js\");\n__webpack_require__(/*! intl-messageformat */ \"(ssr)/./node_modules/intl-messageformat/lib/index.js\");\n__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction createTranslatorImpl(_ref, namespacePrefix) {\n    let { getMessageFallback, messages, namespace, onError, ...rest } = _ref;\n    // The `namespacePrefix` is part of the type system.\n    // See the comment in the function invocation.\n    messages = messages[namespacePrefix];\n    namespace = createFormatter.resolveNamespace(namespace, namespacePrefix);\n    return createFormatter.createBaseTranslator({\n        ...rest,\n        onError,\n        getMessageFallback,\n        messages,\n        namespace\n    });\n}\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */ function createTranslator(_ref) {\n    let { getMessageFallback = initializeConfig.defaultGetMessageFallback, messages, namespace, onError = initializeConfig.defaultOnError, ...rest } = _ref;\n    // We have to wrap the actual function so the type inference for the optional\n    // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n    // The prefix (\"!\") is arbitrary.\n    return createTranslatorImpl({\n        ...rest,\n        onError,\n        getMessageFallback,\n        // @ts-expect-error `messages` is allowed to be `undefined` here and will be handled internally\n        messages: {\n            \"!\": messages\n        },\n        namespace: namespace ? \"!.\".concat(namespace) : \"!\"\n    }, \"!\");\n}\nexports.IntlError = initializeConfig.IntlError;\nexports.IntlErrorCode = initializeConfig.IntlErrorCode;\nexports.initializeConfig = initializeConfig.initializeConfig;\nexports.createFormatter = createFormatter.createFormatter;\nexports.createTranslator = createTranslator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9kZXZlbG9wbWVudC9jb3JlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBRTdELElBQUlDLG1CQUFtQkMsbUJBQU9BLENBQUM7QUFDL0IsSUFBSUMsa0JBQWtCRCxtQkFBT0EsQ0FBQztBQUM5QkEsbUJBQU9BLENBQUM7QUFDUkEsbUJBQU9BLENBQUM7QUFFUixTQUFTRSxxQkFBcUJDLElBQUksRUFBRUMsZUFBZTtJQUNqRCxJQUFJLEVBQ0ZDLGtCQUFrQixFQUNsQkMsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLE9BQU8sRUFDUCxHQUFHQyxNQUNKLEdBQUdOO0lBQ0osb0RBQW9EO0lBQ3BELDhDQUE4QztJQUM5Q0csV0FBV0EsUUFBUSxDQUFDRixnQkFBZ0I7SUFDcENHLFlBQVlOLGdCQUFnQlMsZ0JBQWdCLENBQUNILFdBQVdIO0lBQ3hELE9BQU9ILGdCQUFnQlUsb0JBQW9CLENBQUM7UUFDMUMsR0FBR0YsSUFBSTtRQUNQRDtRQUNBSDtRQUNBQztRQUNBQztJQUNGO0FBQ0Y7QUFFQTs7Ozs7OztDQU9DLEdBQ0QsU0FBU0ssaUJBQWlCVCxJQUFJO0lBQzVCLElBQUksRUFDRkUscUJBQXFCTixpQkFBaUJjLHlCQUF5QixFQUMvRFAsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLFVBQVVULGlCQUFpQmUsY0FBYyxFQUN6QyxHQUFHTCxNQUNKLEdBQUdOO0lBQ0osNkVBQTZFO0lBQzdFLDZFQUE2RTtJQUM3RSxpQ0FBaUM7SUFDakMsT0FBT0QscUJBQXFCO1FBQzFCLEdBQUdPLElBQUk7UUFDUEQ7UUFDQUg7UUFDQSwrRkFBK0Y7UUFDL0ZDLFVBQVU7WUFDUixLQUFLQTtRQUNQO1FBQ0FDLFdBQVdBLFlBQVksS0FBS1EsTUFBTSxDQUFDUixhQUFhO0lBQ2xELEdBQUc7QUFDTDtBQUVBVixpQkFBaUIsR0FBR0UsaUJBQWlCaUIsU0FBUztBQUM5Q25CLHFCQUFxQixHQUFHRSxpQkFBaUJrQixhQUFhO0FBQ3REcEIsd0JBQXdCLEdBQUdFLGlCQUFpQkEsZ0JBQWdCO0FBQzVERix1QkFBdUIsR0FBR0ksZ0JBQWdCQSxlQUFlO0FBQ3pESix3QkFBd0IsR0FBR2UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnJhbGluay13ZWIvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9kZXZlbG9wbWVudC9jb3JlLmpzP2RiODYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgaW5pdGlhbGl6ZUNvbmZpZyA9IHJlcXVpcmUoJy4vaW5pdGlhbGl6ZUNvbmZpZy1jNTAzZTIxNS5qcycpO1xudmFyIGNyZWF0ZUZvcm1hdHRlciA9IHJlcXVpcmUoJy4vY3JlYXRlRm9ybWF0dGVyLTNmY2QwOWI5LmpzJyk7XG5yZXF1aXJlKCdpbnRsLW1lc3NhZ2Vmb3JtYXQnKTtcbnJlcXVpcmUoJ3JlYWN0Jyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zbGF0b3JJbXBsKF9yZWYsIG5hbWVzcGFjZVByZWZpeCkge1xuICBsZXQge1xuICAgIGdldE1lc3NhZ2VGYWxsYmFjayxcbiAgICBtZXNzYWdlcyxcbiAgICBuYW1lc3BhY2UsXG4gICAgb25FcnJvcixcbiAgICAuLi5yZXN0XG4gIH0gPSBfcmVmO1xuICAvLyBUaGUgYG5hbWVzcGFjZVByZWZpeGAgaXMgcGFydCBvZiB0aGUgdHlwZSBzeXN0ZW0uXG4gIC8vIFNlZSB0aGUgY29tbWVudCBpbiB0aGUgZnVuY3Rpb24gaW52b2NhdGlvbi5cbiAgbWVzc2FnZXMgPSBtZXNzYWdlc1tuYW1lc3BhY2VQcmVmaXhdO1xuICBuYW1lc3BhY2UgPSBjcmVhdGVGb3JtYXR0ZXIucmVzb2x2ZU5hbWVzcGFjZShuYW1lc3BhY2UsIG5hbWVzcGFjZVByZWZpeCk7XG4gIHJldHVybiBjcmVhdGVGb3JtYXR0ZXIuY3JlYXRlQmFzZVRyYW5zbGF0b3Ioe1xuICAgIC4uLnJlc3QsXG4gICAgb25FcnJvcixcbiAgICBnZXRNZXNzYWdlRmFsbGJhY2ssXG4gICAgbWVzc2FnZXMsXG4gICAgbmFtZXNwYWNlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZXMgbWVzc2FnZXMgZnJvbSB0aGUgZ2l2ZW4gbmFtZXNwYWNlIGJ5IHVzaW5nIHRoZSBJQ1Ugc3ludGF4LlxuICogU2VlIGh0dHBzOi8vZm9ybWF0anMuaW8vZG9jcy9jb3JlLWNvbmNlcHRzL2ljdS1zeW50YXguXG4gKlxuICogSWYgbm8gbmFtZXNwYWNlIGlzIHByb3ZpZGVkLCBhbGwgYXZhaWxhYmxlIG1lc3NhZ2VzIGFyZSByZXR1cm5lZC5cbiAqIFRoZSBuYW1lc3BhY2UgY2FuIGFsc28gaW5kaWNhdGUgbmVzdGluZyBieSB1c2luZyBhIGRvdFxuICogKGUuZy4gYG5hbWVzcGFjZS5Db21wb25lbnRgKS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVHJhbnNsYXRvcihfcmVmKSB7XG4gIGxldCB7XG4gICAgZ2V0TWVzc2FnZUZhbGxiYWNrID0gaW5pdGlhbGl6ZUNvbmZpZy5kZWZhdWx0R2V0TWVzc2FnZUZhbGxiYWNrLFxuICAgIG1lc3NhZ2VzLFxuICAgIG5hbWVzcGFjZSxcbiAgICBvbkVycm9yID0gaW5pdGlhbGl6ZUNvbmZpZy5kZWZhdWx0T25FcnJvcixcbiAgICAuLi5yZXN0XG4gIH0gPSBfcmVmO1xuICAvLyBXZSBoYXZlIHRvIHdyYXAgdGhlIGFjdHVhbCBmdW5jdGlvbiBzbyB0aGUgdHlwZSBpbmZlcmVuY2UgZm9yIHRoZSBvcHRpb25hbFxuICAvLyBuYW1lc3BhY2Ugd29ya3MgY29ycmVjdGx5LiBTZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzcxNTI5NTc1LzM0MzA0NVxuICAvLyBUaGUgcHJlZml4IChcIiFcIikgaXMgYXJiaXRyYXJ5LlxuICByZXR1cm4gY3JlYXRlVHJhbnNsYXRvckltcGwoe1xuICAgIC4uLnJlc3QsXG4gICAgb25FcnJvcixcbiAgICBnZXRNZXNzYWdlRmFsbGJhY2ssXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBgbWVzc2FnZXNgIGlzIGFsbG93ZWQgdG8gYmUgYHVuZGVmaW5lZGAgaGVyZSBhbmQgd2lsbCBiZSBoYW5kbGVkIGludGVybmFsbHlcbiAgICBtZXNzYWdlczoge1xuICAgICAgJyEnOiBtZXNzYWdlc1xuICAgIH0sXG4gICAgbmFtZXNwYWNlOiBuYW1lc3BhY2UgPyBcIiEuXCIuY29uY2F0KG5hbWVzcGFjZSkgOiAnISdcbiAgfSwgJyEnKTtcbn1cblxuZXhwb3J0cy5JbnRsRXJyb3IgPSBpbml0aWFsaXplQ29uZmlnLkludGxFcnJvcjtcbmV4cG9ydHMuSW50bEVycm9yQ29kZSA9IGluaXRpYWxpemVDb25maWcuSW50bEVycm9yQ29kZTtcbmV4cG9ydHMuaW5pdGlhbGl6ZUNvbmZpZyA9IGluaXRpYWxpemVDb25maWcuaW5pdGlhbGl6ZUNvbmZpZztcbmV4cG9ydHMuY3JlYXRlRm9ybWF0dGVyID0gY3JlYXRlRm9ybWF0dGVyLmNyZWF0ZUZvcm1hdHRlcjtcbmV4cG9ydHMuY3JlYXRlVHJhbnNsYXRvciA9IGNyZWF0ZVRyYW5zbGF0b3I7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbml0aWFsaXplQ29uZmlnIiwicmVxdWlyZSIsImNyZWF0ZUZvcm1hdHRlciIsImNyZWF0ZVRyYW5zbGF0b3JJbXBsIiwiX3JlZiIsIm5hbWVzcGFjZVByZWZpeCIsImdldE1lc3NhZ2VGYWxsYmFjayIsIm1lc3NhZ2VzIiwibmFtZXNwYWNlIiwib25FcnJvciIsInJlc3QiLCJyZXNvbHZlTmFtZXNwYWNlIiwiY3JlYXRlQmFzZVRyYW5zbGF0b3IiLCJjcmVhdGVUcmFuc2xhdG9yIiwiZGVmYXVsdEdldE1lc3NhZ2VGYWxsYmFjayIsImRlZmF1bHRPbkVycm9yIiwiY29uY2F0IiwiSW50bEVycm9yIiwiSW50bEVycm9yQ29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/development/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/development/createFormatter-3fcd09b9.js":
/*!****************************************************************************!*\
  !*** ./node_modules/use-intl/dist/development/createFormatter-3fcd09b9.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar IntlMessageFormat = __webpack_require__(/*! intl-messageformat */ \"(ssr)/./node_modules/intl-messageformat/lib/index.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar initializeConfig = __webpack_require__(/*! ./initializeConfig-c503e215.js */ \"(ssr)/./node_modules/use-intl/dist/development/initializeConfig-c503e215.js\");\nfunction _interopDefault(e) {\n    return e && e.__esModule ? e : {\n        default: e\n    };\n}\nvar IntlMessageFormat__default = /*#__PURE__*/ _interopDefault(IntlMessageFormat);\n// eslint-disable-next-line import/no-named-as-default -- False positive\nfunction setTimeZoneInFormats(formats, timeZone) {\n    if (!formats) return formats;\n    // The only way to set a time zone with `intl-messageformat` is to merge it into the formats\n    // https://github.com/formatjs/formatjs/blob/8256c5271505cf2606e48e3c97ecdd16ede4f1b5/packages/intl/src/message.ts#L15\n    return Object.keys(formats).reduce((acc, key)=>{\n        acc[key] = {\n            timeZone,\n            ...formats[key]\n        };\n        return acc;\n    }, {});\n}\n/**\n * `intl-messageformat` uses separate keys for `date` and `time`, but there's\n * only one native API: `Intl.DateTimeFormat`. Additionally you might want to\n * include both a time and a date in a value, therefore the separation doesn't\n * seem so useful. We offer a single `dateTime` namespace instead, but we have\n * to convert the format before `intl-messageformat` can be used.\n */ function convertFormatsToIntlMessageFormat(formats, timeZone) {\n    const formatsWithTimeZone = timeZone ? {\n        ...formats,\n        dateTime: setTimeZoneInFormats(formats.dateTime, timeZone)\n    } : formats;\n    const mfDateDefaults = IntlMessageFormat__default.default.formats.date;\n    const defaultDateFormats = timeZone ? setTimeZoneInFormats(mfDateDefaults, timeZone) : mfDateDefaults;\n    const mfTimeDefaults = IntlMessageFormat__default.default.formats.time;\n    const defaultTimeFormats = timeZone ? setTimeZoneInFormats(mfTimeDefaults, timeZone) : mfTimeDefaults;\n    return {\n        ...formatsWithTimeZone,\n        date: {\n            ...defaultDateFormats,\n            ...formatsWithTimeZone === null || formatsWithTimeZone === void 0 ? void 0 : formatsWithTimeZone.dateTime\n        },\n        time: {\n            ...defaultTimeFormats,\n            ...formatsWithTimeZone === null || formatsWithTimeZone === void 0 ? void 0 : formatsWithTimeZone.dateTime\n        }\n    };\n}\n// eslint-disable-next-line import/no-named-as-default -- False positive\nfunction resolvePath(locale, messages, key, namespace) {\n    const fullKey = initializeConfig.joinPath(namespace, key);\n    if (!messages) {\n        throw new Error(\"No messages available at `\".concat(namespace, \"`.\"));\n    }\n    let message = messages;\n    key.split(\".\").forEach((part)=>{\n        const next = message[part];\n        if (part == null || next == null) {\n            throw new Error(\"Could not resolve `\".concat(fullKey, \"` in messages for locale `\").concat(locale, \"`.\"));\n        }\n        message = next;\n    });\n    return message;\n}\nfunction prepareTranslationValues(values) {\n    if (Object.keys(values).length === 0) return undefined;\n    // Workaround for https://github.com/formatjs/formatjs/issues/1467\n    const transformedValues = {};\n    Object.keys(values).forEach((key)=>{\n        let index = 0;\n        const value = values[key];\n        let transformed;\n        if (typeof value === \"function\") {\n            transformed = (chunks)=>{\n                const result = value(chunks);\n                return /*#__PURE__*/ React.isValidElement(result) ? /*#__PURE__*/ React.cloneElement(result, {\n                    key: key + index++\n                }) : result;\n            };\n        } else {\n            transformed = value;\n        }\n        transformedValues[key] = transformed;\n    });\n    return transformedValues;\n}\nfunction getMessagesOrError(locale, messages, namespace) {\n    let onError = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : initializeConfig.defaultOnError;\n    try {\n        if (!messages) {\n            throw new Error(\"No messages were configured on the provider.\");\n        }\n        const retrievedMessages = namespace ? resolvePath(locale, messages, namespace) : messages;\n        if (!retrievedMessages) {\n            throw new Error(\"No messages for namespace `\".concat(namespace, \"` found.\"));\n        }\n        return retrievedMessages;\n    } catch (error) {\n        const intlError = new initializeConfig.IntlError(initializeConfig.IntlErrorCode.MISSING_MESSAGE, error.message);\n        onError(intlError);\n        return intlError;\n    }\n}\nfunction getPlainMessage(candidate, values) {\n    if (values) return undefined;\n    const unescapedMessage = candidate.replace(/'([{}])/gi, \"$1\");\n    // Placeholders can be in the message if there are default values,\n    // or if the user has forgotten to provide values. In the latter\n    // case we need to compile the message to receive an error.\n    const hasPlaceholders = /<|{/.test(unescapedMessage);\n    if (!hasPlaceholders) {\n        return unescapedMessage;\n    }\n    return undefined;\n}\nfunction createBaseTranslator(config) {\n    const messagesOrError = getMessagesOrError(config.locale, config.messages, config.namespace, config.onError);\n    return createBaseTranslatorImpl({\n        ...config,\n        messagesOrError\n    });\n}\nfunction createBaseTranslatorImpl(_ref) {\n    let { defaultTranslationValues, formats: globalFormats, getMessageFallback = initializeConfig.defaultGetMessageFallback, locale, messageFormatCache, messagesOrError, namespace, onError, timeZone } = _ref;\n    function getFallbackFromErrorAndNotify(key, code, message) {\n        const error = new initializeConfig.IntlError(code, message);\n        onError(error);\n        return getMessageFallback({\n            error,\n            key,\n            namespace\n        });\n    }\n    function translateBaseFn(/** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key, /** Key value pairs for values to interpolate into the message. */ values, /** Provide custom formats for numbers, dates and times. */ formats) {\n        if (messagesOrError instanceof initializeConfig.IntlError) {\n            // We have already warned about this during render\n            return getMessageFallback({\n                error: messagesOrError,\n                key,\n                namespace\n            });\n        }\n        const messages = messagesOrError;\n        let message;\n        try {\n            message = resolvePath(locale, messages, key, namespace);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, initializeConfig.IntlErrorCode.MISSING_MESSAGE, error.message);\n        }\n        const cacheKey = initializeConfig.joinPath(locale, namespace, key, String(message));\n        let messageFormat;\n        if (messageFormatCache !== null && messageFormatCache !== void 0 && messageFormatCache.has(cacheKey)) {\n            messageFormat = messageFormatCache.get(cacheKey);\n        } else {\n            if (typeof message === \"object\") {\n                let code, errorMessage;\n                if (Array.isArray(message)) {\n                    code = initializeConfig.IntlErrorCode.INVALID_MESSAGE;\n                    {\n                        errorMessage = \"Message at `\".concat(initializeConfig.joinPath(namespace, key), \"` resolved to an array, but only strings are supported. See https://next-intl-docs.vercel.app/docs/usage/messages#arrays-of-messages\");\n                    }\n                } else {\n                    code = initializeConfig.IntlErrorCode.INSUFFICIENT_PATH;\n                    {\n                        errorMessage = \"Message at `\".concat(initializeConfig.joinPath(namespace, key), \"` resolved to an object, but only strings are supported. Use a `.` to retrieve nested messages. See https://next-intl-docs.vercel.app/docs/usage/messages#structuring-messages\");\n                    }\n                }\n                return getFallbackFromErrorAndNotify(key, code, errorMessage);\n            }\n            // Hot path that avoids creating an `IntlMessageFormat` instance\n            const plainMessage = getPlainMessage(message, values);\n            if (plainMessage) return plainMessage;\n            try {\n                messageFormat = new IntlMessageFormat__default.default(message, locale, convertFormatsToIntlMessageFormat({\n                    ...globalFormats,\n                    ...formats\n                }, timeZone), {\n                    formatters: {\n                        getNumberFormat (locales, options) {\n                            return new Intl.NumberFormat(locales, options);\n                        },\n                        getDateTimeFormat (locales, options) {\n                            // Workaround for https://github.com/formatjs/formatjs/issues/4279\n                            return new Intl.DateTimeFormat(locales, {\n                                timeZone,\n                                ...options\n                            });\n                        },\n                        getPluralRules (locales, options) {\n                            return new Intl.PluralRules(locales, options);\n                        }\n                    }\n                });\n            } catch (error) {\n                const thrownError = error;\n                return getFallbackFromErrorAndNotify(key, initializeConfig.IntlErrorCode.INVALID_MESSAGE, thrownError.message + (\"originalMessage\" in thrownError ? \" (\".concat(thrownError.originalMessage, \")\") : \"\"));\n            }\n            messageFormatCache === null || messageFormatCache === void 0 || messageFormatCache.set(cacheKey, messageFormat);\n        }\n        try {\n            const formattedMessage = messageFormat.format(// @ts-expect-error `intl-messageformat` expects a different format\n            // for rich text elements since a recent minor update. This\n            // needs to be evaluated in detail, possibly also in regards\n            // to be able to format to parts.\n            prepareTranslationValues({\n                ...defaultTranslationValues,\n                ...values\n            }));\n            if (formattedMessage == null) {\n                throw new Error(\"Unable to format `\".concat(key, \"` in \").concat(namespace ? \"namespace `\".concat(namespace, \"`\") : \"messages\"));\n            }\n            // Limit the function signature to return strings or React elements\n            return /*#__PURE__*/ React.isValidElement(formattedMessage) || // Arrays of React elements\n            Array.isArray(formattedMessage) || typeof formattedMessage === \"string\" ? formattedMessage : String(formattedMessage);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, initializeConfig.IntlErrorCode.FORMATTING_ERROR, error.message);\n        }\n    }\n    function translateFn(/** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key, /** Key value pairs for values to interpolate into the message. */ values, /** Provide custom formats for numbers, dates and times. */ formats) {\n        const result = translateBaseFn(key, values, formats);\n        if (typeof result !== \"string\") {\n            return getFallbackFromErrorAndNotify(key, initializeConfig.IntlErrorCode.INVALID_MESSAGE, \"The message `\".concat(key, \"` in \").concat(namespace ? \"namespace `\".concat(namespace, \"`\") : \"messages\", \" didn't resolve to a string. If you want to format rich text, use `t.rich` instead.\"));\n        }\n        return result;\n    }\n    translateFn.rich = translateBaseFn;\n    // Augment `translateBaseFn` to return plain strings\n    translateFn.markup = (key, values, formats)=>{\n        const result = translateBaseFn(key, // @ts-expect-error -- `MarkupTranslationValues` is practically a sub type\n        // of `RichTranslationValues` but TypeScript isn't smart enough here.\n        values, formats);\n        // When only string chunks are provided to the parser, only\n        // strings should be returned here. Note that we need a runtime\n        // check for this since rich text values could be accidentally\n        // inherited from `defaultTranslationValues`.\n        if (typeof result !== \"string\") {\n            const error = new initializeConfig.IntlError(initializeConfig.IntlErrorCode.FORMATTING_ERROR, \"`t.markup` only accepts functions for formatting that receive and return strings.\\n\\nE.g. t.markup('markup', {b: (chunks) => `<b>${chunks}</b>`})\");\n            onError(error);\n            return getMessageFallback({\n                error,\n                key,\n                namespace\n            });\n        }\n        return result;\n    };\n    translateFn.raw = (key)=>{\n        if (messagesOrError instanceof initializeConfig.IntlError) {\n            // We have already warned about this during render\n            return getMessageFallback({\n                error: messagesOrError,\n                key,\n                namespace\n            });\n        }\n        const messages = messagesOrError;\n        try {\n            return resolvePath(locale, messages, key, namespace);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, initializeConfig.IntlErrorCode.MISSING_MESSAGE, error.message);\n        }\n    };\n    return translateFn;\n}\n/**\n * For the strictly typed messages to work we have to wrap the namespace into\n * a mandatory prefix. See https://stackoverflow.com/a/71529575/343045\n */ function resolveNamespace(namespace, namespacePrefix) {\n    return namespace === namespacePrefix ? undefined : namespace.slice((namespacePrefix + \".\").length);\n}\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst WEEK = DAY * 7;\nconst MONTH = DAY * (365 / 12); // Approximation\nconst QUARTER = MONTH * 3;\nconst YEAR = DAY * 365;\nconst UNIT_SECONDS = {\n    second: SECOND,\n    seconds: SECOND,\n    minute: MINUTE,\n    minutes: MINUTE,\n    hour: HOUR,\n    hours: HOUR,\n    day: DAY,\n    days: DAY,\n    week: WEEK,\n    weeks: WEEK,\n    month: MONTH,\n    months: MONTH,\n    quarter: QUARTER,\n    quarters: QUARTER,\n    year: YEAR,\n    years: YEAR\n};\nfunction resolveRelativeTimeUnit(seconds) {\n    const absValue = Math.abs(seconds);\n    if (absValue < MINUTE) {\n        return \"second\";\n    } else if (absValue < HOUR) {\n        return \"minute\";\n    } else if (absValue < DAY) {\n        return \"hour\";\n    } else if (absValue < WEEK) {\n        return \"day\";\n    } else if (absValue < MONTH) {\n        return \"week\";\n    } else if (absValue < YEAR) {\n        return \"month\";\n    }\n    return \"year\";\n}\nfunction calculateRelativeTimeValue(seconds, unit) {\n    // We have to round the resulting values, as `Intl.RelativeTimeFormat`\n    // will include fractions like '2.1 hours ago'.\n    return Math.round(seconds / UNIT_SECONDS[unit]);\n}\nfunction createFormatter(_ref) {\n    let { formats, locale, now: globalNow, onError = initializeConfig.defaultOnError, timeZone: globalTimeZone } = _ref;\n    function resolveFormatOrOptions(typeFormats, formatOrOptions) {\n        let options;\n        if (typeof formatOrOptions === \"string\") {\n            const formatName = formatOrOptions;\n            options = typeFormats === null || typeFormats === void 0 ? void 0 : typeFormats[formatName];\n            if (!options) {\n                const error = new initializeConfig.IntlError(initializeConfig.IntlErrorCode.MISSING_FORMAT, \"Format `\".concat(formatName, \"` is not available. You can configure it on the provider or provide custom options.\"));\n                onError(error);\n                throw error;\n            }\n        } else {\n            options = formatOrOptions;\n        }\n        return options;\n    }\n    function getFormattedValue(value, formatOrOptions, typeFormats, formatter) {\n        let options;\n        try {\n            options = resolveFormatOrOptions(typeFormats, formatOrOptions);\n        } catch (error) {\n            return String(value);\n        }\n        try {\n            return formatter(options);\n        } catch (error) {\n            onError(new initializeConfig.IntlError(initializeConfig.IntlErrorCode.FORMATTING_ERROR, error.message));\n            return String(value);\n        }\n    }\n    function dateTime(/** If a number is supplied, this is interpreted as a UTC timestamp. */ value, /** If a time zone is supplied, the `value` is converted to that time zone.\n   * Otherwise the user time zone will be used. */ formatOrOptions) {\n        return getFormattedValue(value, formatOrOptions, formats === null || formats === void 0 ? void 0 : formats.dateTime, (options)=>{\n            var _options;\n            if (!((_options = options) !== null && _options !== void 0 && _options.timeZone)) {\n                if (globalTimeZone) {\n                    options = {\n                        ...options,\n                        timeZone: globalTimeZone\n                    };\n                } else {\n                    onError(new initializeConfig.IntlError(initializeConfig.IntlErrorCode.ENVIRONMENT_FALLBACK, \"The `timeZone` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl-docs.vercel.app/docs/configuration#time-zone\"));\n                }\n            }\n            return new Intl.DateTimeFormat(locale, options).format(value);\n        });\n    }\n    function number(value, formatOrOptions) {\n        return getFormattedValue(value, formatOrOptions, formats === null || formats === void 0 ? void 0 : formats.number, (options)=>new Intl.NumberFormat(locale, options).format(value));\n    }\n    function getGlobalNow() {\n        if (globalNow) {\n            return globalNow;\n        } else {\n            onError(new initializeConfig.IntlError(initializeConfig.IntlErrorCode.ENVIRONMENT_FALLBACK, \"The `now` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl-docs.vercel.app/docs/configuration#now\"));\n            return new Date();\n        }\n    }\n    function extractNowDate(nowOrOptions) {\n        if (nowOrOptions instanceof Date || typeof nowOrOptions === \"number\") {\n            return new Date(nowOrOptions);\n        }\n        if ((nowOrOptions === null || nowOrOptions === void 0 ? void 0 : nowOrOptions.now) !== undefined) {\n            return new Date(nowOrOptions.now);\n        }\n        return getGlobalNow();\n    }\n    function relativeTime(/** The date time that needs to be formatted. */ date, /** The reference point in time to which `date` will be formatted in relation to.  */ nowOrOptions) {\n        try {\n            const dateDate = new Date(date);\n            const nowDate = extractNowDate(nowOrOptions);\n            const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;\n            const unit = typeof nowOrOptions === \"number\" || nowOrOptions instanceof Date || (nowOrOptions === null || nowOrOptions === void 0 ? void 0 : nowOrOptions.unit) === undefined ? resolveRelativeTimeUnit(seconds) : nowOrOptions.unit;\n            const value = calculateRelativeTimeValue(seconds, unit);\n            return new Intl.RelativeTimeFormat(locale, {\n                // `numeric: 'auto'` can theoretically produce output like \"yesterday\",\n                // but it only works with integers. E.g. -1 day will produce \"yesterday\",\n                // but -1.1 days will produce \"-1.1 days\". Rounding before formatting is\n                // not desired, as the given dates might cross a threshold were the\n                // output isn't correct anymore. Example: 2024-01-08T23:00:00.000Z and\n                // 2024-01-08T01:00:00.000Z would produce \"yesterday\", which is not the\n                // case. By using `always` we can ensure correct output. The only exception\n                // is the formatting of times <1 second as \"now\".\n                numeric: unit === \"second\" ? \"auto\" : \"always\"\n            }).format(value, unit);\n        } catch (error) {\n            onError(new initializeConfig.IntlError(initializeConfig.IntlErrorCode.FORMATTING_ERROR, error.message));\n            return String(date);\n        }\n    }\n    function list(value, formatOrOptions) {\n        return getFormattedValue(value, formatOrOptions, formats === null || formats === void 0 ? void 0 : formats.list, (options)=>new Intl.ListFormat(locale, options).format(value));\n    }\n    return {\n        dateTime,\n        number,\n        relativeTime,\n        list\n    };\n}\nexports.createBaseTranslator = createBaseTranslator;\nexports.createFormatter = createFormatter;\nexports.resolveNamespace = resolveNamespace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9kZXZlbG9wbWVudC9jcmVhdGVGb3JtYXR0ZXItM2ZjZDA5YjkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxvQkFBb0JDLG1CQUFPQSxDQUFDO0FBQ2hDLElBQUlDLFFBQVFELG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlFLG1CQUFtQkYsbUJBQU9BLENBQUM7QUFFL0IsU0FBU0csZ0JBQWlCQyxDQUFDO0lBQUksT0FBT0EsS0FBS0EsRUFBRUMsVUFBVSxHQUFHRCxJQUFJO1FBQUVFLFNBQVNGO0lBQUU7QUFBRztBQUU5RSxJQUFJRyw2QkFBNkIsV0FBVyxHQUFFSixnQkFBZ0JKO0FBRTlELHdFQUF3RTtBQUN4RSxTQUFTUyxxQkFBcUJDLE9BQU8sRUFBRUMsUUFBUTtJQUM3QyxJQUFJLENBQUNELFNBQVMsT0FBT0E7SUFFckIsNEZBQTRGO0lBQzVGLHNIQUFzSDtJQUN0SCxPQUFPRSxPQUFPQyxJQUFJLENBQUNILFNBQVNJLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQztRQUN2Q0QsR0FBRyxDQUFDQyxJQUFJLEdBQUc7WUFDVEw7WUFDQSxHQUFHRCxPQUFPLENBQUNNLElBQUk7UUFDakI7UUFDQSxPQUFPRDtJQUNULEdBQUcsQ0FBQztBQUNOO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU0Usa0NBQWtDUCxPQUFPLEVBQUVDLFFBQVE7SUFDMUQsTUFBTU8sc0JBQXNCUCxXQUFXO1FBQ3JDLEdBQUdELE9BQU87UUFDVlMsVUFBVVYscUJBQXFCQyxRQUFRUyxRQUFRLEVBQUVSO0lBQ25ELElBQUlEO0lBQ0osTUFBTVUsaUJBQWlCWiwyQkFBMkJELE9BQU8sQ0FBQ0csT0FBTyxDQUFDVyxJQUFJO0lBQ3RFLE1BQU1DLHFCQUFxQlgsV0FBV0YscUJBQXFCVyxnQkFBZ0JULFlBQVlTO0lBQ3ZGLE1BQU1HLGlCQUFpQmYsMkJBQTJCRCxPQUFPLENBQUNHLE9BQU8sQ0FBQ2MsSUFBSTtJQUN0RSxNQUFNQyxxQkFBcUJkLFdBQVdGLHFCQUFxQmMsZ0JBQWdCWixZQUFZWTtJQUN2RixPQUFPO1FBQ0wsR0FBR0wsbUJBQW1CO1FBQ3RCRyxNQUFNO1lBQ0osR0FBR0Msa0JBQWtCO1lBQ3JCLEdBQUlKLHdCQUF3QixRQUFRQSx3QkFBd0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsb0JBQW9CQyxRQUFRO1FBQzVHO1FBQ0FLLE1BQU07WUFDSixHQUFHQyxrQkFBa0I7WUFDckIsR0FBSVAsd0JBQXdCLFFBQVFBLHdCQUF3QixLQUFLLElBQUksS0FBSyxJQUFJQSxvQkFBb0JDLFFBQVE7UUFDNUc7SUFDRjtBQUNGO0FBRUEsd0VBQXdFO0FBQ3hFLFNBQVNPLFlBQVlDLE1BQU0sRUFBRUMsUUFBUSxFQUFFWixHQUFHLEVBQUVhLFNBQVM7SUFDbkQsTUFBTUMsVUFBVTNCLGlCQUFpQjRCLFFBQVEsQ0FBQ0YsV0FBV2I7SUFDckQsSUFBSSxDQUFDWSxVQUFVO1FBQ2IsTUFBTSxJQUFJSSxNQUFNLDZCQUE2QkMsTUFBTSxDQUFDSixXQUFXO0lBQ2pFO0lBQ0EsSUFBSUssVUFBVU47SUFDZFosSUFBSW1CLEtBQUssQ0FBQyxLQUFLQyxPQUFPLENBQUNDLENBQUFBO1FBQ3JCLE1BQU1DLE9BQU9KLE9BQU8sQ0FBQ0csS0FBSztRQUMxQixJQUFJQSxRQUFRLFFBQVFDLFFBQVEsTUFBTTtZQUNoQyxNQUFNLElBQUlOLE1BQU0sc0JBQXNCQyxNQUFNLENBQUNILFNBQVMsOEJBQThCRyxNQUFNLENBQUNOLFFBQVE7UUFDckc7UUFDQU8sVUFBVUk7SUFDWjtJQUNBLE9BQU9KO0FBQ1Q7QUFDQSxTQUFTSyx5QkFBeUJDLE1BQU07SUFDdEMsSUFBSTVCLE9BQU9DLElBQUksQ0FBQzJCLFFBQVFDLE1BQU0sS0FBSyxHQUFHLE9BQU9DO0lBRTdDLGtFQUFrRTtJQUNsRSxNQUFNQyxvQkFBb0IsQ0FBQztJQUMzQi9CLE9BQU9DLElBQUksQ0FBQzJCLFFBQVFKLE9BQU8sQ0FBQ3BCLENBQUFBO1FBQzFCLElBQUk0QixRQUFRO1FBQ1osTUFBTUMsUUFBUUwsTUFBTSxDQUFDeEIsSUFBSTtRQUN6QixJQUFJOEI7UUFDSixJQUFJLE9BQU9ELFVBQVUsWUFBWTtZQUMvQkMsY0FBY0MsQ0FBQUE7Z0JBQ1osTUFBTUMsU0FBU0gsTUFBTUU7Z0JBQ3JCLE9BQU8sV0FBVyxHQUFFN0MsTUFBTStDLGNBQWMsQ0FBQ0QsVUFBVSxXQUFXLEdBQUU5QyxNQUFNZ0QsWUFBWSxDQUFDRixRQUFRO29CQUN6RmhDLEtBQUtBLE1BQU00QjtnQkFDYixLQUFLSTtZQUNQO1FBQ0YsT0FBTztZQUNMRixjQUFjRDtRQUNoQjtRQUNBRixpQkFBaUIsQ0FBQzNCLElBQUksR0FBRzhCO0lBQzNCO0lBQ0EsT0FBT0g7QUFDVDtBQUNBLFNBQVNRLG1CQUFtQnhCLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxTQUFTO0lBQ3JELElBQUl1QixVQUFVQyxVQUFVWixNQUFNLEdBQUcsS0FBS1ksU0FBUyxDQUFDLEVBQUUsS0FBS1gsWUFBWVcsU0FBUyxDQUFDLEVBQUUsR0FBR2xELGlCQUFpQm1ELGNBQWM7SUFDakgsSUFBSTtRQUNGLElBQUksQ0FBQzFCLFVBQVU7WUFDYixNQUFNLElBQUlJLE1BQU07UUFDbEI7UUFDQSxNQUFNdUIsb0JBQW9CMUIsWUFBWUgsWUFBWUMsUUFBUUMsVUFBVUMsYUFBYUQ7UUFDakYsSUFBSSxDQUFDMkIsbUJBQW1CO1lBQ3RCLE1BQU0sSUFBSXZCLE1BQU0sOEJBQThCQyxNQUFNLENBQUNKLFdBQVc7UUFDbEU7UUFDQSxPQUFPMEI7SUFDVCxFQUFFLE9BQU9DLE9BQU87UUFDZCxNQUFNQyxZQUFZLElBQUl0RCxpQkFBaUJ1RCxTQUFTLENBQUN2RCxpQkFBaUJ3RCxhQUFhLENBQUNDLGVBQWUsRUFBRUosTUFBTXRCLE9BQU87UUFDOUdrQixRQUFRSztRQUNSLE9BQU9BO0lBQ1Q7QUFDRjtBQUNBLFNBQVNJLGdCQUFnQkMsU0FBUyxFQUFFdEIsTUFBTTtJQUN4QyxJQUFJQSxRQUFRLE9BQU9FO0lBQ25CLE1BQU1xQixtQkFBbUJELFVBQVVFLE9BQU8sQ0FBQyxhQUFhO0lBRXhELGtFQUFrRTtJQUNsRSxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU1DLGtCQUFrQixNQUFNQyxJQUFJLENBQUNIO0lBQ25DLElBQUksQ0FBQ0UsaUJBQWlCO1FBQ3BCLE9BQU9GO0lBQ1Q7SUFDQSxPQUFPckI7QUFDVDtBQUNBLFNBQVN5QixxQkFBcUJDLE1BQU07SUFDbEMsTUFBTUMsa0JBQWtCbEIsbUJBQW1CaUIsT0FBT3pDLE1BQU0sRUFBRXlDLE9BQU94QyxRQUFRLEVBQUV3QyxPQUFPdkMsU0FBUyxFQUFFdUMsT0FBT2hCLE9BQU87SUFDM0csT0FBT2tCLHlCQUF5QjtRQUM5QixHQUFHRixNQUFNO1FBQ1RDO0lBQ0Y7QUFDRjtBQUNBLFNBQVNDLHlCQUF5QkMsSUFBSTtJQUNwQyxJQUFJLEVBQ0ZDLHdCQUF3QixFQUN4QjlELFNBQVMrRCxhQUFhLEVBQ3RCQyxxQkFBcUJ2RSxpQkFBaUJ3RSx5QkFBeUIsRUFDL0RoRCxNQUFNLEVBQ05pRCxrQkFBa0IsRUFDbEJQLGVBQWUsRUFDZnhDLFNBQVMsRUFDVHVCLE9BQU8sRUFDUHpDLFFBQVEsRUFDVCxHQUFHNEQ7SUFDSixTQUFTTSw4QkFBOEI3RCxHQUFHLEVBQUU4RCxJQUFJLEVBQUU1QyxPQUFPO1FBQ3ZELE1BQU1zQixRQUFRLElBQUlyRCxpQkFBaUJ1RCxTQUFTLENBQUNvQixNQUFNNUM7UUFDbkRrQixRQUFRSTtRQUNSLE9BQU9rQixtQkFBbUI7WUFDeEJsQjtZQUNBeEM7WUFDQWE7UUFDRjtJQUNGO0lBQ0EsU0FBU2tELGdCQUFpQiw2RUFBNkUsR0FDdkcvRCxHQUFHLEVBQUUsZ0VBQWdFLEdBQ3JFd0IsTUFBTSxFQUFFLHlEQUF5RCxHQUNqRTlCLE9BQU87UUFDTCxJQUFJMkQsMkJBQTJCbEUsaUJBQWlCdUQsU0FBUyxFQUFFO1lBQ3pELGtEQUFrRDtZQUNsRCxPQUFPZ0IsbUJBQW1CO2dCQUN4QmxCLE9BQU9hO2dCQUNQckQ7Z0JBQ0FhO1lBQ0Y7UUFDRjtRQUNBLE1BQU1ELFdBQVd5QztRQUNqQixJQUFJbkM7UUFDSixJQUFJO1lBQ0ZBLFVBQVVSLFlBQVlDLFFBQVFDLFVBQVVaLEtBQUthO1FBQy9DLEVBQUUsT0FBTzJCLE9BQU87WUFDZCxPQUFPcUIsOEJBQThCN0QsS0FBS2IsaUJBQWlCd0QsYUFBYSxDQUFDQyxlQUFlLEVBQUVKLE1BQU10QixPQUFPO1FBQ3pHO1FBQ0EsTUFBTThDLFdBQVc3RSxpQkFBaUI0QixRQUFRLENBQUNKLFFBQVFFLFdBQVdiLEtBQUtpRSxPQUFPL0M7UUFDMUUsSUFBSWdEO1FBQ0osSUFBSU4sdUJBQXVCLFFBQVFBLHVCQUF1QixLQUFLLEtBQUtBLG1CQUFtQk8sR0FBRyxDQUFDSCxXQUFXO1lBQ3BHRSxnQkFBZ0JOLG1CQUFtQlEsR0FBRyxDQUFDSjtRQUN6QyxPQUFPO1lBQ0wsSUFBSSxPQUFPOUMsWUFBWSxVQUFVO2dCQUMvQixJQUFJNEMsTUFBTU87Z0JBQ1YsSUFBSUMsTUFBTUMsT0FBTyxDQUFDckQsVUFBVTtvQkFDMUI0QyxPQUFPM0UsaUJBQWlCd0QsYUFBYSxDQUFDNkIsZUFBZTtvQkFDckQ7d0JBQ0VILGVBQWUsZUFBZXBELE1BQU0sQ0FBQzlCLGlCQUFpQjRCLFFBQVEsQ0FBQ0YsV0FBV2IsTUFBTTtvQkFDbEY7Z0JBQ0YsT0FBTztvQkFDTDhELE9BQU8zRSxpQkFBaUJ3RCxhQUFhLENBQUM4QixpQkFBaUI7b0JBQ3ZEO3dCQUNFSixlQUFlLGVBQWVwRCxNQUFNLENBQUM5QixpQkFBaUI0QixRQUFRLENBQUNGLFdBQVdiLE1BQU07b0JBQ2xGO2dCQUNGO2dCQUNBLE9BQU82RCw4QkFBOEI3RCxLQUFLOEQsTUFBTU87WUFDbEQ7WUFFQSxnRUFBZ0U7WUFDaEUsTUFBTUssZUFBZTdCLGdCQUFnQjNCLFNBQVNNO1lBQzlDLElBQUlrRCxjQUFjLE9BQU9BO1lBQ3pCLElBQUk7Z0JBQ0ZSLGdCQUFnQixJQUFJMUUsMkJBQTJCRCxPQUFPLENBQUMyQixTQUFTUCxRQUFRVixrQ0FBa0M7b0JBQ3hHLEdBQUd3RCxhQUFhO29CQUNoQixHQUFHL0QsT0FBTztnQkFDWixHQUFHQyxXQUFXO29CQUNaZ0YsWUFBWTt3QkFDVkMsaUJBQWdCQyxPQUFPLEVBQUVDLE9BQU87NEJBQzlCLE9BQU8sSUFBSUMsS0FBS0MsWUFBWSxDQUFDSCxTQUFTQzt3QkFDeEM7d0JBQ0FHLG1CQUFrQkosT0FBTyxFQUFFQyxPQUFPOzRCQUNoQyxrRUFBa0U7NEJBQ2xFLE9BQU8sSUFBSUMsS0FBS0csY0FBYyxDQUFDTCxTQUFTO2dDQUN0Q2xGO2dDQUNBLEdBQUdtRixPQUFPOzRCQUNaO3dCQUNGO3dCQUNBSyxnQkFBZU4sT0FBTyxFQUFFQyxPQUFPOzRCQUM3QixPQUFPLElBQUlDLEtBQUtLLFdBQVcsQ0FBQ1AsU0FBU0M7d0JBQ3ZDO29CQUNGO2dCQUNGO1lBQ0YsRUFBRSxPQUFPdEMsT0FBTztnQkFDZCxNQUFNNkMsY0FBYzdDO2dCQUNwQixPQUFPcUIsOEJBQThCN0QsS0FBS2IsaUJBQWlCd0QsYUFBYSxDQUFDNkIsZUFBZSxFQUFFYSxZQUFZbkUsT0FBTyxHQUFJLHNCQUFxQm1FLGNBQWMsS0FBS3BFLE1BQU0sQ0FBQ29FLFlBQVlDLGVBQWUsRUFBRSxPQUFPLEVBQUM7WUFDdk07WUFDQTFCLHVCQUF1QixRQUFRQSx1QkFBdUIsS0FBSyxLQUFLQSxtQkFBbUIyQixHQUFHLENBQUN2QixVQUFVRTtRQUNuRztRQUNBLElBQUk7WUFDRixNQUFNc0IsbUJBQW1CdEIsY0FBY3VCLE1BQU0sQ0FDN0MsbUVBQW1FO1lBQ25FLDJEQUEyRDtZQUMzRCw0REFBNEQ7WUFDNUQsaUNBQWlDO1lBQ2pDbEUseUJBQXlCO2dCQUN2QixHQUFHaUMsd0JBQXdCO2dCQUMzQixHQUFHaEMsTUFBTTtZQUNYO1lBQ0EsSUFBSWdFLG9CQUFvQixNQUFNO2dCQUM1QixNQUFNLElBQUl4RSxNQUFNLHFCQUFxQkMsTUFBTSxDQUFDakIsS0FBSyxTQUFTaUIsTUFBTSxDQUFDSixZQUFZLGNBQWNJLE1BQU0sQ0FBQ0osV0FBVyxPQUFPO1lBQ3RIO1lBRUEsbUVBQW1FO1lBQ25FLE9BQU8sV0FBVyxHQUFFM0IsTUFBTStDLGNBQWMsQ0FBQ3VELHFCQUN6QywyQkFBMkI7WUFDM0JsQixNQUFNQyxPQUFPLENBQUNpQixxQkFBcUIsT0FBT0EscUJBQXFCLFdBQVdBLG1CQUFtQnZCLE9BQU91QjtRQUN0RyxFQUFFLE9BQU9oRCxPQUFPO1lBQ2QsT0FBT3FCLDhCQUE4QjdELEtBQUtiLGlCQUFpQndELGFBQWEsQ0FBQytDLGdCQUFnQixFQUFFbEQsTUFBTXRCLE9BQU87UUFDMUc7SUFDRjtJQUNBLFNBQVN5RSxZQUFhLDZFQUE2RSxHQUNuRzNGLEdBQUcsRUFBRSxnRUFBZ0UsR0FDckV3QixNQUFNLEVBQUUseURBQXlELEdBQ2pFOUIsT0FBTztRQUNMLE1BQU1zQyxTQUFTK0IsZ0JBQWdCL0QsS0FBS3dCLFFBQVE5QjtRQUM1QyxJQUFJLE9BQU9zQyxXQUFXLFVBQVU7WUFDOUIsT0FBTzZCLDhCQUE4QjdELEtBQUtiLGlCQUFpQndELGFBQWEsQ0FBQzZCLGVBQWUsRUFBRSxnQkFBZ0J2RCxNQUFNLENBQUNqQixLQUFLLFNBQVNpQixNQUFNLENBQUNKLFlBQVksY0FBY0ksTUFBTSxDQUFDSixXQUFXLE9BQU8sWUFBWTtRQUN2TTtRQUNBLE9BQU9tQjtJQUNUO0lBQ0EyRCxZQUFZQyxJQUFJLEdBQUc3QjtJQUVuQixvREFBb0Q7SUFDcEQ0QixZQUFZRSxNQUFNLEdBQUcsQ0FBQzdGLEtBQUt3QixRQUFROUI7UUFDakMsTUFBTXNDLFNBQVMrQixnQkFBZ0IvRCxLQUMvQiwwRUFBMEU7UUFDMUUscUVBQXFFO1FBQ3JFd0IsUUFBUTlCO1FBRVIsMkRBQTJEO1FBQzNELCtEQUErRDtRQUMvRCw4REFBOEQ7UUFDOUQsNkNBQTZDO1FBQzdDLElBQUksT0FBT3NDLFdBQVcsVUFBVTtZQUM5QixNQUFNUSxRQUFRLElBQUlyRCxpQkFBaUJ1RCxTQUFTLENBQUN2RCxpQkFBaUJ3RCxhQUFhLENBQUMrQyxnQkFBZ0IsRUFBRTtZQUM5RnRELFFBQVFJO1lBQ1IsT0FBT2tCLG1CQUFtQjtnQkFDeEJsQjtnQkFDQXhDO2dCQUNBYTtZQUNGO1FBQ0Y7UUFDQSxPQUFPbUI7SUFDVDtJQUNBMkQsWUFBWUcsR0FBRyxHQUFHOUYsQ0FBQUE7UUFDaEIsSUFBSXFELDJCQUEyQmxFLGlCQUFpQnVELFNBQVMsRUFBRTtZQUN6RCxrREFBa0Q7WUFDbEQsT0FBT2dCLG1CQUFtQjtnQkFDeEJsQixPQUFPYTtnQkFDUHJEO2dCQUNBYTtZQUNGO1FBQ0Y7UUFDQSxNQUFNRCxXQUFXeUM7UUFDakIsSUFBSTtZQUNGLE9BQU8zQyxZQUFZQyxRQUFRQyxVQUFVWixLQUFLYTtRQUM1QyxFQUFFLE9BQU8yQixPQUFPO1lBQ2QsT0FBT3FCLDhCQUE4QjdELEtBQUtiLGlCQUFpQndELGFBQWEsQ0FBQ0MsZUFBZSxFQUFFSixNQUFNdEIsT0FBTztRQUN6RztJQUNGO0lBQ0EsT0FBT3lFO0FBQ1Q7QUFFQTs7O0NBR0MsR0FDRCxTQUFTSSxpQkFBaUJsRixTQUFTLEVBQUVtRixlQUFlO0lBQ2xELE9BQU9uRixjQUFjbUYsa0JBQWtCdEUsWUFBWWIsVUFBVW9GLEtBQUssQ0FBQyxDQUFDRCxrQkFBa0IsR0FBRSxFQUFHdkUsTUFBTTtBQUNuRztBQUVBLE1BQU15RSxTQUFTO0FBQ2YsTUFBTUMsU0FBU0QsU0FBUztBQUN4QixNQUFNRSxPQUFPRCxTQUFTO0FBQ3RCLE1BQU1FLE1BQU1ELE9BQU87QUFDbkIsTUFBTUUsT0FBT0QsTUFBTTtBQUNuQixNQUFNRSxRQUFRRixNQUFPLE9BQU0sRUFBQyxHQUFJLGdCQUFnQjtBQUNoRCxNQUFNRyxVQUFVRCxRQUFRO0FBQ3hCLE1BQU1FLE9BQU9KLE1BQU07QUFDbkIsTUFBTUssZUFBZTtJQUNuQkMsUUFBUVQ7SUFDUlUsU0FBU1Y7SUFDVFcsUUFBUVY7SUFDUlcsU0FBU1g7SUFDVFksTUFBTVg7SUFDTlksT0FBT1o7SUFDUGEsS0FBS1o7SUFDTGEsTUFBTWI7SUFDTmMsTUFBTWI7SUFDTmMsT0FBT2Q7SUFDUGUsT0FBT2Q7SUFDUGUsUUFBUWY7SUFDUmdCLFNBQVNmO0lBQ1RnQixVQUFVaEI7SUFDVmlCLE1BQU1oQjtJQUNOaUIsT0FBT2pCO0FBQ1Q7QUFDQSxTQUFTa0Isd0JBQXdCZixPQUFPO0lBQ3RDLE1BQU1nQixXQUFXQyxLQUFLQyxHQUFHLENBQUNsQjtJQUMxQixJQUFJZ0IsV0FBV3pCLFFBQVE7UUFDckIsT0FBTztJQUNULE9BQU8sSUFBSXlCLFdBQVd4QixNQUFNO1FBQzFCLE9BQU87SUFDVCxPQUFPLElBQUl3QixXQUFXdkIsS0FBSztRQUN6QixPQUFPO0lBQ1QsT0FBTyxJQUFJdUIsV0FBV3RCLE1BQU07UUFDMUIsT0FBTztJQUNULE9BQU8sSUFBSXNCLFdBQVdyQixPQUFPO1FBQzNCLE9BQU87SUFDVCxPQUFPLElBQUlxQixXQUFXbkIsTUFBTTtRQUMxQixPQUFPO0lBQ1Q7SUFDQSxPQUFPO0FBQ1Q7QUFDQSxTQUFTc0IsMkJBQTJCbkIsT0FBTyxFQUFFb0IsSUFBSTtJQUMvQyxzRUFBc0U7SUFDdEUsK0NBQStDO0lBQy9DLE9BQU9ILEtBQUtJLEtBQUssQ0FBQ3JCLFVBQVVGLFlBQVksQ0FBQ3NCLEtBQUs7QUFDaEQ7QUFDQSxTQUFTRSxnQkFBZ0IzRSxJQUFJO0lBQzNCLElBQUksRUFDRjdELE9BQU8sRUFDUGlCLE1BQU0sRUFDTndILEtBQUtDLFNBQVMsRUFDZGhHLFVBQVVqRCxpQkFBaUJtRCxjQUFjLEVBQ3pDM0MsVUFBVTBJLGNBQWMsRUFDekIsR0FBRzlFO0lBQ0osU0FBUytFLHVCQUF1QkMsV0FBVyxFQUFFQyxlQUFlO1FBQzFELElBQUkxRDtRQUNKLElBQUksT0FBTzBELG9CQUFvQixVQUFVO1lBQ3ZDLE1BQU1DLGFBQWFEO1lBQ25CMUQsVUFBVXlELGdCQUFnQixRQUFRQSxnQkFBZ0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsV0FBVyxDQUFDRSxXQUFXO1lBQzNGLElBQUksQ0FBQzNELFNBQVM7Z0JBQ1osTUFBTXRDLFFBQVEsSUFBSXJELGlCQUFpQnVELFNBQVMsQ0FBQ3ZELGlCQUFpQndELGFBQWEsQ0FBQytGLGNBQWMsRUFBRSxXQUFXekgsTUFBTSxDQUFDd0gsWUFBWTtnQkFDMUhyRyxRQUFRSTtnQkFDUixNQUFNQTtZQUNSO1FBQ0YsT0FBTztZQUNMc0MsVUFBVTBEO1FBQ1o7UUFDQSxPQUFPMUQ7SUFDVDtJQUNBLFNBQVM2RCxrQkFBa0I5RyxLQUFLLEVBQUUyRyxlQUFlLEVBQUVELFdBQVcsRUFBRUssU0FBUztRQUN2RSxJQUFJOUQ7UUFDSixJQUFJO1lBQ0ZBLFVBQVV3RCx1QkFBdUJDLGFBQWFDO1FBQ2hELEVBQUUsT0FBT2hHLE9BQU87WUFDZCxPQUFPeUIsT0FBT3BDO1FBQ2hCO1FBQ0EsSUFBSTtZQUNGLE9BQU8rRyxVQUFVOUQ7UUFDbkIsRUFBRSxPQUFPdEMsT0FBTztZQUNkSixRQUFRLElBQUlqRCxpQkFBaUJ1RCxTQUFTLENBQUN2RCxpQkFBaUJ3RCxhQUFhLENBQUMrQyxnQkFBZ0IsRUFBRWxELE1BQU10QixPQUFPO1lBQ3JHLE9BQU8rQyxPQUFPcEM7UUFDaEI7SUFDRjtJQUNBLFNBQVMxQixTQUFVLHFFQUFxRSxHQUN4RjBCLEtBQUssRUFDTDtnREFDOEMsR0FDOUMyRyxlQUFlO1FBQ2IsT0FBT0csa0JBQWtCOUcsT0FBTzJHLGlCQUFpQjlJLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRUyxRQUFRLEVBQUUyRSxDQUFBQTtZQUNuSCxJQUFJK0Q7WUFDSixJQUFJLENBQUUsRUFBQ0EsV0FBVy9ELE9BQU0sTUFBTyxRQUFRK0QsYUFBYSxLQUFLLEtBQUtBLFNBQVNsSixRQUFRLEdBQUc7Z0JBQ2hGLElBQUkwSSxnQkFBZ0I7b0JBQ2xCdkQsVUFBVTt3QkFDUixHQUFHQSxPQUFPO3dCQUNWbkYsVUFBVTBJO29CQUNaO2dCQUNGLE9BQU87b0JBQ0xqRyxRQUFRLElBQUlqRCxpQkFBaUJ1RCxTQUFTLENBQUN2RCxpQkFBaUJ3RCxhQUFhLENBQUNtRyxvQkFBb0IsRUFBRTtnQkFDOUY7WUFDRjtZQUNBLE9BQU8sSUFBSS9ELEtBQUtHLGNBQWMsQ0FBQ3ZFLFFBQVFtRSxTQUFTVyxNQUFNLENBQUM1RDtRQUN6RDtJQUNGO0lBQ0EsU0FBU2tILE9BQU9sSCxLQUFLLEVBQUUyRyxlQUFlO1FBQ3BDLE9BQU9HLGtCQUFrQjlHLE9BQU8yRyxpQkFBaUI5SSxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUXFKLE1BQU0sRUFBRWpFLENBQUFBLFVBQVcsSUFBSUMsS0FBS0MsWUFBWSxDQUFDckUsUUFBUW1FLFNBQVNXLE1BQU0sQ0FBQzVEO0lBQzlLO0lBQ0EsU0FBU21IO1FBQ1AsSUFBSVosV0FBVztZQUNiLE9BQU9BO1FBQ1QsT0FBTztZQUNMaEcsUUFBUSxJQUFJakQsaUJBQWlCdUQsU0FBUyxDQUFDdkQsaUJBQWlCd0QsYUFBYSxDQUFDbUcsb0JBQW9CLEVBQUU7WUFDNUYsT0FBTyxJQUFJRztRQUNiO0lBQ0Y7SUFDQSxTQUFTQyxlQUFlQyxZQUFZO1FBQ2xDLElBQUlBLHdCQUF3QkYsUUFBUSxPQUFPRSxpQkFBaUIsVUFBVTtZQUNwRSxPQUFPLElBQUlGLEtBQUtFO1FBQ2xCO1FBQ0EsSUFBSSxDQUFDQSxpQkFBaUIsUUFBUUEsaUJBQWlCLEtBQUssSUFBSSxLQUFLLElBQUlBLGFBQWFoQixHQUFHLE1BQU16RyxXQUFXO1lBQ2hHLE9BQU8sSUFBSXVILEtBQUtFLGFBQWFoQixHQUFHO1FBQ2xDO1FBQ0EsT0FBT2E7SUFDVDtJQUNBLFNBQVNJLGFBQWMsOENBQThDLEdBQ3JFL0ksSUFBSSxFQUFFLG1GQUFtRixHQUN6RjhJLFlBQVk7UUFDVixJQUFJO1lBQ0YsTUFBTUUsV0FBVyxJQUFJSixLQUFLNUk7WUFDMUIsTUFBTWlKLFVBQVVKLGVBQWVDO1lBQy9CLE1BQU12QyxVQUFVLENBQUN5QyxTQUFTRSxPQUFPLEtBQUtELFFBQVFDLE9BQU8sRUFBQyxJQUFLO1lBQzNELE1BQU12QixPQUFPLE9BQU9tQixpQkFBaUIsWUFBWUEsd0JBQXdCRixRQUFRLENBQUNFLGlCQUFpQixRQUFRQSxpQkFBaUIsS0FBSyxJQUFJLEtBQUssSUFBSUEsYUFBYW5CLElBQUksTUFBTXRHLFlBQVlpRyx3QkFBd0JmLFdBQVd1QyxhQUFhbkIsSUFBSTtZQUNyTyxNQUFNbkcsUUFBUWtHLDJCQUEyQm5CLFNBQVNvQjtZQUNsRCxPQUFPLElBQUlqRCxLQUFLeUUsa0JBQWtCLENBQUM3SSxRQUFRO2dCQUN6Qyx1RUFBdUU7Z0JBQ3ZFLHlFQUF5RTtnQkFDekUsd0VBQXdFO2dCQUN4RSxtRUFBbUU7Z0JBQ25FLHNFQUFzRTtnQkFDdEUsdUVBQXVFO2dCQUN2RSwyRUFBMkU7Z0JBQzNFLGlEQUFpRDtnQkFDakQ4SSxTQUFTekIsU0FBUyxXQUFXLFNBQVM7WUFDeEMsR0FBR3ZDLE1BQU0sQ0FBQzVELE9BQU9tRztRQUNuQixFQUFFLE9BQU94RixPQUFPO1lBQ2RKLFFBQVEsSUFBSWpELGlCQUFpQnVELFNBQVMsQ0FBQ3ZELGlCQUFpQndELGFBQWEsQ0FBQytDLGdCQUFnQixFQUFFbEQsTUFBTXRCLE9BQU87WUFDckcsT0FBTytDLE9BQU81RDtRQUNoQjtJQUNGO0lBQ0EsU0FBU3FKLEtBQUs3SCxLQUFLLEVBQUUyRyxlQUFlO1FBQ2xDLE9BQU9HLGtCQUFrQjlHLE9BQU8yRyxpQkFBaUI5SSxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUWdLLElBQUksRUFBRTVFLENBQUFBLFVBQVcsSUFBSUMsS0FBSzRFLFVBQVUsQ0FBQ2hKLFFBQVFtRSxTQUFTVyxNQUFNLENBQUM1RDtJQUMxSztJQUNBLE9BQU87UUFDTDFCO1FBQ0E0STtRQUNBSztRQUNBTTtJQUNGO0FBQ0Y7QUFFQUUsNEJBQTRCLEdBQUd6RztBQUMvQnlHLHVCQUF1QixHQUFHMUI7QUFDMUIwQix3QkFBd0IsR0FBRzdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JyYWxpbmstd2ViLy4vbm9kZV9tb2R1bGVzL3VzZS1pbnRsL2Rpc3QvZGV2ZWxvcG1lbnQvY3JlYXRlRm9ybWF0dGVyLTNmY2QwOWI5LmpzPzBjNTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSW50bE1lc3NhZ2VGb3JtYXQgPSByZXF1aXJlKCdpbnRsLW1lc3NhZ2Vmb3JtYXQnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgaW5pdGlhbGl6ZUNvbmZpZyA9IHJlcXVpcmUoJy4vaW5pdGlhbGl6ZUNvbmZpZy1jNTAzZTIxNS5qcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgZGVmYXVsdDogZSB9OyB9XG5cbnZhciBJbnRsTWVzc2FnZUZvcm1hdF9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHQoSW50bE1lc3NhZ2VGb3JtYXQpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW5hbWVkLWFzLWRlZmF1bHQgLS0gRmFsc2UgcG9zaXRpdmVcbmZ1bmN0aW9uIHNldFRpbWVab25lSW5Gb3JtYXRzKGZvcm1hdHMsIHRpbWVab25lKSB7XG4gIGlmICghZm9ybWF0cykgcmV0dXJuIGZvcm1hdHM7XG5cbiAgLy8gVGhlIG9ubHkgd2F5IHRvIHNldCBhIHRpbWUgem9uZSB3aXRoIGBpbnRsLW1lc3NhZ2Vmb3JtYXRgIGlzIHRvIG1lcmdlIGl0IGludG8gdGhlIGZvcm1hdHNcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm1hdGpzL2Zvcm1hdGpzL2Jsb2IvODI1NmM1MjcxNTA1Y2YyNjA2ZTQ4ZTNjOTdlY2RkMTZlZGU0ZjFiNS9wYWNrYWdlcy9pbnRsL3NyYy9tZXNzYWdlLnRzI0wxNVxuICByZXR1cm4gT2JqZWN0LmtleXMoZm9ybWF0cykucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGFjY1trZXldID0ge1xuICAgICAgdGltZVpvbmUsXG4gICAgICAuLi5mb3JtYXRzW2tleV1cbiAgICB9O1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cblxuLyoqXG4gKiBgaW50bC1tZXNzYWdlZm9ybWF0YCB1c2VzIHNlcGFyYXRlIGtleXMgZm9yIGBkYXRlYCBhbmQgYHRpbWVgLCBidXQgdGhlcmUnc1xuICogb25seSBvbmUgbmF0aXZlIEFQSTogYEludGwuRGF0ZVRpbWVGb3JtYXRgLiBBZGRpdGlvbmFsbHkgeW91IG1pZ2h0IHdhbnQgdG9cbiAqIGluY2x1ZGUgYm90aCBhIHRpbWUgYW5kIGEgZGF0ZSBpbiBhIHZhbHVlLCB0aGVyZWZvcmUgdGhlIHNlcGFyYXRpb24gZG9lc24ndFxuICogc2VlbSBzbyB1c2VmdWwuIFdlIG9mZmVyIGEgc2luZ2xlIGBkYXRlVGltZWAgbmFtZXNwYWNlIGluc3RlYWQsIGJ1dCB3ZSBoYXZlXG4gKiB0byBjb252ZXJ0IHRoZSBmb3JtYXQgYmVmb3JlIGBpbnRsLW1lc3NhZ2Vmb3JtYXRgIGNhbiBiZSB1c2VkLlxuICovXG5mdW5jdGlvbiBjb252ZXJ0Rm9ybWF0c1RvSW50bE1lc3NhZ2VGb3JtYXQoZm9ybWF0cywgdGltZVpvbmUpIHtcbiAgY29uc3QgZm9ybWF0c1dpdGhUaW1lWm9uZSA9IHRpbWVab25lID8ge1xuICAgIC4uLmZvcm1hdHMsXG4gICAgZGF0ZVRpbWU6IHNldFRpbWVab25lSW5Gb3JtYXRzKGZvcm1hdHMuZGF0ZVRpbWUsIHRpbWVab25lKVxuICB9IDogZm9ybWF0cztcbiAgY29uc3QgbWZEYXRlRGVmYXVsdHMgPSBJbnRsTWVzc2FnZUZvcm1hdF9fZGVmYXVsdC5kZWZhdWx0LmZvcm1hdHMuZGF0ZTtcbiAgY29uc3QgZGVmYXVsdERhdGVGb3JtYXRzID0gdGltZVpvbmUgPyBzZXRUaW1lWm9uZUluRm9ybWF0cyhtZkRhdGVEZWZhdWx0cywgdGltZVpvbmUpIDogbWZEYXRlRGVmYXVsdHM7XG4gIGNvbnN0IG1mVGltZURlZmF1bHRzID0gSW50bE1lc3NhZ2VGb3JtYXRfX2RlZmF1bHQuZGVmYXVsdC5mb3JtYXRzLnRpbWU7XG4gIGNvbnN0IGRlZmF1bHRUaW1lRm9ybWF0cyA9IHRpbWVab25lID8gc2V0VGltZVpvbmVJbkZvcm1hdHMobWZUaW1lRGVmYXVsdHMsIHRpbWVab25lKSA6IG1mVGltZURlZmF1bHRzO1xuICByZXR1cm4ge1xuICAgIC4uLmZvcm1hdHNXaXRoVGltZVpvbmUsXG4gICAgZGF0ZToge1xuICAgICAgLi4uZGVmYXVsdERhdGVGb3JtYXRzLFxuICAgICAgLi4uKGZvcm1hdHNXaXRoVGltZVpvbmUgPT09IG51bGwgfHwgZm9ybWF0c1dpdGhUaW1lWm9uZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZm9ybWF0c1dpdGhUaW1lWm9uZS5kYXRlVGltZSlcbiAgICB9LFxuICAgIHRpbWU6IHtcbiAgICAgIC4uLmRlZmF1bHRUaW1lRm9ybWF0cyxcbiAgICAgIC4uLihmb3JtYXRzV2l0aFRpbWVab25lID09PSBudWxsIHx8IGZvcm1hdHNXaXRoVGltZVpvbmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZvcm1hdHNXaXRoVGltZVpvbmUuZGF0ZVRpbWUpXG4gICAgfVxuICB9O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW5hbWVkLWFzLWRlZmF1bHQgLS0gRmFsc2UgcG9zaXRpdmVcbmZ1bmN0aW9uIHJlc29sdmVQYXRoKGxvY2FsZSwgbWVzc2FnZXMsIGtleSwgbmFtZXNwYWNlKSB7XG4gIGNvbnN0IGZ1bGxLZXkgPSBpbml0aWFsaXplQ29uZmlnLmpvaW5QYXRoKG5hbWVzcGFjZSwga2V5KTtcbiAgaWYgKCFtZXNzYWdlcykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIG1lc3NhZ2VzIGF2YWlsYWJsZSBhdCBgXCIuY29uY2F0KG5hbWVzcGFjZSwgXCJgLlwiKSApO1xuICB9XG4gIGxldCBtZXNzYWdlID0gbWVzc2FnZXM7XG4gIGtleS5zcGxpdCgnLicpLmZvckVhY2gocGFydCA9PiB7XG4gICAgY29uc3QgbmV4dCA9IG1lc3NhZ2VbcGFydF07XG4gICAgaWYgKHBhcnQgPT0gbnVsbCB8fCBuZXh0ID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCByZXNvbHZlIGBcIi5jb25jYXQoZnVsbEtleSwgXCJgIGluIG1lc3NhZ2VzIGZvciBsb2NhbGUgYFwiKS5jb25jYXQobG9jYWxlLCBcImAuXCIpICk7XG4gICAgfVxuICAgIG1lc3NhZ2UgPSBuZXh0O1xuICB9KTtcbiAgcmV0dXJuIG1lc3NhZ2U7XG59XG5mdW5jdGlvbiBwcmVwYXJlVHJhbnNsYXRpb25WYWx1ZXModmFsdWVzKSB7XG4gIGlmIChPYmplY3Qua2V5cyh2YWx1ZXMpLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vZm9ybWF0anMvZm9ybWF0anMvaXNzdWVzLzE0NjdcbiAgY29uc3QgdHJhbnNmb3JtZWRWYWx1ZXMgPSB7fTtcbiAgT2JqZWN0LmtleXModmFsdWVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1trZXldO1xuICAgIGxldCB0cmFuc2Zvcm1lZDtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0cmFuc2Zvcm1lZCA9IGNodW5rcyA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlKGNodW5rcyk7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQocmVzdWx0KSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQocmVzdWx0LCB7XG4gICAgICAgICAga2V5OiBrZXkgKyBpbmRleCsrXG4gICAgICAgIH0pIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNmb3JtZWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgdHJhbnNmb3JtZWRWYWx1ZXNba2V5XSA9IHRyYW5zZm9ybWVkO1xuICB9KTtcbiAgcmV0dXJuIHRyYW5zZm9ybWVkVmFsdWVzO1xufVxuZnVuY3Rpb24gZ2V0TWVzc2FnZXNPckVycm9yKGxvY2FsZSwgbWVzc2FnZXMsIG5hbWVzcGFjZSkge1xuICBsZXQgb25FcnJvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogaW5pdGlhbGl6ZUNvbmZpZy5kZWZhdWx0T25FcnJvcjtcbiAgdHJ5IHtcbiAgICBpZiAoIW1lc3NhZ2VzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBtZXNzYWdlcyB3ZXJlIGNvbmZpZ3VyZWQgb24gdGhlIHByb3ZpZGVyLlwiICk7XG4gICAgfVxuICAgIGNvbnN0IHJldHJpZXZlZE1lc3NhZ2VzID0gbmFtZXNwYWNlID8gcmVzb2x2ZVBhdGgobG9jYWxlLCBtZXNzYWdlcywgbmFtZXNwYWNlKSA6IG1lc3NhZ2VzO1xuICAgIGlmICghcmV0cmlldmVkTWVzc2FnZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIG1lc3NhZ2VzIGZvciBuYW1lc3BhY2UgYFwiLmNvbmNhdChuYW1lc3BhY2UsIFwiYCBmb3VuZC5cIikgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHJpZXZlZE1lc3NhZ2VzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IGludGxFcnJvciA9IG5ldyBpbml0aWFsaXplQ29uZmlnLkludGxFcnJvcihpbml0aWFsaXplQ29uZmlnLkludGxFcnJvckNvZGUuTUlTU0lOR19NRVNTQUdFLCBlcnJvci5tZXNzYWdlKTtcbiAgICBvbkVycm9yKGludGxFcnJvcik7XG4gICAgcmV0dXJuIGludGxFcnJvcjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UGxhaW5NZXNzYWdlKGNhbmRpZGF0ZSwgdmFsdWVzKSB7XG4gIGlmICh2YWx1ZXMpIHJldHVybiB1bmRlZmluZWQ7XG4gIGNvbnN0IHVuZXNjYXBlZE1lc3NhZ2UgPSBjYW5kaWRhdGUucmVwbGFjZSgvJyhbe31dKS9naSwgJyQxJyk7XG5cbiAgLy8gUGxhY2Vob2xkZXJzIGNhbiBiZSBpbiB0aGUgbWVzc2FnZSBpZiB0aGVyZSBhcmUgZGVmYXVsdCB2YWx1ZXMsXG4gIC8vIG9yIGlmIHRoZSB1c2VyIGhhcyBmb3Jnb3R0ZW4gdG8gcHJvdmlkZSB2YWx1ZXMuIEluIHRoZSBsYXR0ZXJcbiAgLy8gY2FzZSB3ZSBuZWVkIHRvIGNvbXBpbGUgdGhlIG1lc3NhZ2UgdG8gcmVjZWl2ZSBhbiBlcnJvci5cbiAgY29uc3QgaGFzUGxhY2Vob2xkZXJzID0gLzx8ey8udGVzdCh1bmVzY2FwZWRNZXNzYWdlKTtcbiAgaWYgKCFoYXNQbGFjZWhvbGRlcnMpIHtcbiAgICByZXR1cm4gdW5lc2NhcGVkTWVzc2FnZTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gY3JlYXRlQmFzZVRyYW5zbGF0b3IoY29uZmlnKSB7XG4gIGNvbnN0IG1lc3NhZ2VzT3JFcnJvciA9IGdldE1lc3NhZ2VzT3JFcnJvcihjb25maWcubG9jYWxlLCBjb25maWcubWVzc2FnZXMsIGNvbmZpZy5uYW1lc3BhY2UsIGNvbmZpZy5vbkVycm9yKTtcbiAgcmV0dXJuIGNyZWF0ZUJhc2VUcmFuc2xhdG9ySW1wbCh7XG4gICAgLi4uY29uZmlnLFxuICAgIG1lc3NhZ2VzT3JFcnJvclxuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VUcmFuc2xhdG9ySW1wbChfcmVmKSB7XG4gIGxldCB7XG4gICAgZGVmYXVsdFRyYW5zbGF0aW9uVmFsdWVzLFxuICAgIGZvcm1hdHM6IGdsb2JhbEZvcm1hdHMsXG4gICAgZ2V0TWVzc2FnZUZhbGxiYWNrID0gaW5pdGlhbGl6ZUNvbmZpZy5kZWZhdWx0R2V0TWVzc2FnZUZhbGxiYWNrLFxuICAgIGxvY2FsZSxcbiAgICBtZXNzYWdlRm9ybWF0Q2FjaGUsXG4gICAgbWVzc2FnZXNPckVycm9yLFxuICAgIG5hbWVzcGFjZSxcbiAgICBvbkVycm9yLFxuICAgIHRpbWVab25lXG4gIH0gPSBfcmVmO1xuICBmdW5jdGlvbiBnZXRGYWxsYmFja0Zyb21FcnJvckFuZE5vdGlmeShrZXksIGNvZGUsIG1lc3NhZ2UpIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBpbml0aWFsaXplQ29uZmlnLkludGxFcnJvcihjb2RlLCBtZXNzYWdlKTtcbiAgICBvbkVycm9yKGVycm9yKTtcbiAgICByZXR1cm4gZ2V0TWVzc2FnZUZhbGxiYWNrKHtcbiAgICAgIGVycm9yLFxuICAgICAga2V5LFxuICAgICAgbmFtZXNwYWNlXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdHJhbnNsYXRlQmFzZUZuKCAvKiogVXNlIGEgZG90IHRvIGluZGljYXRlIGEgbGV2ZWwgb2YgbmVzdGluZyAoZS5nLiBgbmFtZXNwYWNlLm5lc3RlZExhYmVsYCkuICovXG4gIGtleSwgLyoqIEtleSB2YWx1ZSBwYWlycyBmb3IgdmFsdWVzIHRvIGludGVycG9sYXRlIGludG8gdGhlIG1lc3NhZ2UuICovXG4gIHZhbHVlcywgLyoqIFByb3ZpZGUgY3VzdG9tIGZvcm1hdHMgZm9yIG51bWJlcnMsIGRhdGVzIGFuZCB0aW1lcy4gKi9cbiAgZm9ybWF0cykge1xuICAgIGlmIChtZXNzYWdlc09yRXJyb3IgaW5zdGFuY2VvZiBpbml0aWFsaXplQ29uZmlnLkludGxFcnJvcikge1xuICAgICAgLy8gV2UgaGF2ZSBhbHJlYWR5IHdhcm5lZCBhYm91dCB0aGlzIGR1cmluZyByZW5kZXJcbiAgICAgIHJldHVybiBnZXRNZXNzYWdlRmFsbGJhY2soe1xuICAgICAgICBlcnJvcjogbWVzc2FnZXNPckVycm9yLFxuICAgICAgICBrZXksXG4gICAgICAgIG5hbWVzcGFjZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2VzID0gbWVzc2FnZXNPckVycm9yO1xuICAgIGxldCBtZXNzYWdlO1xuICAgIHRyeSB7XG4gICAgICBtZXNzYWdlID0gcmVzb2x2ZVBhdGgobG9jYWxlLCBtZXNzYWdlcywga2V5LCBuYW1lc3BhY2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZ2V0RmFsbGJhY2tGcm9tRXJyb3JBbmROb3RpZnkoa2V5LCBpbml0aWFsaXplQ29uZmlnLkludGxFcnJvckNvZGUuTUlTU0lOR19NRVNTQUdFLCBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gICAgY29uc3QgY2FjaGVLZXkgPSBpbml0aWFsaXplQ29uZmlnLmpvaW5QYXRoKGxvY2FsZSwgbmFtZXNwYWNlLCBrZXksIFN0cmluZyhtZXNzYWdlKSk7XG4gICAgbGV0IG1lc3NhZ2VGb3JtYXQ7XG4gICAgaWYgKG1lc3NhZ2VGb3JtYXRDYWNoZSAhPT0gbnVsbCAmJiBtZXNzYWdlRm9ybWF0Q2FjaGUgIT09IHZvaWQgMCAmJiBtZXNzYWdlRm9ybWF0Q2FjaGUuaGFzKGNhY2hlS2V5KSkge1xuICAgICAgbWVzc2FnZUZvcm1hdCA9IG1lc3NhZ2VGb3JtYXRDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGxldCBjb2RlLCBlcnJvck1lc3NhZ2U7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1lc3NhZ2UpKSB7XG4gICAgICAgICAgY29kZSA9IGluaXRpYWxpemVDb25maWcuSW50bEVycm9yQ29kZS5JTlZBTElEX01FU1NBR0U7XG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJNZXNzYWdlIGF0IGBcIi5jb25jYXQoaW5pdGlhbGl6ZUNvbmZpZy5qb2luUGF0aChuYW1lc3BhY2UsIGtleSksIFwiYCByZXNvbHZlZCB0byBhbiBhcnJheSwgYnV0IG9ubHkgc3RyaW5ncyBhcmUgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9uZXh0LWludGwtZG9jcy52ZXJjZWwuYXBwL2RvY3MvdXNhZ2UvbWVzc2FnZXMjYXJyYXlzLW9mLW1lc3NhZ2VzXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb2RlID0gaW5pdGlhbGl6ZUNvbmZpZy5JbnRsRXJyb3JDb2RlLklOU1VGRklDSUVOVF9QQVRIO1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiTWVzc2FnZSBhdCBgXCIuY29uY2F0KGluaXRpYWxpemVDb25maWcuam9pblBhdGgobmFtZXNwYWNlLCBrZXkpLCBcImAgcmVzb2x2ZWQgdG8gYW4gb2JqZWN0LCBidXQgb25seSBzdHJpbmdzIGFyZSBzdXBwb3J0ZWQuIFVzZSBhIGAuYCB0byByZXRyaWV2ZSBuZXN0ZWQgbWVzc2FnZXMuIFNlZSBodHRwczovL25leHQtaW50bC1kb2NzLnZlcmNlbC5hcHAvZG9jcy91c2FnZS9tZXNzYWdlcyNzdHJ1Y3R1cmluZy1tZXNzYWdlc1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgY29kZSwgZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgLy8gSG90IHBhdGggdGhhdCBhdm9pZHMgY3JlYXRpbmcgYW4gYEludGxNZXNzYWdlRm9ybWF0YCBpbnN0YW5jZVxuICAgICAgY29uc3QgcGxhaW5NZXNzYWdlID0gZ2V0UGxhaW5NZXNzYWdlKG1lc3NhZ2UsIHZhbHVlcyk7XG4gICAgICBpZiAocGxhaW5NZXNzYWdlKSByZXR1cm4gcGxhaW5NZXNzYWdlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbWVzc2FnZUZvcm1hdCA9IG5ldyBJbnRsTWVzc2FnZUZvcm1hdF9fZGVmYXVsdC5kZWZhdWx0KG1lc3NhZ2UsIGxvY2FsZSwgY29udmVydEZvcm1hdHNUb0ludGxNZXNzYWdlRm9ybWF0KHtcbiAgICAgICAgICAuLi5nbG9iYWxGb3JtYXRzLFxuICAgICAgICAgIC4uLmZvcm1hdHNcbiAgICAgICAgfSwgdGltZVpvbmUpLCB7XG4gICAgICAgICAgZm9ybWF0dGVyczoge1xuICAgICAgICAgICAgZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGVzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXREYXRlVGltZUZvcm1hdChsb2NhbGVzLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JtYXRqcy9mb3JtYXRqcy9pc3N1ZXMvNDI3OVxuICAgICAgICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlcywge1xuICAgICAgICAgICAgICAgIHRpbWVab25lLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UGx1cmFsUnVsZXMobG9jYWxlcywgb3B0aW9ucykge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IEludGwuUGx1cmFsUnVsZXMobG9jYWxlcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IHRocm93bkVycm9yID0gZXJyb3I7XG4gICAgICAgIHJldHVybiBnZXRGYWxsYmFja0Zyb21FcnJvckFuZE5vdGlmeShrZXksIGluaXRpYWxpemVDb25maWcuSW50bEVycm9yQ29kZS5JTlZBTElEX01FU1NBR0UsIHRocm93bkVycm9yLm1lc3NhZ2UgKyAoJ29yaWdpbmFsTWVzc2FnZScgaW4gdGhyb3duRXJyb3IgPyBcIiAoXCIuY29uY2F0KHRocm93bkVycm9yLm9yaWdpbmFsTWVzc2FnZSwgXCIpXCIpIDogJycpICk7XG4gICAgICB9XG4gICAgICBtZXNzYWdlRm9ybWF0Q2FjaGUgPT09IG51bGwgfHwgbWVzc2FnZUZvcm1hdENhY2hlID09PSB2b2lkIDAgfHwgbWVzc2FnZUZvcm1hdENhY2hlLnNldChjYWNoZUtleSwgbWVzc2FnZUZvcm1hdCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBmb3JtYXR0ZWRNZXNzYWdlID0gbWVzc2FnZUZvcm1hdC5mb3JtYXQoXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBpbnRsLW1lc3NhZ2Vmb3JtYXRgIGV4cGVjdHMgYSBkaWZmZXJlbnQgZm9ybWF0XG4gICAgICAvLyBmb3IgcmljaCB0ZXh0IGVsZW1lbnRzIHNpbmNlIGEgcmVjZW50IG1pbm9yIHVwZGF0ZS4gVGhpc1xuICAgICAgLy8gbmVlZHMgdG8gYmUgZXZhbHVhdGVkIGluIGRldGFpbCwgcG9zc2libHkgYWxzbyBpbiByZWdhcmRzXG4gICAgICAvLyB0byBiZSBhYmxlIHRvIGZvcm1hdCB0byBwYXJ0cy5cbiAgICAgIHByZXBhcmVUcmFuc2xhdGlvblZhbHVlcyh7XG4gICAgICAgIC4uLmRlZmF1bHRUcmFuc2xhdGlvblZhbHVlcyxcbiAgICAgICAgLi4udmFsdWVzXG4gICAgICB9KSk7XG4gICAgICBpZiAoZm9ybWF0dGVkTWVzc2FnZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmb3JtYXQgYFwiLmNvbmNhdChrZXksIFwiYCBpbiBcIikuY29uY2F0KG5hbWVzcGFjZSA/IFwibmFtZXNwYWNlIGBcIi5jb25jYXQobmFtZXNwYWNlLCBcImBcIikgOiAnbWVzc2FnZXMnKSApO1xuICAgICAgfVxuXG4gICAgICAvLyBMaW1pdCB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIHRvIHJldHVybiBzdHJpbmdzIG9yIFJlYWN0IGVsZW1lbnRzXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGZvcm1hdHRlZE1lc3NhZ2UpIHx8XG4gICAgICAvLyBBcnJheXMgb2YgUmVhY3QgZWxlbWVudHNcbiAgICAgIEFycmF5LmlzQXJyYXkoZm9ybWF0dGVkTWVzc2FnZSkgfHwgdHlwZW9mIGZvcm1hdHRlZE1lc3NhZ2UgPT09ICdzdHJpbmcnID8gZm9ybWF0dGVkTWVzc2FnZSA6IFN0cmluZyhmb3JtYXR0ZWRNZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgaW5pdGlhbGl6ZUNvbmZpZy5JbnRsRXJyb3JDb2RlLkZPUk1BVFRJTkdfRVJST1IsIGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB0cmFuc2xhdGVGbiggLyoqIFVzZSBhIGRvdCB0byBpbmRpY2F0ZSBhIGxldmVsIG9mIG5lc3RpbmcgKGUuZy4gYG5hbWVzcGFjZS5uZXN0ZWRMYWJlbGApLiAqL1xuICBrZXksIC8qKiBLZXkgdmFsdWUgcGFpcnMgZm9yIHZhbHVlcyB0byBpbnRlcnBvbGF0ZSBpbnRvIHRoZSBtZXNzYWdlLiAqL1xuICB2YWx1ZXMsIC8qKiBQcm92aWRlIGN1c3RvbSBmb3JtYXRzIGZvciBudW1iZXJzLCBkYXRlcyBhbmQgdGltZXMuICovXG4gIGZvcm1hdHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0cmFuc2xhdGVCYXNlRm4oa2V5LCB2YWx1ZXMsIGZvcm1hdHMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgaW5pdGlhbGl6ZUNvbmZpZy5JbnRsRXJyb3JDb2RlLklOVkFMSURfTUVTU0FHRSwgXCJUaGUgbWVzc2FnZSBgXCIuY29uY2F0KGtleSwgXCJgIGluIFwiKS5jb25jYXQobmFtZXNwYWNlID8gXCJuYW1lc3BhY2UgYFwiLmNvbmNhdChuYW1lc3BhY2UsIFwiYFwiKSA6ICdtZXNzYWdlcycsIFwiIGRpZG4ndCByZXNvbHZlIHRvIGEgc3RyaW5nLiBJZiB5b3Ugd2FudCB0byBmb3JtYXQgcmljaCB0ZXh0LCB1c2UgYHQucmljaGAgaW5zdGVhZC5cIikgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB0cmFuc2xhdGVGbi5yaWNoID0gdHJhbnNsYXRlQmFzZUZuO1xuXG4gIC8vIEF1Z21lbnQgYHRyYW5zbGF0ZUJhc2VGbmAgdG8gcmV0dXJuIHBsYWluIHN0cmluZ3NcbiAgdHJhbnNsYXRlRm4ubWFya3VwID0gKGtleSwgdmFsdWVzLCBmb3JtYXRzKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gdHJhbnNsYXRlQmFzZUZuKGtleSxcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0tIGBNYXJrdXBUcmFuc2xhdGlvblZhbHVlc2AgaXMgcHJhY3RpY2FsbHkgYSBzdWIgdHlwZVxuICAgIC8vIG9mIGBSaWNoVHJhbnNsYXRpb25WYWx1ZXNgIGJ1dCBUeXBlU2NyaXB0IGlzbid0IHNtYXJ0IGVub3VnaCBoZXJlLlxuICAgIHZhbHVlcywgZm9ybWF0cyk7XG5cbiAgICAvLyBXaGVuIG9ubHkgc3RyaW5nIGNodW5rcyBhcmUgcHJvdmlkZWQgdG8gdGhlIHBhcnNlciwgb25seVxuICAgIC8vIHN0cmluZ3Mgc2hvdWxkIGJlIHJldHVybmVkIGhlcmUuIE5vdGUgdGhhdCB3ZSBuZWVkIGEgcnVudGltZVxuICAgIC8vIGNoZWNrIGZvciB0aGlzIHNpbmNlIHJpY2ggdGV4dCB2YWx1ZXMgY291bGQgYmUgYWNjaWRlbnRhbGx5XG4gICAgLy8gaW5oZXJpdGVkIGZyb20gYGRlZmF1bHRUcmFuc2xhdGlvblZhbHVlc2AuXG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBpbml0aWFsaXplQ29uZmlnLkludGxFcnJvcihpbml0aWFsaXplQ29uZmlnLkludGxFcnJvckNvZGUuRk9STUFUVElOR19FUlJPUiwgXCJgdC5tYXJrdXBgIG9ubHkgYWNjZXB0cyBmdW5jdGlvbnMgZm9yIGZvcm1hdHRpbmcgdGhhdCByZWNlaXZlIGFuZCByZXR1cm4gc3RyaW5ncy5cXG5cXG5FLmcuIHQubWFya3VwKCdtYXJrdXAnLCB7YjogKGNodW5rcykgPT4gYDxiPiR7Y2h1bmtzfTwvYj5gfSlcIiApO1xuICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gZ2V0TWVzc2FnZUZhbGxiYWNrKHtcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIGtleSxcbiAgICAgICAgbmFtZXNwYWNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgdHJhbnNsYXRlRm4ucmF3ID0ga2V5ID0+IHtcbiAgICBpZiAobWVzc2FnZXNPckVycm9yIGluc3RhbmNlb2YgaW5pdGlhbGl6ZUNvbmZpZy5JbnRsRXJyb3IpIHtcbiAgICAgIC8vIFdlIGhhdmUgYWxyZWFkeSB3YXJuZWQgYWJvdXQgdGhpcyBkdXJpbmcgcmVuZGVyXG4gICAgICByZXR1cm4gZ2V0TWVzc2FnZUZhbGxiYWNrKHtcbiAgICAgICAgZXJyb3I6IG1lc3NhZ2VzT3JFcnJvcixcbiAgICAgICAga2V5LFxuICAgICAgICBuYW1lc3BhY2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBtZXNzYWdlcyA9IG1lc3NhZ2VzT3JFcnJvcjtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHJlc29sdmVQYXRoKGxvY2FsZSwgbWVzc2FnZXMsIGtleSwgbmFtZXNwYWNlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgaW5pdGlhbGl6ZUNvbmZpZy5JbnRsRXJyb3JDb2RlLk1JU1NJTkdfTUVTU0FHRSwgZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdHJhbnNsYXRlRm47XG59XG5cbi8qKlxuICogRm9yIHRoZSBzdHJpY3RseSB0eXBlZCBtZXNzYWdlcyB0byB3b3JrIHdlIGhhdmUgdG8gd3JhcCB0aGUgbmFtZXNwYWNlIGludG9cbiAqIGEgbWFuZGF0b3J5IHByZWZpeC4gU2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83MTUyOTU3NS8zNDMwNDVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZU5hbWVzcGFjZShuYW1lc3BhY2UsIG5hbWVzcGFjZVByZWZpeCkge1xuICByZXR1cm4gbmFtZXNwYWNlID09PSBuYW1lc3BhY2VQcmVmaXggPyB1bmRlZmluZWQgOiBuYW1lc3BhY2Uuc2xpY2UoKG5hbWVzcGFjZVByZWZpeCArICcuJykubGVuZ3RoKTtcbn1cblxuY29uc3QgU0VDT05EID0gMTtcbmNvbnN0IE1JTlVURSA9IFNFQ09ORCAqIDYwO1xuY29uc3QgSE9VUiA9IE1JTlVURSAqIDYwO1xuY29uc3QgREFZID0gSE9VUiAqIDI0O1xuY29uc3QgV0VFSyA9IERBWSAqIDc7XG5jb25zdCBNT05USCA9IERBWSAqICgzNjUgLyAxMik7IC8vIEFwcHJveGltYXRpb25cbmNvbnN0IFFVQVJURVIgPSBNT05USCAqIDM7XG5jb25zdCBZRUFSID0gREFZICogMzY1O1xuY29uc3QgVU5JVF9TRUNPTkRTID0ge1xuICBzZWNvbmQ6IFNFQ09ORCxcbiAgc2Vjb25kczogU0VDT05ELFxuICBtaW51dGU6IE1JTlVURSxcbiAgbWludXRlczogTUlOVVRFLFxuICBob3VyOiBIT1VSLFxuICBob3VyczogSE9VUixcbiAgZGF5OiBEQVksXG4gIGRheXM6IERBWSxcbiAgd2VlazogV0VFSyxcbiAgd2Vla3M6IFdFRUssXG4gIG1vbnRoOiBNT05USCxcbiAgbW9udGhzOiBNT05USCxcbiAgcXVhcnRlcjogUVVBUlRFUixcbiAgcXVhcnRlcnM6IFFVQVJURVIsXG4gIHllYXI6IFlFQVIsXG4gIHllYXJzOiBZRUFSXG59O1xuZnVuY3Rpb24gcmVzb2x2ZVJlbGF0aXZlVGltZVVuaXQoc2Vjb25kcykge1xuICBjb25zdCBhYnNWYWx1ZSA9IE1hdGguYWJzKHNlY29uZHMpO1xuICBpZiAoYWJzVmFsdWUgPCBNSU5VVEUpIHtcbiAgICByZXR1cm4gJ3NlY29uZCc7XG4gIH0gZWxzZSBpZiAoYWJzVmFsdWUgPCBIT1VSKSB7XG4gICAgcmV0dXJuICdtaW51dGUnO1xuICB9IGVsc2UgaWYgKGFic1ZhbHVlIDwgREFZKSB7XG4gICAgcmV0dXJuICdob3VyJztcbiAgfSBlbHNlIGlmIChhYnNWYWx1ZSA8IFdFRUspIHtcbiAgICByZXR1cm4gJ2RheSc7XG4gIH0gZWxzZSBpZiAoYWJzVmFsdWUgPCBNT05USCkge1xuICAgIHJldHVybiAnd2Vlayc7XG4gIH0gZWxzZSBpZiAoYWJzVmFsdWUgPCBZRUFSKSB7XG4gICAgcmV0dXJuICdtb250aCc7XG4gIH1cbiAgcmV0dXJuICd5ZWFyJztcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZVJlbGF0aXZlVGltZVZhbHVlKHNlY29uZHMsIHVuaXQpIHtcbiAgLy8gV2UgaGF2ZSB0byByb3VuZCB0aGUgcmVzdWx0aW5nIHZhbHVlcywgYXMgYEludGwuUmVsYXRpdmVUaW1lRm9ybWF0YFxuICAvLyB3aWxsIGluY2x1ZGUgZnJhY3Rpb25zIGxpa2UgJzIuMSBob3VycyBhZ28nLlxuICByZXR1cm4gTWF0aC5yb3VuZChzZWNvbmRzIC8gVU5JVF9TRUNPTkRTW3VuaXRdKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZvcm1hdHRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgZm9ybWF0cyxcbiAgICBsb2NhbGUsXG4gICAgbm93OiBnbG9iYWxOb3csXG4gICAgb25FcnJvciA9IGluaXRpYWxpemVDb25maWcuZGVmYXVsdE9uRXJyb3IsXG4gICAgdGltZVpvbmU6IGdsb2JhbFRpbWVab25lXG4gIH0gPSBfcmVmO1xuICBmdW5jdGlvbiByZXNvbHZlRm9ybWF0T3JPcHRpb25zKHR5cGVGb3JtYXRzLCBmb3JtYXRPck9wdGlvbnMpIHtcbiAgICBsZXQgb3B0aW9ucztcbiAgICBpZiAodHlwZW9mIGZvcm1hdE9yT3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IGZvcm1hdE5hbWUgPSBmb3JtYXRPck9wdGlvbnM7XG4gICAgICBvcHRpb25zID0gdHlwZUZvcm1hdHMgPT09IG51bGwgfHwgdHlwZUZvcm1hdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHR5cGVGb3JtYXRzW2Zvcm1hdE5hbWVdO1xuICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IGluaXRpYWxpemVDb25maWcuSW50bEVycm9yKGluaXRpYWxpemVDb25maWcuSW50bEVycm9yQ29kZS5NSVNTSU5HX0ZPUk1BVCwgXCJGb3JtYXQgYFwiLmNvbmNhdChmb3JtYXROYW1lLCBcImAgaXMgbm90IGF2YWlsYWJsZS4gWW91IGNhbiBjb25maWd1cmUgaXQgb24gdGhlIHByb3ZpZGVyIG9yIHByb3ZpZGUgY3VzdG9tIG9wdGlvbnMuXCIpICk7XG4gICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IGZvcm1hdE9yT3B0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkVmFsdWUodmFsdWUsIGZvcm1hdE9yT3B0aW9ucywgdHlwZUZvcm1hdHMsIGZvcm1hdHRlcikge1xuICAgIGxldCBvcHRpb25zO1xuICAgIHRyeSB7XG4gICAgICBvcHRpb25zID0gcmVzb2x2ZUZvcm1hdE9yT3B0aW9ucyh0eXBlRm9ybWF0cywgZm9ybWF0T3JPcHRpb25zKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm9ybWF0dGVyKG9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvbkVycm9yKG5ldyBpbml0aWFsaXplQ29uZmlnLkludGxFcnJvcihpbml0aWFsaXplQ29uZmlnLkludGxFcnJvckNvZGUuRk9STUFUVElOR19FUlJPUiwgZXJyb3IubWVzc2FnZSkpO1xuICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGRhdGVUaW1lKCAvKiogSWYgYSBudW1iZXIgaXMgc3VwcGxpZWQsIHRoaXMgaXMgaW50ZXJwcmV0ZWQgYXMgYSBVVEMgdGltZXN0YW1wLiAqL1xuICB2YWx1ZSxcbiAgLyoqIElmIGEgdGltZSB6b25lIGlzIHN1cHBsaWVkLCB0aGUgYHZhbHVlYCBpcyBjb252ZXJ0ZWQgdG8gdGhhdCB0aW1lIHpvbmUuXG4gICAqIE90aGVyd2lzZSB0aGUgdXNlciB0aW1lIHpvbmUgd2lsbCBiZSB1c2VkLiAqL1xuICBmb3JtYXRPck9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ2V0Rm9ybWF0dGVkVmFsdWUodmFsdWUsIGZvcm1hdE9yT3B0aW9ucywgZm9ybWF0cyA9PT0gbnVsbCB8fCBmb3JtYXRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmb3JtYXRzLmRhdGVUaW1lLCBvcHRpb25zID0+IHtcbiAgICAgIHZhciBfb3B0aW9ucztcbiAgICAgIGlmICghKChfb3B0aW9ucyA9IG9wdGlvbnMpICE9PSBudWxsICYmIF9vcHRpb25zICE9PSB2b2lkIDAgJiYgX29wdGlvbnMudGltZVpvbmUpKSB7XG4gICAgICAgIGlmIChnbG9iYWxUaW1lWm9uZSkge1xuICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgdGltZVpvbmU6IGdsb2JhbFRpbWVab25lXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbkVycm9yKG5ldyBpbml0aWFsaXplQ29uZmlnLkludGxFcnJvcihpbml0aWFsaXplQ29uZmlnLkludGxFcnJvckNvZGUuRU5WSVJPTk1FTlRfRkFMTEJBQ0ssIFwiVGhlIGB0aW1lWm9uZWAgcGFyYW1ldGVyIHdhc24ndCBwcm92aWRlZCBhbmQgdGhlcmUgaXMgbm8gZ2xvYmFsIGRlZmF1bHQgY29uZmlndXJlZC4gQ29uc2lkZXIgYWRkaW5nIGEgZ2xvYmFsIGRlZmF1bHQgdG8gYXZvaWQgbWFya3VwIG1pc21hdGNoZXMgY2F1c2VkIGJ5IGVudmlyb25tZW50IGRpZmZlcmVuY2VzLiBMZWFybiBtb3JlOiBodHRwczovL25leHQtaW50bC1kb2NzLnZlcmNlbC5hcHAvZG9jcy9jb25maWd1cmF0aW9uI3RpbWUtem9uZVwiICkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBvcHRpb25zKS5mb3JtYXQodmFsdWUpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG51bWJlcih2YWx1ZSwgZm9ybWF0T3JPcHRpb25zKSB7XG4gICAgcmV0dXJuIGdldEZvcm1hdHRlZFZhbHVlKHZhbHVlLCBmb3JtYXRPck9wdGlvbnMsIGZvcm1hdHMgPT09IG51bGwgfHwgZm9ybWF0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZm9ybWF0cy5udW1iZXIsIG9wdGlvbnMgPT4gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0KHZhbHVlKSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0R2xvYmFsTm93KCkge1xuICAgIGlmIChnbG9iYWxOb3cpIHtcbiAgICAgIHJldHVybiBnbG9iYWxOb3c7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uRXJyb3IobmV3IGluaXRpYWxpemVDb25maWcuSW50bEVycm9yKGluaXRpYWxpemVDb25maWcuSW50bEVycm9yQ29kZS5FTlZJUk9OTUVOVF9GQUxMQkFDSywgXCJUaGUgYG5vd2AgcGFyYW1ldGVyIHdhc24ndCBwcm92aWRlZCBhbmQgdGhlcmUgaXMgbm8gZ2xvYmFsIGRlZmF1bHQgY29uZmlndXJlZC4gQ29uc2lkZXIgYWRkaW5nIGEgZ2xvYmFsIGRlZmF1bHQgdG8gYXZvaWQgbWFya3VwIG1pc21hdGNoZXMgY2F1c2VkIGJ5IGVudmlyb25tZW50IGRpZmZlcmVuY2VzLiBMZWFybiBtb3JlOiBodHRwczovL25leHQtaW50bC1kb2NzLnZlcmNlbC5hcHAvZG9jcy9jb25maWd1cmF0aW9uI25vd1wiICkpO1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGV4dHJhY3ROb3dEYXRlKG5vd09yT3B0aW9ucykge1xuICAgIGlmIChub3dPck9wdGlvbnMgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBub3dPck9wdGlvbnMgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUobm93T3JPcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKChub3dPck9wdGlvbnMgPT09IG51bGwgfHwgbm93T3JPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBub3dPck9wdGlvbnMubm93KSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUobm93T3JPcHRpb25zLm5vdyk7XG4gICAgfVxuICAgIHJldHVybiBnZXRHbG9iYWxOb3coKTtcbiAgfVxuICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUoIC8qKiBUaGUgZGF0ZSB0aW1lIHRoYXQgbmVlZHMgdG8gYmUgZm9ybWF0dGVkLiAqL1xuICBkYXRlLCAvKiogVGhlIHJlZmVyZW5jZSBwb2ludCBpbiB0aW1lIHRvIHdoaWNoIGBkYXRlYCB3aWxsIGJlIGZvcm1hdHRlZCBpbiByZWxhdGlvbiB0by4gICovXG4gIG5vd09yT3B0aW9ucykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRlRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgY29uc3Qgbm93RGF0ZSA9IGV4dHJhY3ROb3dEYXRlKG5vd09yT3B0aW9ucyk7XG4gICAgICBjb25zdCBzZWNvbmRzID0gKGRhdGVEYXRlLmdldFRpbWUoKSAtIG5vd0RhdGUuZ2V0VGltZSgpKSAvIDEwMDA7XG4gICAgICBjb25zdCB1bml0ID0gdHlwZW9mIG5vd09yT3B0aW9ucyA9PT0gJ251bWJlcicgfHwgbm93T3JPcHRpb25zIGluc3RhbmNlb2YgRGF0ZSB8fCAobm93T3JPcHRpb25zID09PSBudWxsIHx8IG5vd09yT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm93T3JPcHRpb25zLnVuaXQpID09PSB1bmRlZmluZWQgPyByZXNvbHZlUmVsYXRpdmVUaW1lVW5pdChzZWNvbmRzKSA6IG5vd09yT3B0aW9ucy51bml0O1xuICAgICAgY29uc3QgdmFsdWUgPSBjYWxjdWxhdGVSZWxhdGl2ZVRpbWVWYWx1ZShzZWNvbmRzLCB1bml0KTtcbiAgICAgIHJldHVybiBuZXcgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQobG9jYWxlLCB7XG4gICAgICAgIC8vIGBudW1lcmljOiAnYXV0bydgIGNhbiB0aGVvcmV0aWNhbGx5IHByb2R1Y2Ugb3V0cHV0IGxpa2UgXCJ5ZXN0ZXJkYXlcIixcbiAgICAgICAgLy8gYnV0IGl0IG9ubHkgd29ya3Mgd2l0aCBpbnRlZ2Vycy4gRS5nLiAtMSBkYXkgd2lsbCBwcm9kdWNlIFwieWVzdGVyZGF5XCIsXG4gICAgICAgIC8vIGJ1dCAtMS4xIGRheXMgd2lsbCBwcm9kdWNlIFwiLTEuMSBkYXlzXCIuIFJvdW5kaW5nIGJlZm9yZSBmb3JtYXR0aW5nIGlzXG4gICAgICAgIC8vIG5vdCBkZXNpcmVkLCBhcyB0aGUgZ2l2ZW4gZGF0ZXMgbWlnaHQgY3Jvc3MgYSB0aHJlc2hvbGQgd2VyZSB0aGVcbiAgICAgICAgLy8gb3V0cHV0IGlzbid0IGNvcnJlY3QgYW55bW9yZS4gRXhhbXBsZTogMjAyNC0wMS0wOFQyMzowMDowMC4wMDBaIGFuZFxuICAgICAgICAvLyAyMDI0LTAxLTA4VDAxOjAwOjAwLjAwMFogd291bGQgcHJvZHVjZSBcInllc3RlcmRheVwiLCB3aGljaCBpcyBub3QgdGhlXG4gICAgICAgIC8vIGNhc2UuIEJ5IHVzaW5nIGBhbHdheXNgIHdlIGNhbiBlbnN1cmUgY29ycmVjdCBvdXRwdXQuIFRoZSBvbmx5IGV4Y2VwdGlvblxuICAgICAgICAvLyBpcyB0aGUgZm9ybWF0dGluZyBvZiB0aW1lcyA8MSBzZWNvbmQgYXMgXCJub3dcIi5cbiAgICAgICAgbnVtZXJpYzogdW5pdCA9PT0gJ3NlY29uZCcgPyAnYXV0bycgOiAnYWx3YXlzJ1xuICAgICAgfSkuZm9ybWF0KHZhbHVlLCB1bml0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25FcnJvcihuZXcgaW5pdGlhbGl6ZUNvbmZpZy5JbnRsRXJyb3IoaW5pdGlhbGl6ZUNvbmZpZy5JbnRsRXJyb3JDb2RlLkZPUk1BVFRJTkdfRVJST1IsIGVycm9yLm1lc3NhZ2UpKTtcbiAgICAgIHJldHVybiBTdHJpbmcoZGF0ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGxpc3QodmFsdWUsIGZvcm1hdE9yT3B0aW9ucykge1xuICAgIHJldHVybiBnZXRGb3JtYXR0ZWRWYWx1ZSh2YWx1ZSwgZm9ybWF0T3JPcHRpb25zLCBmb3JtYXRzID09PSBudWxsIHx8IGZvcm1hdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZvcm1hdHMubGlzdCwgb3B0aW9ucyA9PiBuZXcgSW50bC5MaXN0Rm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0KHZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkYXRlVGltZSxcbiAgICBudW1iZXIsXG4gICAgcmVsYXRpdmVUaW1lLFxuICAgIGxpc3RcbiAgfTtcbn1cblxuZXhwb3J0cy5jcmVhdGVCYXNlVHJhbnNsYXRvciA9IGNyZWF0ZUJhc2VUcmFuc2xhdG9yO1xuZXhwb3J0cy5jcmVhdGVGb3JtYXR0ZXIgPSBjcmVhdGVGb3JtYXR0ZXI7XG5leHBvcnRzLnJlc29sdmVOYW1lc3BhY2UgPSByZXNvbHZlTmFtZXNwYWNlO1xuIl0sIm5hbWVzIjpbIkludGxNZXNzYWdlRm9ybWF0IiwicmVxdWlyZSIsIlJlYWN0IiwiaW5pdGlhbGl6ZUNvbmZpZyIsIl9pbnRlcm9wRGVmYXVsdCIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkludGxNZXNzYWdlRm9ybWF0X19kZWZhdWx0Iiwic2V0VGltZVpvbmVJbkZvcm1hdHMiLCJmb3JtYXRzIiwidGltZVpvbmUiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwiYWNjIiwia2V5IiwiY29udmVydEZvcm1hdHNUb0ludGxNZXNzYWdlRm9ybWF0IiwiZm9ybWF0c1dpdGhUaW1lWm9uZSIsImRhdGVUaW1lIiwibWZEYXRlRGVmYXVsdHMiLCJkYXRlIiwiZGVmYXVsdERhdGVGb3JtYXRzIiwibWZUaW1lRGVmYXVsdHMiLCJ0aW1lIiwiZGVmYXVsdFRpbWVGb3JtYXRzIiwicmVzb2x2ZVBhdGgiLCJsb2NhbGUiLCJtZXNzYWdlcyIsIm5hbWVzcGFjZSIsImZ1bGxLZXkiLCJqb2luUGF0aCIsIkVycm9yIiwiY29uY2F0IiwibWVzc2FnZSIsInNwbGl0IiwiZm9yRWFjaCIsInBhcnQiLCJuZXh0IiwicHJlcGFyZVRyYW5zbGF0aW9uVmFsdWVzIiwidmFsdWVzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidHJhbnNmb3JtZWRWYWx1ZXMiLCJpbmRleCIsInZhbHVlIiwidHJhbnNmb3JtZWQiLCJjaHVua3MiLCJyZXN1bHQiLCJpc1ZhbGlkRWxlbWVudCIsImNsb25lRWxlbWVudCIsImdldE1lc3NhZ2VzT3JFcnJvciIsIm9uRXJyb3IiLCJhcmd1bWVudHMiLCJkZWZhdWx0T25FcnJvciIsInJldHJpZXZlZE1lc3NhZ2VzIiwiZXJyb3IiLCJpbnRsRXJyb3IiLCJJbnRsRXJyb3IiLCJJbnRsRXJyb3JDb2RlIiwiTUlTU0lOR19NRVNTQUdFIiwiZ2V0UGxhaW5NZXNzYWdlIiwiY2FuZGlkYXRlIiwidW5lc2NhcGVkTWVzc2FnZSIsInJlcGxhY2UiLCJoYXNQbGFjZWhvbGRlcnMiLCJ0ZXN0IiwiY3JlYXRlQmFzZVRyYW5zbGF0b3IiLCJjb25maWciLCJtZXNzYWdlc09yRXJyb3IiLCJjcmVhdGVCYXNlVHJhbnNsYXRvckltcGwiLCJfcmVmIiwiZGVmYXVsdFRyYW5zbGF0aW9uVmFsdWVzIiwiZ2xvYmFsRm9ybWF0cyIsImdldE1lc3NhZ2VGYWxsYmFjayIsImRlZmF1bHRHZXRNZXNzYWdlRmFsbGJhY2siLCJtZXNzYWdlRm9ybWF0Q2FjaGUiLCJnZXRGYWxsYmFja0Zyb21FcnJvckFuZE5vdGlmeSIsImNvZGUiLCJ0cmFuc2xhdGVCYXNlRm4iLCJjYWNoZUtleSIsIlN0cmluZyIsIm1lc3NhZ2VGb3JtYXQiLCJoYXMiLCJnZXQiLCJlcnJvck1lc3NhZ2UiLCJBcnJheSIsImlzQXJyYXkiLCJJTlZBTElEX01FU1NBR0UiLCJJTlNVRkZJQ0lFTlRfUEFUSCIsInBsYWluTWVzc2FnZSIsImZvcm1hdHRlcnMiLCJnZXROdW1iZXJGb3JtYXQiLCJsb2NhbGVzIiwib3B0aW9ucyIsIkludGwiLCJOdW1iZXJGb3JtYXQiLCJnZXREYXRlVGltZUZvcm1hdCIsIkRhdGVUaW1lRm9ybWF0IiwiZ2V0UGx1cmFsUnVsZXMiLCJQbHVyYWxSdWxlcyIsInRocm93bkVycm9yIiwib3JpZ2luYWxNZXNzYWdlIiwic2V0IiwiZm9ybWF0dGVkTWVzc2FnZSIsImZvcm1hdCIsIkZPUk1BVFRJTkdfRVJST1IiLCJ0cmFuc2xhdGVGbiIsInJpY2giLCJtYXJrdXAiLCJyYXciLCJyZXNvbHZlTmFtZXNwYWNlIiwibmFtZXNwYWNlUHJlZml4Iiwic2xpY2UiLCJTRUNPTkQiLCJNSU5VVEUiLCJIT1VSIiwiREFZIiwiV0VFSyIsIk1PTlRIIiwiUVVBUlRFUiIsIllFQVIiLCJVTklUX1NFQ09ORFMiLCJzZWNvbmQiLCJzZWNvbmRzIiwibWludXRlIiwibWludXRlcyIsImhvdXIiLCJob3VycyIsImRheSIsImRheXMiLCJ3ZWVrIiwid2Vla3MiLCJtb250aCIsIm1vbnRocyIsInF1YXJ0ZXIiLCJxdWFydGVycyIsInllYXIiLCJ5ZWFycyIsInJlc29sdmVSZWxhdGl2ZVRpbWVVbml0IiwiYWJzVmFsdWUiLCJNYXRoIiwiYWJzIiwiY2FsY3VsYXRlUmVsYXRpdmVUaW1lVmFsdWUiLCJ1bml0Iiwicm91bmQiLCJjcmVhdGVGb3JtYXR0ZXIiLCJub3ciLCJnbG9iYWxOb3ciLCJnbG9iYWxUaW1lWm9uZSIsInJlc29sdmVGb3JtYXRPck9wdGlvbnMiLCJ0eXBlRm9ybWF0cyIsImZvcm1hdE9yT3B0aW9ucyIsImZvcm1hdE5hbWUiLCJNSVNTSU5HX0ZPUk1BVCIsImdldEZvcm1hdHRlZFZhbHVlIiwiZm9ybWF0dGVyIiwiX29wdGlvbnMiLCJFTlZJUk9OTUVOVF9GQUxMQkFDSyIsIm51bWJlciIsImdldEdsb2JhbE5vdyIsIkRhdGUiLCJleHRyYWN0Tm93RGF0ZSIsIm5vd09yT3B0aW9ucyIsInJlbGF0aXZlVGltZSIsImRhdGVEYXRlIiwibm93RGF0ZSIsImdldFRpbWUiLCJSZWxhdGl2ZVRpbWVGb3JtYXQiLCJudW1lcmljIiwibGlzdCIsIkxpc3RGb3JtYXQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/development/createFormatter-3fcd09b9.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/development/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/use-intl/dist/development/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar initializeConfig = __webpack_require__(/*! ./initializeConfig-c503e215.js */ \"(ssr)/./node_modules/use-intl/dist/development/initializeConfig-c503e215.js\");\nvar core = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/use-intl/dist/development/core.js\");\nvar createFormatter = __webpack_require__(/*! ./createFormatter-3fcd09b9.js */ \"(ssr)/./node_modules/use-intl/dist/development/createFormatter-3fcd09b9.js\");\nvar _IntlProvider = __webpack_require__(/*! ./_IntlProvider.js */ \"(ssr)/./node_modules/use-intl/dist/development/_IntlProvider.js\");\nvar react = __webpack_require__(/*! ./react.js */ \"(ssr)/./node_modules/use-intl/dist/development/react.js\");\nvar _useLocale = __webpack_require__(/*! ./_useLocale-321e619f.js */ \"(ssr)/./node_modules/use-intl/dist/development/_useLocale-321e619f.js\");\n__webpack_require__(/*! intl-messageformat */ \"(ssr)/./node_modules/intl-messageformat/lib/index.js\");\n__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n__webpack_require__(/*! ./IntlContext-b5cc6be8.js */ \"(ssr)/./node_modules/use-intl/dist/development/IntlContext-b5cc6be8.js\");\nexports.IntlError = initializeConfig.IntlError;\nexports.IntlErrorCode = initializeConfig.IntlErrorCode;\nexports.initializeConfig = initializeConfig.initializeConfig;\nexports.createTranslator = core.createTranslator;\nexports.createFormatter = createFormatter.createFormatter;\nexports.IntlProvider = _IntlProvider.IntlProvider;\nexports.useFormatter = react.useFormatter;\nexports.useMessages = react.useMessages;\nexports.useNow = react.useNow;\nexports.useTimeZone = react.useTimeZone;\nexports.useTranslations = react.useTranslations;\nexports.useLocale = _useLocale.useLocale;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9kZXZlbG9wbWVudC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUU3RCxJQUFJQyxtQkFBbUJDLG1CQUFPQSxDQUFDO0FBQy9CLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBQ25CLElBQUlFLGtCQUFrQkYsbUJBQU9BLENBQUM7QUFDOUIsSUFBSUcsZ0JBQWdCSCxtQkFBT0EsQ0FBQztBQUM1QixJQUFJSSxRQUFRSixtQkFBT0EsQ0FBQztBQUNwQixJQUFJSyxhQUFhTCxtQkFBT0EsQ0FBQztBQUN6QkEsbUJBQU9BLENBQUM7QUFDUkEsbUJBQU9BLENBQUM7QUFDUkEsbUJBQU9BLENBQUM7QUFJUkgsaUJBQWlCLEdBQUdFLGlCQUFpQk8sU0FBUztBQUM5Q1QscUJBQXFCLEdBQUdFLGlCQUFpQlEsYUFBYTtBQUN0RFYsd0JBQXdCLEdBQUdFLGlCQUFpQkEsZ0JBQWdCO0FBQzVERix3QkFBd0IsR0FBR0ksS0FBS08sZ0JBQWdCO0FBQ2hEWCx1QkFBdUIsR0FBR0ssZ0JBQWdCQSxlQUFlO0FBQ3pETCxvQkFBb0IsR0FBR00sY0FBY00sWUFBWTtBQUNqRFosb0JBQW9CLEdBQUdPLE1BQU1NLFlBQVk7QUFDekNiLG1CQUFtQixHQUFHTyxNQUFNTyxXQUFXO0FBQ3ZDZCxjQUFjLEdBQUdPLE1BQU1RLE1BQU07QUFDN0JmLG1CQUFtQixHQUFHTyxNQUFNUyxXQUFXO0FBQ3ZDaEIsdUJBQXVCLEdBQUdPLE1BQU1VLGVBQWU7QUFDL0NqQixpQkFBaUIsR0FBR1EsV0FBV1UsU0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL29icmFsaW5rLXdlYi8uL25vZGVfbW9kdWxlcy91c2UtaW50bC9kaXN0L2RldmVsb3BtZW50L2luZGV4LmpzPzk1ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgaW5pdGlhbGl6ZUNvbmZpZyA9IHJlcXVpcmUoJy4vaW5pdGlhbGl6ZUNvbmZpZy1jNTAzZTIxNS5qcycpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL2NvcmUuanMnKTtcbnZhciBjcmVhdGVGb3JtYXR0ZXIgPSByZXF1aXJlKCcuL2NyZWF0ZUZvcm1hdHRlci0zZmNkMDliOS5qcycpO1xudmFyIF9JbnRsUHJvdmlkZXIgPSByZXF1aXJlKCcuL19JbnRsUHJvdmlkZXIuanMnKTtcbnZhciByZWFjdCA9IHJlcXVpcmUoJy4vcmVhY3QuanMnKTtcbnZhciBfdXNlTG9jYWxlID0gcmVxdWlyZSgnLi9fdXNlTG9jYWxlLTMyMWU2MTlmLmpzJyk7XG5yZXF1aXJlKCdpbnRsLW1lc3NhZ2Vmb3JtYXQnKTtcbnJlcXVpcmUoJ3JlYWN0Jyk7XG5yZXF1aXJlKCcuL0ludGxDb250ZXh0LWI1Y2M2YmU4LmpzJyk7XG5cblxuXG5leHBvcnRzLkludGxFcnJvciA9IGluaXRpYWxpemVDb25maWcuSW50bEVycm9yO1xuZXhwb3J0cy5JbnRsRXJyb3JDb2RlID0gaW5pdGlhbGl6ZUNvbmZpZy5JbnRsRXJyb3JDb2RlO1xuZXhwb3J0cy5pbml0aWFsaXplQ29uZmlnID0gaW5pdGlhbGl6ZUNvbmZpZy5pbml0aWFsaXplQ29uZmlnO1xuZXhwb3J0cy5jcmVhdGVUcmFuc2xhdG9yID0gY29yZS5jcmVhdGVUcmFuc2xhdG9yO1xuZXhwb3J0cy5jcmVhdGVGb3JtYXR0ZXIgPSBjcmVhdGVGb3JtYXR0ZXIuY3JlYXRlRm9ybWF0dGVyO1xuZXhwb3J0cy5JbnRsUHJvdmlkZXIgPSBfSW50bFByb3ZpZGVyLkludGxQcm92aWRlcjtcbmV4cG9ydHMudXNlRm9ybWF0dGVyID0gcmVhY3QudXNlRm9ybWF0dGVyO1xuZXhwb3J0cy51c2VNZXNzYWdlcyA9IHJlYWN0LnVzZU1lc3NhZ2VzO1xuZXhwb3J0cy51c2VOb3cgPSByZWFjdC51c2VOb3c7XG5leHBvcnRzLnVzZVRpbWVab25lID0gcmVhY3QudXNlVGltZVpvbmU7XG5leHBvcnRzLnVzZVRyYW5zbGF0aW9ucyA9IHJlYWN0LnVzZVRyYW5zbGF0aW9ucztcbmV4cG9ydHMudXNlTG9jYWxlID0gX3VzZUxvY2FsZS51c2VMb2NhbGU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbml0aWFsaXplQ29uZmlnIiwicmVxdWlyZSIsImNvcmUiLCJjcmVhdGVGb3JtYXR0ZXIiLCJfSW50bFByb3ZpZGVyIiwicmVhY3QiLCJfdXNlTG9jYWxlIiwiSW50bEVycm9yIiwiSW50bEVycm9yQ29kZSIsImNyZWF0ZVRyYW5zbGF0b3IiLCJJbnRsUHJvdmlkZXIiLCJ1c2VGb3JtYXR0ZXIiLCJ1c2VNZXNzYWdlcyIsInVzZU5vdyIsInVzZVRpbWVab25lIiwidXNlVHJhbnNsYXRpb25zIiwidXNlTG9jYWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/development/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/development/initializeConfig-c503e215.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/use-intl/dist/development/initializeConfig-c503e215.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nlet IntlErrorCode = /*#__PURE__*/ function(IntlErrorCode) {\n    IntlErrorCode[\"MISSING_MESSAGE\"] = \"MISSING_MESSAGE\";\n    IntlErrorCode[\"MISSING_FORMAT\"] = \"MISSING_FORMAT\";\n    IntlErrorCode[\"ENVIRONMENT_FALLBACK\"] = \"ENVIRONMENT_FALLBACK\";\n    IntlErrorCode[\"INSUFFICIENT_PATH\"] = \"INSUFFICIENT_PATH\";\n    IntlErrorCode[\"INVALID_MESSAGE\"] = \"INVALID_MESSAGE\";\n    IntlErrorCode[\"INVALID_KEY\"] = \"INVALID_KEY\";\n    IntlErrorCode[\"FORMATTING_ERROR\"] = \"FORMATTING_ERROR\";\n    return IntlErrorCode;\n}({});\nclass IntlError extends Error {\n    constructor(code, originalMessage){\n        let message = code;\n        if (originalMessage) {\n            message += \": \" + originalMessage;\n        }\n        super(message);\n        _defineProperty(this, \"code\", void 0);\n        _defineProperty(this, \"originalMessage\", void 0);\n        this.code = code;\n        if (originalMessage) {\n            this.originalMessage = originalMessage;\n        }\n    }\n}\nfunction joinPath() {\n    for(var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++){\n        parts[_key] = arguments[_key];\n    }\n    return parts.filter(Boolean).join(\".\");\n}\n/**\n * Contains defaults that are used for all entry points into the core.\n * See also `InitializedIntlConfiguration`.\n */ function defaultGetMessageFallback(props) {\n    return joinPath(props.namespace, props.key);\n}\nfunction defaultOnError(error) {\n    console.error(error);\n}\nfunction validateMessagesSegment(messages, invalidKeyLabels, parentPath) {\n    Object.entries(messages).forEach((_ref)=>{\n        let [key, messageOrMessages] = _ref;\n        if (key.includes(\".\")) {\n            let keyLabel = key;\n            if (parentPath) keyLabel += \" (at \".concat(parentPath, \")\");\n            invalidKeyLabels.push(keyLabel);\n        }\n        if (messageOrMessages != null && typeof messageOrMessages === \"object\") {\n            validateMessagesSegment(messageOrMessages, invalidKeyLabels, joinPath(parentPath, key));\n        }\n    });\n}\nfunction validateMessages(messages, onError) {\n    const invalidKeyLabels = [];\n    validateMessagesSegment(messages, invalidKeyLabels);\n    if (invalidKeyLabels.length > 0) {\n        onError(new IntlError(IntlErrorCode.INVALID_KEY, 'Namespace keys can not contain the character \".\" as this is used to express nesting. Please remove it or replace it with another character.\\n\\nInvalid '.concat(invalidKeyLabels.length === 1 ? \"key\" : \"keys\", \": \").concat(invalidKeyLabels.join(\", \"), '\\n\\nIf you\\'re migrating from a flat structure, you can convert your messages as follows:\\n\\nimport {set} from \"lodash\";\\n\\nconst input = {\\n  \"one.one\": \"1.1\",\\n  \"one.two\": \"1.2\",\\n  \"two.one.one\": \"2.1.1\"\\n};\\n\\nconst output = Object.entries(input).reduce(\\n  (acc, [key, value]) => set(acc, key, value),\\n  {}\\n);\\n\\n// Output:\\n//\\n// {\\n//   \"one\": {\\n//     \"one\": \"1.1\",\\n//     \"two\": \"1.2\"\\n//   },\\n//   \"two\": {\\n//     \"one\": {\\n//       \"one\": \"2.1.1\"\\n//     }\\n//   }\\n// }\\n')));\n    }\n}\n/**\n * Enhances the incoming props with defaults.\n */ function initializeConfig(_ref) {\n    let { getMessageFallback, messages, onError, ...rest } = _ref;\n    const finalOnError = onError || defaultOnError;\n    const finalGetMessageFallback = getMessageFallback || defaultGetMessageFallback;\n    {\n        if (messages) {\n            validateMessages(messages, finalOnError);\n        }\n    }\n    return {\n        ...rest,\n        messages,\n        onError: finalOnError,\n        getMessageFallback: finalGetMessageFallback\n    };\n}\nexports.IntlError = IntlError;\nexports.IntlErrorCode = IntlErrorCode;\nexports.defaultGetMessageFallback = defaultGetMessageFallback;\nexports.defaultOnError = defaultOnError;\nexports.initializeConfig = initializeConfig;\nexports.joinPath = joinPath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/development/initializeConfig-c503e215.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/development/react.js":
/*!*********************************************************!*\
  !*** ./node_modules/use-intl/dist/development/react.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar _IntlProvider = __webpack_require__(/*! ./_IntlProvider.js */ \"(ssr)/./node_modules/use-intl/dist/development/_IntlProvider.js\");\nvar _useLocale = __webpack_require__(/*! ./_useLocale-321e619f.js */ \"(ssr)/./node_modules/use-intl/dist/development/_useLocale-321e619f.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar createFormatter = __webpack_require__(/*! ./createFormatter-3fcd09b9.js */ \"(ssr)/./node_modules/use-intl/dist/development/createFormatter-3fcd09b9.js\");\nvar initializeConfig = __webpack_require__(/*! ./initializeConfig-c503e215.js */ \"(ssr)/./node_modules/use-intl/dist/development/initializeConfig-c503e215.js\");\n__webpack_require__(/*! ./IntlContext-b5cc6be8.js */ \"(ssr)/./node_modules/use-intl/dist/development/IntlContext-b5cc6be8.js\");\n__webpack_require__(/*! intl-messageformat */ \"(ssr)/./node_modules/intl-messageformat/lib/index.js\");\nlet hasWarnedForMissingTimezone = false;\nconst isServer = \"undefined\" === \"undefined\";\nfunction useTranslationsImpl(allMessages, namespace, namespacePrefix) {\n    const { defaultTranslationValues, formats: globalFormats, getMessageFallback, locale, messageFormatCache, onError, timeZone } = _useLocale.useIntlContext();\n    // The `namespacePrefix` is part of the type system.\n    // See the comment in the hook invocation.\n    allMessages = allMessages[namespacePrefix];\n    namespace = createFormatter.resolveNamespace(namespace, namespacePrefix);\n    if (!timeZone && !hasWarnedForMissingTimezone && isServer) {\n        hasWarnedForMissingTimezone = true;\n        onError(new initializeConfig.IntlError(initializeConfig.IntlErrorCode.ENVIRONMENT_FALLBACK, \"There is no `timeZone` configured, this can lead to markup mismatches caused by environment differences. Consider adding a global default: https://next-intl-docs.vercel.app/docs/configuration#time-zone\"));\n    }\n    const translate = React.useMemo(()=>createFormatter.createBaseTranslator({\n            messageFormatCache,\n            getMessageFallback,\n            messages: allMessages,\n            defaultTranslationValues,\n            namespace,\n            onError,\n            formats: globalFormats,\n            locale,\n            timeZone\n        }), [\n        messageFormatCache,\n        getMessageFallback,\n        allMessages,\n        namespace,\n        onError,\n        defaultTranslationValues,\n        globalFormats,\n        locale,\n        timeZone\n    ]);\n    return translate;\n}\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */ function useTranslations(namespace) {\n    const context = _useLocale.useIntlContext();\n    const messages = context.messages;\n    // We have to wrap the actual hook so the type inference for the optional\n    // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n    // The prefix (\"!\") is arbitrary.\n    return useTranslationsImpl({\n        \"!\": messages\n    }, // @ts-expect-error\n    namespace ? \"!.\".concat(namespace) : \"!\", \"!\");\n}\nfunction getNow() {\n    return new Date();\n}\n/**\n * Reading the current date via `new Date()` in components should be avoided, as\n * it causes components to be impure and can lead to flaky tests. Instead, this\n * hook can be used.\n *\n * By default, it returns the time when the component mounts. If `updateInterval`\n * is specified, the value will be updated based on the interval.\n *\n * You can however also return a static value from this hook, if you\n * configure the `now` parameter on the context provider. Note however,\n * that if `updateInterval` is configured in this case, the component\n * will initialize with the global value, but will afterwards update\n * continuously based on the interval.\n *\n * For unit tests, this can be mocked to a constant value. For end-to-end\n * testing, an environment parameter can be passed to the `now` parameter\n * of the provider to mock this to a static value.\n */ function useNow(options) {\n    const updateInterval = options === null || options === void 0 ? void 0 : options.updateInterval;\n    const { now: globalNow } = _useLocale.useIntlContext();\n    const [now, setNow] = React.useState(globalNow || getNow());\n    React.useEffect(()=>{\n        if (!updateInterval) return;\n        const intervalId = setInterval(()=>{\n            setNow(getNow());\n        }, updateInterval);\n        return ()=>{\n            clearInterval(intervalId);\n        };\n    }, [\n        globalNow,\n        updateInterval\n    ]);\n    return now;\n}\nfunction useTimeZone() {\n    return _useLocale.useIntlContext().timeZone;\n}\nfunction useMessages() {\n    const context = _useLocale.useIntlContext();\n    if (!context.messages) {\n        throw new Error(\"No messages found. Have you configured them correctly? See https://next-intl-docs.vercel.app/docs/configuration#messages\");\n    }\n    return context.messages;\n}\nfunction useFormatter() {\n    const { formats, locale, now: globalNow, onError, timeZone } = _useLocale.useIntlContext();\n    return React.useMemo(()=>createFormatter.createFormatter({\n            formats,\n            locale,\n            now: globalNow,\n            onError,\n            timeZone\n        }), [\n        formats,\n        globalNow,\n        locale,\n        onError,\n        timeZone\n    ]);\n}\nexports.IntlProvider = _IntlProvider.IntlProvider;\nexports.useLocale = _useLocale.useLocale;\nexports.useFormatter = useFormatter;\nexports.useMessages = useMessages;\nexports.useNow = useNow;\nexports.useTimeZone = useTimeZone;\nexports.useTranslations = useTranslations;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9kZXZlbG9wbWVudC9yZWFjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUU3RCxJQUFJQyxnQkFBZ0JDLG1CQUFPQSxDQUFDO0FBQzVCLElBQUlDLGFBQWFELG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlFLFFBQVFGLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlHLGtCQUFrQkgsbUJBQU9BLENBQUM7QUFDOUIsSUFBSUksbUJBQW1CSixtQkFBT0EsQ0FBQztBQUMvQkEsbUJBQU9BLENBQUM7QUFDUkEsbUJBQU9BLENBQUM7QUFFUixJQUFJSyw4QkFBOEI7QUFDbEMsTUFBTUMsV0FBVyxnQkFBa0I7QUFDbkMsU0FBU0Msb0JBQW9CQyxXQUFXLEVBQUVDLFNBQVMsRUFBRUMsZUFBZTtJQUNsRSxNQUFNLEVBQ0pDLHdCQUF3QixFQUN4QkMsU0FBU0MsYUFBYSxFQUN0QkMsa0JBQWtCLEVBQ2xCQyxNQUFNLEVBQ05DLGtCQUFrQixFQUNsQkMsT0FBTyxFQUNQQyxRQUFRLEVBQ1QsR0FBR2pCLFdBQVdrQixjQUFjO0lBRTdCLG9EQUFvRDtJQUNwRCwwQ0FBMEM7SUFDMUNYLGNBQWNBLFdBQVcsQ0FBQ0UsZ0JBQWdCO0lBQzFDRCxZQUFZTixnQkFBZ0JpQixnQkFBZ0IsQ0FBQ1gsV0FBV0M7SUFDeEQsSUFBSSxDQUFDUSxZQUFZLENBQUNiLCtCQUErQkMsVUFBVTtRQUN6REQsOEJBQThCO1FBQzlCWSxRQUFRLElBQUliLGlCQUFpQmlCLFNBQVMsQ0FBQ2pCLGlCQUFpQmtCLGFBQWEsQ0FBQ0Msb0JBQW9CLEVBQUU7SUFDOUY7SUFDQSxNQUFNQyxZQUFZdEIsTUFBTXVCLE9BQU8sQ0FBQyxJQUFNdEIsZ0JBQWdCdUIsb0JBQW9CLENBQUM7WUFDekVWO1lBQ0FGO1lBQ0FhLFVBQVVuQjtZQUNWRztZQUNBRjtZQUNBUTtZQUNBTCxTQUFTQztZQUNURTtZQUNBRztRQUNGLElBQUk7UUFBQ0Y7UUFBb0JGO1FBQW9CTjtRQUFhQztRQUFXUTtRQUFTTjtRQUEwQkU7UUFBZUU7UUFBUUc7S0FBUztJQUN4SSxPQUFPTTtBQUNUO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNJLGdCQUFnQm5CLFNBQVM7SUFDaEMsTUFBTW9CLFVBQVU1QixXQUFXa0IsY0FBYztJQUN6QyxNQUFNUSxXQUFXRSxRQUFRRixRQUFRO0lBRWpDLHlFQUF5RTtJQUN6RSw2RUFBNkU7SUFDN0UsaUNBQWlDO0lBQ2pDLE9BQU9wQixvQkFBb0I7UUFDekIsS0FBS29CO0lBQ1AsR0FDQSxtQkFBbUI7SUFDbkJsQixZQUFZLEtBQUtxQixNQUFNLENBQUNyQixhQUFhLEtBQUs7QUFDNUM7QUFFQSxTQUFTc0I7SUFDUCxPQUFPLElBQUlDO0FBQ2I7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQkMsR0FDRCxTQUFTQyxPQUFPQyxPQUFPO0lBQ3JCLE1BQU1DLGlCQUFpQkQsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFDLGNBQWM7SUFDL0YsTUFBTSxFQUNKQyxLQUFLQyxTQUFTLEVBQ2YsR0FBR3BDLFdBQVdrQixjQUFjO0lBQzdCLE1BQU0sQ0FBQ2lCLEtBQUtFLE9BQU8sR0FBR3BDLE1BQU1xQyxRQUFRLENBQUNGLGFBQWFOO0lBQ2xEN0IsTUFBTXNDLFNBQVMsQ0FBQztRQUNkLElBQUksQ0FBQ0wsZ0JBQWdCO1FBQ3JCLE1BQU1NLGFBQWFDLFlBQVk7WUFDN0JKLE9BQU9QO1FBQ1QsR0FBR0k7UUFDSCxPQUFPO1lBQ0xRLGNBQWNGO1FBQ2hCO0lBQ0YsR0FBRztRQUFDSjtRQUFXRjtLQUFlO0lBQzlCLE9BQU9DO0FBQ1Q7QUFFQSxTQUFTUTtJQUNQLE9BQU8zQyxXQUFXa0IsY0FBYyxHQUFHRCxRQUFRO0FBQzdDO0FBRUEsU0FBUzJCO0lBQ1AsTUFBTWhCLFVBQVU1QixXQUFXa0IsY0FBYztJQUN6QyxJQUFJLENBQUNVLFFBQVFGLFFBQVEsRUFBRTtRQUNyQixNQUFNLElBQUltQixNQUFNO0lBQ2xCO0lBQ0EsT0FBT2pCLFFBQVFGLFFBQVE7QUFDekI7QUFFQSxTQUFTb0I7SUFDUCxNQUFNLEVBQ0puQyxPQUFPLEVBQ1BHLE1BQU0sRUFDTnFCLEtBQUtDLFNBQVMsRUFDZHBCLE9BQU8sRUFDUEMsUUFBUSxFQUNULEdBQUdqQixXQUFXa0IsY0FBYztJQUM3QixPQUFPakIsTUFBTXVCLE9BQU8sQ0FBQyxJQUFNdEIsZ0JBQWdCQSxlQUFlLENBQUM7WUFDekRTO1lBQ0FHO1lBQ0FxQixLQUFLQztZQUNMcEI7WUFDQUM7UUFDRixJQUFJO1FBQUNOO1FBQVN5QjtRQUFXdEI7UUFBUUU7UUFBU0M7S0FBUztBQUNyRDtBQUVBckIsb0JBQW9CLEdBQUdFLGNBQWNpRCxZQUFZO0FBQ2pEbkQsaUJBQWlCLEdBQUdJLFdBQVdnRCxTQUFTO0FBQ3hDcEQsb0JBQW9CLEdBQUdrRDtBQUN2QmxELG1CQUFtQixHQUFHZ0Q7QUFDdEJoRCxjQUFjLEdBQUdvQztBQUNqQnBDLG1CQUFtQixHQUFHK0M7QUFDdEIvQyx1QkFBdUIsR0FBRytCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JyYWxpbmstd2ViLy4vbm9kZV9tb2R1bGVzL3VzZS1pbnRsL2Rpc3QvZGV2ZWxvcG1lbnQvcmVhY3QuanM/MjE3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBfSW50bFByb3ZpZGVyID0gcmVxdWlyZSgnLi9fSW50bFByb3ZpZGVyLmpzJyk7XG52YXIgX3VzZUxvY2FsZSA9IHJlcXVpcmUoJy4vX3VzZUxvY2FsZS0zMjFlNjE5Zi5qcycpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBjcmVhdGVGb3JtYXR0ZXIgPSByZXF1aXJlKCcuL2NyZWF0ZUZvcm1hdHRlci0zZmNkMDliOS5qcycpO1xudmFyIGluaXRpYWxpemVDb25maWcgPSByZXF1aXJlKCcuL2luaXRpYWxpemVDb25maWctYzUwM2UyMTUuanMnKTtcbnJlcXVpcmUoJy4vSW50bENvbnRleHQtYjVjYzZiZTguanMnKTtcbnJlcXVpcmUoJ2ludGwtbWVzc2FnZWZvcm1hdCcpO1xuXG5sZXQgaGFzV2FybmVkRm9yTWlzc2luZ1RpbWV6b25lID0gZmFsc2U7XG5jb25zdCBpc1NlcnZlciA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnO1xuZnVuY3Rpb24gdXNlVHJhbnNsYXRpb25zSW1wbChhbGxNZXNzYWdlcywgbmFtZXNwYWNlLCBuYW1lc3BhY2VQcmVmaXgpIHtcbiAgY29uc3Qge1xuICAgIGRlZmF1bHRUcmFuc2xhdGlvblZhbHVlcyxcbiAgICBmb3JtYXRzOiBnbG9iYWxGb3JtYXRzLFxuICAgIGdldE1lc3NhZ2VGYWxsYmFjayxcbiAgICBsb2NhbGUsXG4gICAgbWVzc2FnZUZvcm1hdENhY2hlLFxuICAgIG9uRXJyb3IsXG4gICAgdGltZVpvbmVcbiAgfSA9IF91c2VMb2NhbGUudXNlSW50bENvbnRleHQoKTtcblxuICAvLyBUaGUgYG5hbWVzcGFjZVByZWZpeGAgaXMgcGFydCBvZiB0aGUgdHlwZSBzeXN0ZW0uXG4gIC8vIFNlZSB0aGUgY29tbWVudCBpbiB0aGUgaG9vayBpbnZvY2F0aW9uLlxuICBhbGxNZXNzYWdlcyA9IGFsbE1lc3NhZ2VzW25hbWVzcGFjZVByZWZpeF07XG4gIG5hbWVzcGFjZSA9IGNyZWF0ZUZvcm1hdHRlci5yZXNvbHZlTmFtZXNwYWNlKG5hbWVzcGFjZSwgbmFtZXNwYWNlUHJlZml4KTtcbiAgaWYgKCF0aW1lWm9uZSAmJiAhaGFzV2FybmVkRm9yTWlzc2luZ1RpbWV6b25lICYmIGlzU2VydmVyKSB7XG4gICAgaGFzV2FybmVkRm9yTWlzc2luZ1RpbWV6b25lID0gdHJ1ZTtcbiAgICBvbkVycm9yKG5ldyBpbml0aWFsaXplQ29uZmlnLkludGxFcnJvcihpbml0aWFsaXplQ29uZmlnLkludGxFcnJvckNvZGUuRU5WSVJPTk1FTlRfRkFMTEJBQ0ssIFwiVGhlcmUgaXMgbm8gYHRpbWVab25lYCBjb25maWd1cmVkLCB0aGlzIGNhbiBsZWFkIHRvIG1hcmt1cCBtaXNtYXRjaGVzIGNhdXNlZCBieSBlbnZpcm9ubWVudCBkaWZmZXJlbmNlcy4gQ29uc2lkZXIgYWRkaW5nIGEgZ2xvYmFsIGRlZmF1bHQ6IGh0dHBzOi8vbmV4dC1pbnRsLWRvY3MudmVyY2VsLmFwcC9kb2NzL2NvbmZpZ3VyYXRpb24jdGltZS16b25lXCIgKSk7XG4gIH1cbiAgY29uc3QgdHJhbnNsYXRlID0gUmVhY3QudXNlTWVtbygoKSA9PiBjcmVhdGVGb3JtYXR0ZXIuY3JlYXRlQmFzZVRyYW5zbGF0b3Ioe1xuICAgIG1lc3NhZ2VGb3JtYXRDYWNoZSxcbiAgICBnZXRNZXNzYWdlRmFsbGJhY2ssXG4gICAgbWVzc2FnZXM6IGFsbE1lc3NhZ2VzLFxuICAgIGRlZmF1bHRUcmFuc2xhdGlvblZhbHVlcyxcbiAgICBuYW1lc3BhY2UsXG4gICAgb25FcnJvcixcbiAgICBmb3JtYXRzOiBnbG9iYWxGb3JtYXRzLFxuICAgIGxvY2FsZSxcbiAgICB0aW1lWm9uZVxuICB9KSwgW21lc3NhZ2VGb3JtYXRDYWNoZSwgZ2V0TWVzc2FnZUZhbGxiYWNrLCBhbGxNZXNzYWdlcywgbmFtZXNwYWNlLCBvbkVycm9yLCBkZWZhdWx0VHJhbnNsYXRpb25WYWx1ZXMsIGdsb2JhbEZvcm1hdHMsIGxvY2FsZSwgdGltZVpvbmVdKTtcbiAgcmV0dXJuIHRyYW5zbGF0ZTtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdGVzIG1lc3NhZ2VzIGZyb20gdGhlIGdpdmVuIG5hbWVzcGFjZSBieSB1c2luZyB0aGUgSUNVIHN5bnRheC5cbiAqIFNlZSBodHRwczovL2Zvcm1hdGpzLmlvL2RvY3MvY29yZS1jb25jZXB0cy9pY3Utc3ludGF4LlxuICpcbiAqIElmIG5vIG5hbWVzcGFjZSBpcyBwcm92aWRlZCwgYWxsIGF2YWlsYWJsZSBtZXNzYWdlcyBhcmUgcmV0dXJuZWQuXG4gKiBUaGUgbmFtZXNwYWNlIGNhbiBhbHNvIGluZGljYXRlIG5lc3RpbmcgYnkgdXNpbmcgYSBkb3RcbiAqIChlLmcuIGBuYW1lc3BhY2UuQ29tcG9uZW50YCkuXG4gKi9cbmZ1bmN0aW9uIHVzZVRyYW5zbGF0aW9ucyhuYW1lc3BhY2UpIHtcbiAgY29uc3QgY29udGV4dCA9IF91c2VMb2NhbGUudXNlSW50bENvbnRleHQoKTtcbiAgY29uc3QgbWVzc2FnZXMgPSBjb250ZXh0Lm1lc3NhZ2VzO1xuXG4gIC8vIFdlIGhhdmUgdG8gd3JhcCB0aGUgYWN0dWFsIGhvb2sgc28gdGhlIHR5cGUgaW5mZXJlbmNlIGZvciB0aGUgb3B0aW9uYWxcbiAgLy8gbmFtZXNwYWNlIHdvcmtzIGNvcnJlY3RseS4gU2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83MTUyOTU3NS8zNDMwNDVcbiAgLy8gVGhlIHByZWZpeCAoXCIhXCIpIGlzIGFyYml0cmFyeS5cbiAgcmV0dXJuIHVzZVRyYW5zbGF0aW9uc0ltcGwoe1xuICAgICchJzogbWVzc2FnZXNcbiAgfSxcbiAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICBuYW1lc3BhY2UgPyBcIiEuXCIuY29uY2F0KG5hbWVzcGFjZSkgOiAnIScsICchJyk7XG59XG5cbmZ1bmN0aW9uIGdldE5vdygpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKCk7XG59XG5cbi8qKlxuICogUmVhZGluZyB0aGUgY3VycmVudCBkYXRlIHZpYSBgbmV3IERhdGUoKWAgaW4gY29tcG9uZW50cyBzaG91bGQgYmUgYXZvaWRlZCwgYXNcbiAqIGl0IGNhdXNlcyBjb21wb25lbnRzIHRvIGJlIGltcHVyZSBhbmQgY2FuIGxlYWQgdG8gZmxha3kgdGVzdHMuIEluc3RlYWQsIHRoaXNcbiAqIGhvb2sgY2FuIGJlIHVzZWQuXG4gKlxuICogQnkgZGVmYXVsdCwgaXQgcmV0dXJucyB0aGUgdGltZSB3aGVuIHRoZSBjb21wb25lbnQgbW91bnRzLiBJZiBgdXBkYXRlSW50ZXJ2YWxgXG4gKiBpcyBzcGVjaWZpZWQsIHRoZSB2YWx1ZSB3aWxsIGJlIHVwZGF0ZWQgYmFzZWQgb24gdGhlIGludGVydmFsLlxuICpcbiAqIFlvdSBjYW4gaG93ZXZlciBhbHNvIHJldHVybiBhIHN0YXRpYyB2YWx1ZSBmcm9tIHRoaXMgaG9vaywgaWYgeW91XG4gKiBjb25maWd1cmUgdGhlIGBub3dgIHBhcmFtZXRlciBvbiB0aGUgY29udGV4dCBwcm92aWRlci4gTm90ZSBob3dldmVyLFxuICogdGhhdCBpZiBgdXBkYXRlSW50ZXJ2YWxgIGlzIGNvbmZpZ3VyZWQgaW4gdGhpcyBjYXNlLCB0aGUgY29tcG9uZW50XG4gKiB3aWxsIGluaXRpYWxpemUgd2l0aCB0aGUgZ2xvYmFsIHZhbHVlLCBidXQgd2lsbCBhZnRlcndhcmRzIHVwZGF0ZVxuICogY29udGludW91c2x5IGJhc2VkIG9uIHRoZSBpbnRlcnZhbC5cbiAqXG4gKiBGb3IgdW5pdCB0ZXN0cywgdGhpcyBjYW4gYmUgbW9ja2VkIHRvIGEgY29uc3RhbnQgdmFsdWUuIEZvciBlbmQtdG8tZW5kXG4gKiB0ZXN0aW5nLCBhbiBlbnZpcm9ubWVudCBwYXJhbWV0ZXIgY2FuIGJlIHBhc3NlZCB0byB0aGUgYG5vd2AgcGFyYW1ldGVyXG4gKiBvZiB0aGUgcHJvdmlkZXIgdG8gbW9jayB0aGlzIHRvIGEgc3RhdGljIHZhbHVlLlxuICovXG5mdW5jdGlvbiB1c2VOb3cob3B0aW9ucykge1xuICBjb25zdCB1cGRhdGVJbnRlcnZhbCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy51cGRhdGVJbnRlcnZhbDtcbiAgY29uc3Qge1xuICAgIG5vdzogZ2xvYmFsTm93XG4gIH0gPSBfdXNlTG9jYWxlLnVzZUludGxDb250ZXh0KCk7XG4gIGNvbnN0IFtub3csIHNldE5vd10gPSBSZWFjdC51c2VTdGF0ZShnbG9iYWxOb3cgfHwgZ2V0Tm93KCkpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghdXBkYXRlSW50ZXJ2YWwpIHJldHVybjtcbiAgICBjb25zdCBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgc2V0Tm93KGdldE5vdygpKTtcbiAgICB9LCB1cGRhdGVJbnRlcnZhbCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG4gICAgfTtcbiAgfSwgW2dsb2JhbE5vdywgdXBkYXRlSW50ZXJ2YWxdKTtcbiAgcmV0dXJuIG5vdztcbn1cblxuZnVuY3Rpb24gdXNlVGltZVpvbmUoKSB7XG4gIHJldHVybiBfdXNlTG9jYWxlLnVzZUludGxDb250ZXh0KCkudGltZVpvbmU7XG59XG5cbmZ1bmN0aW9uIHVzZU1lc3NhZ2VzKCkge1xuICBjb25zdCBjb250ZXh0ID0gX3VzZUxvY2FsZS51c2VJbnRsQ29udGV4dCgpO1xuICBpZiAoIWNvbnRleHQubWVzc2FnZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1lc3NhZ2VzIGZvdW5kLiBIYXZlIHlvdSBjb25maWd1cmVkIHRoZW0gY29ycmVjdGx5PyBTZWUgaHR0cHM6Ly9uZXh0LWludGwtZG9jcy52ZXJjZWwuYXBwL2RvY3MvY29uZmlndXJhdGlvbiNtZXNzYWdlcycgKTtcbiAgfVxuICByZXR1cm4gY29udGV4dC5tZXNzYWdlcztcbn1cblxuZnVuY3Rpb24gdXNlRm9ybWF0dGVyKCkge1xuICBjb25zdCB7XG4gICAgZm9ybWF0cyxcbiAgICBsb2NhbGUsXG4gICAgbm93OiBnbG9iYWxOb3csXG4gICAgb25FcnJvcixcbiAgICB0aW1lWm9uZVxuICB9ID0gX3VzZUxvY2FsZS51c2VJbnRsQ29udGV4dCgpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBjcmVhdGVGb3JtYXR0ZXIuY3JlYXRlRm9ybWF0dGVyKHtcbiAgICBmb3JtYXRzLFxuICAgIGxvY2FsZSxcbiAgICBub3c6IGdsb2JhbE5vdyxcbiAgICBvbkVycm9yLFxuICAgIHRpbWVab25lXG4gIH0pLCBbZm9ybWF0cywgZ2xvYmFsTm93LCBsb2NhbGUsIG9uRXJyb3IsIHRpbWVab25lXSk7XG59XG5cbmV4cG9ydHMuSW50bFByb3ZpZGVyID0gX0ludGxQcm92aWRlci5JbnRsUHJvdmlkZXI7XG5leHBvcnRzLnVzZUxvY2FsZSA9IF91c2VMb2NhbGUudXNlTG9jYWxlO1xuZXhwb3J0cy51c2VGb3JtYXR0ZXIgPSB1c2VGb3JtYXR0ZXI7XG5leHBvcnRzLnVzZU1lc3NhZ2VzID0gdXNlTWVzc2FnZXM7XG5leHBvcnRzLnVzZU5vdyA9IHVzZU5vdztcbmV4cG9ydHMudXNlVGltZVpvbmUgPSB1c2VUaW1lWm9uZTtcbmV4cG9ydHMudXNlVHJhbnNsYXRpb25zID0gdXNlVHJhbnNsYXRpb25zO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX0ludGxQcm92aWRlciIsInJlcXVpcmUiLCJfdXNlTG9jYWxlIiwiUmVhY3QiLCJjcmVhdGVGb3JtYXR0ZXIiLCJpbml0aWFsaXplQ29uZmlnIiwiaGFzV2FybmVkRm9yTWlzc2luZ1RpbWV6b25lIiwiaXNTZXJ2ZXIiLCJ1c2VUcmFuc2xhdGlvbnNJbXBsIiwiYWxsTWVzc2FnZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VQcmVmaXgiLCJkZWZhdWx0VHJhbnNsYXRpb25WYWx1ZXMiLCJmb3JtYXRzIiwiZ2xvYmFsRm9ybWF0cyIsImdldE1lc3NhZ2VGYWxsYmFjayIsImxvY2FsZSIsIm1lc3NhZ2VGb3JtYXRDYWNoZSIsIm9uRXJyb3IiLCJ0aW1lWm9uZSIsInVzZUludGxDb250ZXh0IiwicmVzb2x2ZU5hbWVzcGFjZSIsIkludGxFcnJvciIsIkludGxFcnJvckNvZGUiLCJFTlZJUk9OTUVOVF9GQUxMQkFDSyIsInRyYW5zbGF0ZSIsInVzZU1lbW8iLCJjcmVhdGVCYXNlVHJhbnNsYXRvciIsIm1lc3NhZ2VzIiwidXNlVHJhbnNsYXRpb25zIiwiY29udGV4dCIsImNvbmNhdCIsImdldE5vdyIsIkRhdGUiLCJ1c2VOb3ciLCJvcHRpb25zIiwidXBkYXRlSW50ZXJ2YWwiLCJub3ciLCJnbG9iYWxOb3ciLCJzZXROb3ciLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImludGVydmFsSWQiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1c2VUaW1lWm9uZSIsInVzZU1lc3NhZ2VzIiwiRXJyb3IiLCJ1c2VGb3JtYXR0ZXIiLCJJbnRsUHJvdmlkZXIiLCJ1c2VMb2NhbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/development/react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/use-intl/dist/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./development/index.js */ \"(ssr)/./node_modules/use-intl/dist/development/index.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLEtBQXlCLEVBQWMsRUFFMUMsTUFBTTtJQUNMQyw2SEFBeUI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnJhbGluay13ZWIvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9pbmRleC5qcz83YjExIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vaW5kZXguanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZXZlbG9wbWVudC9pbmRleC5qcycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/use-intl/dist/development/core.js":
/*!********************************************************!*\
  !*** ./node_modules/use-intl/dist/development/core.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar initializeConfig = __webpack_require__(/*! ./initializeConfig-c503e215.js */ \"(rsc)/./node_modules/use-intl/dist/development/initializeConfig-c503e215.js\");\nvar createFormatter = __webpack_require__(/*! ./createFormatter-3fcd09b9.js */ \"(rsc)/./node_modules/use-intl/dist/development/createFormatter-3fcd09b9.js\");\n__webpack_require__(/*! intl-messageformat */ \"(rsc)/./node_modules/intl-messageformat/lib/index.js\");\n__webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\");\nfunction createTranslatorImpl(_ref, namespacePrefix) {\n    let { getMessageFallback, messages, namespace, onError, ...rest } = _ref;\n    // The `namespacePrefix` is part of the type system.\n    // See the comment in the function invocation.\n    messages = messages[namespacePrefix];\n    namespace = createFormatter.resolveNamespace(namespace, namespacePrefix);\n    return createFormatter.createBaseTranslator({\n        ...rest,\n        onError,\n        getMessageFallback,\n        messages,\n        namespace\n    });\n}\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */ function createTranslator(_ref) {\n    let { getMessageFallback = initializeConfig.defaultGetMessageFallback, messages, namespace, onError = initializeConfig.defaultOnError, ...rest } = _ref;\n    // We have to wrap the actual function so the type inference for the optional\n    // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n    // The prefix (\"!\") is arbitrary.\n    return createTranslatorImpl({\n        ...rest,\n        onError,\n        getMessageFallback,\n        // @ts-expect-error `messages` is allowed to be `undefined` here and will be handled internally\n        messages: {\n            \"!\": messages\n        },\n        namespace: namespace ? \"!.\".concat(namespace) : \"!\"\n    }, \"!\");\n}\nexports.IntlError = initializeConfig.IntlError;\nexports.IntlErrorCode = initializeConfig.IntlErrorCode;\nexports.initializeConfig = initializeConfig.initializeConfig;\nexports.createFormatter = createFormatter.createFormatter;\nexports.createTranslator = createTranslator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9kZXZlbG9wbWVudC9jb3JlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBRTdELElBQUlDLG1CQUFtQkMsbUJBQU9BLENBQUM7QUFDL0IsSUFBSUMsa0JBQWtCRCxtQkFBT0EsQ0FBQztBQUM5QkEsbUJBQU9BLENBQUM7QUFDUkEsbUJBQU9BLENBQUM7QUFFUixTQUFTRSxxQkFBcUJDLElBQUksRUFBRUMsZUFBZTtJQUNqRCxJQUFJLEVBQ0ZDLGtCQUFrQixFQUNsQkMsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLE9BQU8sRUFDUCxHQUFHQyxNQUNKLEdBQUdOO0lBQ0osb0RBQW9EO0lBQ3BELDhDQUE4QztJQUM5Q0csV0FBV0EsUUFBUSxDQUFDRixnQkFBZ0I7SUFDcENHLFlBQVlOLGdCQUFnQlMsZ0JBQWdCLENBQUNILFdBQVdIO0lBQ3hELE9BQU9ILGdCQUFnQlUsb0JBQW9CLENBQUM7UUFDMUMsR0FBR0YsSUFBSTtRQUNQRDtRQUNBSDtRQUNBQztRQUNBQztJQUNGO0FBQ0Y7QUFFQTs7Ozs7OztDQU9DLEdBQ0QsU0FBU0ssaUJBQWlCVCxJQUFJO0lBQzVCLElBQUksRUFDRkUscUJBQXFCTixpQkFBaUJjLHlCQUF5QixFQUMvRFAsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLFVBQVVULGlCQUFpQmUsY0FBYyxFQUN6QyxHQUFHTCxNQUNKLEdBQUdOO0lBQ0osNkVBQTZFO0lBQzdFLDZFQUE2RTtJQUM3RSxpQ0FBaUM7SUFDakMsT0FBT0QscUJBQXFCO1FBQzFCLEdBQUdPLElBQUk7UUFDUEQ7UUFDQUg7UUFDQSwrRkFBK0Y7UUFDL0ZDLFVBQVU7WUFDUixLQUFLQTtRQUNQO1FBQ0FDLFdBQVdBLFlBQVksS0FBS1EsTUFBTSxDQUFDUixhQUFhO0lBQ2xELEdBQUc7QUFDTDtBQUVBVixpQkFBaUIsR0FBR0UsaUJBQWlCaUIsU0FBUztBQUM5Q25CLHFCQUFxQixHQUFHRSxpQkFBaUJrQixhQUFhO0FBQ3REcEIsd0JBQXdCLEdBQUdFLGlCQUFpQkEsZ0JBQWdCO0FBQzVERix1QkFBdUIsR0FBR0ksZ0JBQWdCQSxlQUFlO0FBQ3pESix3QkFBd0IsR0FBR2UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnJhbGluay13ZWIvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9kZXZlbG9wbWVudC9jb3JlLmpzP2RiODYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgaW5pdGlhbGl6ZUNvbmZpZyA9IHJlcXVpcmUoJy4vaW5pdGlhbGl6ZUNvbmZpZy1jNTAzZTIxNS5qcycpO1xudmFyIGNyZWF0ZUZvcm1hdHRlciA9IHJlcXVpcmUoJy4vY3JlYXRlRm9ybWF0dGVyLTNmY2QwOWI5LmpzJyk7XG5yZXF1aXJlKCdpbnRsLW1lc3NhZ2Vmb3JtYXQnKTtcbnJlcXVpcmUoJ3JlYWN0Jyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zbGF0b3JJbXBsKF9yZWYsIG5hbWVzcGFjZVByZWZpeCkge1xuICBsZXQge1xuICAgIGdldE1lc3NhZ2VGYWxsYmFjayxcbiAgICBtZXNzYWdlcyxcbiAgICBuYW1lc3BhY2UsXG4gICAgb25FcnJvcixcbiAgICAuLi5yZXN0XG4gIH0gPSBfcmVmO1xuICAvLyBUaGUgYG5hbWVzcGFjZVByZWZpeGAgaXMgcGFydCBvZiB0aGUgdHlwZSBzeXN0ZW0uXG4gIC8vIFNlZSB0aGUgY29tbWVudCBpbiB0aGUgZnVuY3Rpb24gaW52b2NhdGlvbi5cbiAgbWVzc2FnZXMgPSBtZXNzYWdlc1tuYW1lc3BhY2VQcmVmaXhdO1xuICBuYW1lc3BhY2UgPSBjcmVhdGVGb3JtYXR0ZXIucmVzb2x2ZU5hbWVzcGFjZShuYW1lc3BhY2UsIG5hbWVzcGFjZVByZWZpeCk7XG4gIHJldHVybiBjcmVhdGVGb3JtYXR0ZXIuY3JlYXRlQmFzZVRyYW5zbGF0b3Ioe1xuICAgIC4uLnJlc3QsXG4gICAgb25FcnJvcixcbiAgICBnZXRNZXNzYWdlRmFsbGJhY2ssXG4gICAgbWVzc2FnZXMsXG4gICAgbmFtZXNwYWNlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZXMgbWVzc2FnZXMgZnJvbSB0aGUgZ2l2ZW4gbmFtZXNwYWNlIGJ5IHVzaW5nIHRoZSBJQ1Ugc3ludGF4LlxuICogU2VlIGh0dHBzOi8vZm9ybWF0anMuaW8vZG9jcy9jb3JlLWNvbmNlcHRzL2ljdS1zeW50YXguXG4gKlxuICogSWYgbm8gbmFtZXNwYWNlIGlzIHByb3ZpZGVkLCBhbGwgYXZhaWxhYmxlIG1lc3NhZ2VzIGFyZSByZXR1cm5lZC5cbiAqIFRoZSBuYW1lc3BhY2UgY2FuIGFsc28gaW5kaWNhdGUgbmVzdGluZyBieSB1c2luZyBhIGRvdFxuICogKGUuZy4gYG5hbWVzcGFjZS5Db21wb25lbnRgKS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVHJhbnNsYXRvcihfcmVmKSB7XG4gIGxldCB7XG4gICAgZ2V0TWVzc2FnZUZhbGxiYWNrID0gaW5pdGlhbGl6ZUNvbmZpZy5kZWZhdWx0R2V0TWVzc2FnZUZhbGxiYWNrLFxuICAgIG1lc3NhZ2VzLFxuICAgIG5hbWVzcGFjZSxcbiAgICBvbkVycm9yID0gaW5pdGlhbGl6ZUNvbmZpZy5kZWZhdWx0T25FcnJvcixcbiAgICAuLi5yZXN0XG4gIH0gPSBfcmVmO1xuICAvLyBXZSBoYXZlIHRvIHdyYXAgdGhlIGFjdHVhbCBmdW5jdGlvbiBzbyB0aGUgdHlwZSBpbmZlcmVuY2UgZm9yIHRoZSBvcHRpb25hbFxuICAvLyBuYW1lc3BhY2Ugd29ya3MgY29ycmVjdGx5LiBTZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzcxNTI5NTc1LzM0MzA0NVxuICAvLyBUaGUgcHJlZml4IChcIiFcIikgaXMgYXJiaXRyYXJ5LlxuICByZXR1cm4gY3JlYXRlVHJhbnNsYXRvckltcGwoe1xuICAgIC4uLnJlc3QsXG4gICAgb25FcnJvcixcbiAgICBnZXRNZXNzYWdlRmFsbGJhY2ssXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBgbWVzc2FnZXNgIGlzIGFsbG93ZWQgdG8gYmUgYHVuZGVmaW5lZGAgaGVyZSBhbmQgd2lsbCBiZSBoYW5kbGVkIGludGVybmFsbHlcbiAgICBtZXNzYWdlczoge1xuICAgICAgJyEnOiBtZXNzYWdlc1xuICAgIH0sXG4gICAgbmFtZXNwYWNlOiBuYW1lc3BhY2UgPyBcIiEuXCIuY29uY2F0KG5hbWVzcGFjZSkgOiAnISdcbiAgfSwgJyEnKTtcbn1cblxuZXhwb3J0cy5JbnRsRXJyb3IgPSBpbml0aWFsaXplQ29uZmlnLkludGxFcnJvcjtcbmV4cG9ydHMuSW50bEVycm9yQ29kZSA9IGluaXRpYWxpemVDb25maWcuSW50bEVycm9yQ29kZTtcbmV4cG9ydHMuaW5pdGlhbGl6ZUNvbmZpZyA9IGluaXRpYWxpemVDb25maWcuaW5pdGlhbGl6ZUNvbmZpZztcbmV4cG9ydHMuY3JlYXRlRm9ybWF0dGVyID0gY3JlYXRlRm9ybWF0dGVyLmNyZWF0ZUZvcm1hdHRlcjtcbmV4cG9ydHMuY3JlYXRlVHJhbnNsYXRvciA9IGNyZWF0ZVRyYW5zbGF0b3I7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbml0aWFsaXplQ29uZmlnIiwicmVxdWlyZSIsImNyZWF0ZUZvcm1hdHRlciIsImNyZWF0ZVRyYW5zbGF0b3JJbXBsIiwiX3JlZiIsIm5hbWVzcGFjZVByZWZpeCIsImdldE1lc3NhZ2VGYWxsYmFjayIsIm1lc3NhZ2VzIiwibmFtZXNwYWNlIiwib25FcnJvciIsInJlc3QiLCJyZXNvbHZlTmFtZXNwYWNlIiwiY3JlYXRlQmFzZVRyYW5zbGF0b3IiLCJjcmVhdGVUcmFuc2xhdG9yIiwiZGVmYXVsdEdldE1lc3NhZ2VGYWxsYmFjayIsImRlZmF1bHRPbkVycm9yIiwiY29uY2F0IiwiSW50bEVycm9yIiwiSW50bEVycm9yQ29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/use-intl/dist/development/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/use-intl/dist/development/createFormatter-3fcd09b9.js":
/*!****************************************************************************!*\
  !*** ./node_modules/use-intl/dist/development/createFormatter-3fcd09b9.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar IntlMessageFormat = __webpack_require__(/*! intl-messageformat */ \"(rsc)/./node_modules/intl-messageformat/lib/index.js\");\nvar React = __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\");\nvar initializeConfig = __webpack_require__(/*! ./initializeConfig-c503e215.js */ \"(rsc)/./node_modules/use-intl/dist/development/initializeConfig-c503e215.js\");\nfunction _interopDefault(e) {\n    return e && e.__esModule ? e : {\n        default: e\n    };\n}\nvar IntlMessageFormat__default = /*#__PURE__*/ _interopDefault(IntlMessageFormat);\n// eslint-disable-next-line import/no-named-as-default -- False positive\nfunction setTimeZoneInFormats(formats, timeZone) {\n    if (!formats) return formats;\n    // The only way to set a time zone with `intl-messageformat` is to merge it into the formats\n    // https://github.com/formatjs/formatjs/blob/8256c5271505cf2606e48e3c97ecdd16ede4f1b5/packages/intl/src/message.ts#L15\n    return Object.keys(formats).reduce((acc, key)=>{\n        acc[key] = {\n            timeZone,\n            ...formats[key]\n        };\n        return acc;\n    }, {});\n}\n/**\n * `intl-messageformat` uses separate keys for `date` and `time`, but there's\n * only one native API: `Intl.DateTimeFormat`. Additionally you might want to\n * include both a time and a date in a value, therefore the separation doesn't\n * seem so useful. We offer a single `dateTime` namespace instead, but we have\n * to convert the format before `intl-messageformat` can be used.\n */ function convertFormatsToIntlMessageFormat(formats, timeZone) {\n    const formatsWithTimeZone = timeZone ? {\n        ...formats,\n        dateTime: setTimeZoneInFormats(formats.dateTime, timeZone)\n    } : formats;\n    const mfDateDefaults = IntlMessageFormat__default.default.formats.date;\n    const defaultDateFormats = timeZone ? setTimeZoneInFormats(mfDateDefaults, timeZone) : mfDateDefaults;\n    const mfTimeDefaults = IntlMessageFormat__default.default.formats.time;\n    const defaultTimeFormats = timeZone ? setTimeZoneInFormats(mfTimeDefaults, timeZone) : mfTimeDefaults;\n    return {\n        ...formatsWithTimeZone,\n        date: {\n            ...defaultDateFormats,\n            ...formatsWithTimeZone === null || formatsWithTimeZone === void 0 ? void 0 : formatsWithTimeZone.dateTime\n        },\n        time: {\n            ...defaultTimeFormats,\n            ...formatsWithTimeZone === null || formatsWithTimeZone === void 0 ? void 0 : formatsWithTimeZone.dateTime\n        }\n    };\n}\n// eslint-disable-next-line import/no-named-as-default -- False positive\nfunction resolvePath(locale, messages, key, namespace) {\n    const fullKey = initializeConfig.joinPath(namespace, key);\n    if (!messages) {\n        throw new Error(\"No messages available at `\".concat(namespace, \"`.\"));\n    }\n    let message = messages;\n    key.split(\".\").forEach((part)=>{\n        const next = message[part];\n        if (part == null || next == null) {\n            throw new Error(\"Could not resolve `\".concat(fullKey, \"` in messages for locale `\").concat(locale, \"`.\"));\n        }\n        message = next;\n    });\n    return message;\n}\nfunction prepareTranslationValues(values) {\n    if (Object.keys(values).length === 0) return undefined;\n    // Workaround for https://github.com/formatjs/formatjs/issues/1467\n    const transformedValues = {};\n    Object.keys(values).forEach((key)=>{\n        let index = 0;\n        const value = values[key];\n        let transformed;\n        if (typeof value === \"function\") {\n            transformed = (chunks)=>{\n                const result = value(chunks);\n                return /*#__PURE__*/ React.isValidElement(result) ? /*#__PURE__*/ React.cloneElement(result, {\n                    key: key + index++\n                }) : result;\n            };\n        } else {\n            transformed = value;\n        }\n        transformedValues[key] = transformed;\n    });\n    return transformedValues;\n}\nfunction getMessagesOrError(locale, messages, namespace) {\n    let onError = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : initializeConfig.defaultOnError;\n    try {\n        if (!messages) {\n            throw new Error(\"No messages were configured on the provider.\");\n        }\n        const retrievedMessages = namespace ? resolvePath(locale, messages, namespace) : messages;\n        if (!retrievedMessages) {\n            throw new Error(\"No messages for namespace `\".concat(namespace, \"` found.\"));\n        }\n        return retrievedMessages;\n    } catch (error) {\n        const intlError = new initializeConfig.IntlError(initializeConfig.IntlErrorCode.MISSING_MESSAGE, error.message);\n        onError(intlError);\n        return intlError;\n    }\n}\nfunction getPlainMessage(candidate, values) {\n    if (values) return undefined;\n    const unescapedMessage = candidate.replace(/'([{}])/gi, \"$1\");\n    // Placeholders can be in the message if there are default values,\n    // or if the user has forgotten to provide values. In the latter\n    // case we need to compile the message to receive an error.\n    const hasPlaceholders = /<|{/.test(unescapedMessage);\n    if (!hasPlaceholders) {\n        return unescapedMessage;\n    }\n    return undefined;\n}\nfunction createBaseTranslator(config) {\n    const messagesOrError = getMessagesOrError(config.locale, config.messages, config.namespace, config.onError);\n    return createBaseTranslatorImpl({\n        ...config,\n        messagesOrError\n    });\n}\nfunction createBaseTranslatorImpl(_ref) {\n    let { defaultTranslationValues, formats: globalFormats, getMessageFallback = initializeConfig.defaultGetMessageFallback, locale, messageFormatCache, messagesOrError, namespace, onError, timeZone } = _ref;\n    function getFallbackFromErrorAndNotify(key, code, message) {\n        const error = new initializeConfig.IntlError(code, message);\n        onError(error);\n        return getMessageFallback({\n            error,\n            key,\n            namespace\n        });\n    }\n    function translateBaseFn(/** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key, /** Key value pairs for values to interpolate into the message. */ values, /** Provide custom formats for numbers, dates and times. */ formats) {\n        if (messagesOrError instanceof initializeConfig.IntlError) {\n            // We have already warned about this during render\n            return getMessageFallback({\n                error: messagesOrError,\n                key,\n                namespace\n            });\n        }\n        const messages = messagesOrError;\n        let message;\n        try {\n            message = resolvePath(locale, messages, key, namespace);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, initializeConfig.IntlErrorCode.MISSING_MESSAGE, error.message);\n        }\n        const cacheKey = initializeConfig.joinPath(locale, namespace, key, String(message));\n        let messageFormat;\n        if (messageFormatCache !== null && messageFormatCache !== void 0 && messageFormatCache.has(cacheKey)) {\n            messageFormat = messageFormatCache.get(cacheKey);\n        } else {\n            if (typeof message === \"object\") {\n                let code, errorMessage;\n                if (Array.isArray(message)) {\n                    code = initializeConfig.IntlErrorCode.INVALID_MESSAGE;\n                    {\n                        errorMessage = \"Message at `\".concat(initializeConfig.joinPath(namespace, key), \"` resolved to an array, but only strings are supported. See https://next-intl-docs.vercel.app/docs/usage/messages#arrays-of-messages\");\n                    }\n                } else {\n                    code = initializeConfig.IntlErrorCode.INSUFFICIENT_PATH;\n                    {\n                        errorMessage = \"Message at `\".concat(initializeConfig.joinPath(namespace, key), \"` resolved to an object, but only strings are supported. Use a `.` to retrieve nested messages. See https://next-intl-docs.vercel.app/docs/usage/messages#structuring-messages\");\n                    }\n                }\n                return getFallbackFromErrorAndNotify(key, code, errorMessage);\n            }\n            // Hot path that avoids creating an `IntlMessageFormat` instance\n            const plainMessage = getPlainMessage(message, values);\n            if (plainMessage) return plainMessage;\n            try {\n                messageFormat = new IntlMessageFormat__default.default(message, locale, convertFormatsToIntlMessageFormat({\n                    ...globalFormats,\n                    ...formats\n                }, timeZone), {\n                    formatters: {\n                        getNumberFormat (locales, options) {\n                            return new Intl.NumberFormat(locales, options);\n                        },\n                        getDateTimeFormat (locales, options) {\n                            // Workaround for https://github.com/formatjs/formatjs/issues/4279\n                            return new Intl.DateTimeFormat(locales, {\n                                timeZone,\n                                ...options\n                            });\n                        },\n                        getPluralRules (locales, options) {\n                            return new Intl.PluralRules(locales, options);\n                        }\n                    }\n                });\n            } catch (error) {\n                const thrownError = error;\n                return getFallbackFromErrorAndNotify(key, initializeConfig.IntlErrorCode.INVALID_MESSAGE, thrownError.message + (\"originalMessage\" in thrownError ? \" (\".concat(thrownError.originalMessage, \")\") : \"\"));\n            }\n            messageFormatCache === null || messageFormatCache === void 0 || messageFormatCache.set(cacheKey, messageFormat);\n        }\n        try {\n            const formattedMessage = messageFormat.format(// @ts-expect-error `intl-messageformat` expects a different format\n            // for rich text elements since a recent minor update. This\n            // needs to be evaluated in detail, possibly also in regards\n            // to be able to format to parts.\n            prepareTranslationValues({\n                ...defaultTranslationValues,\n                ...values\n            }));\n            if (formattedMessage == null) {\n                throw new Error(\"Unable to format `\".concat(key, \"` in \").concat(namespace ? \"namespace `\".concat(namespace, \"`\") : \"messages\"));\n            }\n            // Limit the function signature to return strings or React elements\n            return /*#__PURE__*/ React.isValidElement(formattedMessage) || // Arrays of React elements\n            Array.isArray(formattedMessage) || typeof formattedMessage === \"string\" ? formattedMessage : String(formattedMessage);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, initializeConfig.IntlErrorCode.FORMATTING_ERROR, error.message);\n        }\n    }\n    function translateFn(/** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key, /** Key value pairs for values to interpolate into the message. */ values, /** Provide custom formats for numbers, dates and times. */ formats) {\n        const result = translateBaseFn(key, values, formats);\n        if (typeof result !== \"string\") {\n            return getFallbackFromErrorAndNotify(key, initializeConfig.IntlErrorCode.INVALID_MESSAGE, \"The message `\".concat(key, \"` in \").concat(namespace ? \"namespace `\".concat(namespace, \"`\") : \"messages\", \" didn't resolve to a string. If you want to format rich text, use `t.rich` instead.\"));\n        }\n        return result;\n    }\n    translateFn.rich = translateBaseFn;\n    // Augment `translateBaseFn` to return plain strings\n    translateFn.markup = (key, values, formats)=>{\n        const result = translateBaseFn(key, // @ts-expect-error -- `MarkupTranslationValues` is practically a sub type\n        // of `RichTranslationValues` but TypeScript isn't smart enough here.\n        values, formats);\n        // When only string chunks are provided to the parser, only\n        // strings should be returned here. Note that we need a runtime\n        // check for this since rich text values could be accidentally\n        // inherited from `defaultTranslationValues`.\n        if (typeof result !== \"string\") {\n            const error = new initializeConfig.IntlError(initializeConfig.IntlErrorCode.FORMATTING_ERROR, \"`t.markup` only accepts functions for formatting that receive and return strings.\\n\\nE.g. t.markup('markup', {b: (chunks) => `<b>${chunks}</b>`})\");\n            onError(error);\n            return getMessageFallback({\n                error,\n                key,\n                namespace\n            });\n        }\n        return result;\n    };\n    translateFn.raw = (key)=>{\n        if (messagesOrError instanceof initializeConfig.IntlError) {\n            // We have already warned about this during render\n            return getMessageFallback({\n                error: messagesOrError,\n                key,\n                namespace\n            });\n        }\n        const messages = messagesOrError;\n        try {\n            return resolvePath(locale, messages, key, namespace);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, initializeConfig.IntlErrorCode.MISSING_MESSAGE, error.message);\n        }\n    };\n    return translateFn;\n}\n/**\n * For the strictly typed messages to work we have to wrap the namespace into\n * a mandatory prefix. See https://stackoverflow.com/a/71529575/343045\n */ function resolveNamespace(namespace, namespacePrefix) {\n    return namespace === namespacePrefix ? undefined : namespace.slice((namespacePrefix + \".\").length);\n}\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst WEEK = DAY * 7;\nconst MONTH = DAY * (365 / 12); // Approximation\nconst QUARTER = MONTH * 3;\nconst YEAR = DAY * 365;\nconst UNIT_SECONDS = {\n    second: SECOND,\n    seconds: SECOND,\n    minute: MINUTE,\n    minutes: MINUTE,\n    hour: HOUR,\n    hours: HOUR,\n    day: DAY,\n    days: DAY,\n    week: WEEK,\n    weeks: WEEK,\n    month: MONTH,\n    months: MONTH,\n    quarter: QUARTER,\n    quarters: QUARTER,\n    year: YEAR,\n    years: YEAR\n};\nfunction resolveRelativeTimeUnit(seconds) {\n    const absValue = Math.abs(seconds);\n    if (absValue < MINUTE) {\n        return \"second\";\n    } else if (absValue < HOUR) {\n        return \"minute\";\n    } else if (absValue < DAY) {\n        return \"hour\";\n    } else if (absValue < WEEK) {\n        return \"day\";\n    } else if (absValue < MONTH) {\n        return \"week\";\n    } else if (absValue < YEAR) {\n        return \"month\";\n    }\n    return \"year\";\n}\nfunction calculateRelativeTimeValue(seconds, unit) {\n    // We have to round the resulting values, as `Intl.RelativeTimeFormat`\n    // will include fractions like '2.1 hours ago'.\n    return Math.round(seconds / UNIT_SECONDS[unit]);\n}\nfunction createFormatter(_ref) {\n    let { formats, locale, now: globalNow, onError = initializeConfig.defaultOnError, timeZone: globalTimeZone } = _ref;\n    function resolveFormatOrOptions(typeFormats, formatOrOptions) {\n        let options;\n        if (typeof formatOrOptions === \"string\") {\n            const formatName = formatOrOptions;\n            options = typeFormats === null || typeFormats === void 0 ? void 0 : typeFormats[formatName];\n            if (!options) {\n                const error = new initializeConfig.IntlError(initializeConfig.IntlErrorCode.MISSING_FORMAT, \"Format `\".concat(formatName, \"` is not available. You can configure it on the provider or provide custom options.\"));\n                onError(error);\n                throw error;\n            }\n        } else {\n            options = formatOrOptions;\n        }\n        return options;\n    }\n    function getFormattedValue(value, formatOrOptions, typeFormats, formatter) {\n        let options;\n        try {\n            options = resolveFormatOrOptions(typeFormats, formatOrOptions);\n        } catch (error) {\n            return String(value);\n        }\n        try {\n            return formatter(options);\n        } catch (error) {\n            onError(new initializeConfig.IntlError(initializeConfig.IntlErrorCode.FORMATTING_ERROR, error.message));\n            return String(value);\n        }\n    }\n    function dateTime(/** If a number is supplied, this is interpreted as a UTC timestamp. */ value, /** If a time zone is supplied, the `value` is converted to that time zone.\n   * Otherwise the user time zone will be used. */ formatOrOptions) {\n        return getFormattedValue(value, formatOrOptions, formats === null || formats === void 0 ? void 0 : formats.dateTime, (options)=>{\n            var _options;\n            if (!((_options = options) !== null && _options !== void 0 && _options.timeZone)) {\n                if (globalTimeZone) {\n                    options = {\n                        ...options,\n                        timeZone: globalTimeZone\n                    };\n                } else {\n                    onError(new initializeConfig.IntlError(initializeConfig.IntlErrorCode.ENVIRONMENT_FALLBACK, \"The `timeZone` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl-docs.vercel.app/docs/configuration#time-zone\"));\n                }\n            }\n            return new Intl.DateTimeFormat(locale, options).format(value);\n        });\n    }\n    function number(value, formatOrOptions) {\n        return getFormattedValue(value, formatOrOptions, formats === null || formats === void 0 ? void 0 : formats.number, (options)=>new Intl.NumberFormat(locale, options).format(value));\n    }\n    function getGlobalNow() {\n        if (globalNow) {\n            return globalNow;\n        } else {\n            onError(new initializeConfig.IntlError(initializeConfig.IntlErrorCode.ENVIRONMENT_FALLBACK, \"The `now` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl-docs.vercel.app/docs/configuration#now\"));\n            return new Date();\n        }\n    }\n    function extractNowDate(nowOrOptions) {\n        if (nowOrOptions instanceof Date || typeof nowOrOptions === \"number\") {\n            return new Date(nowOrOptions);\n        }\n        if ((nowOrOptions === null || nowOrOptions === void 0 ? void 0 : nowOrOptions.now) !== undefined) {\n            return new Date(nowOrOptions.now);\n        }\n        return getGlobalNow();\n    }\n    function relativeTime(/** The date time that needs to be formatted. */ date, /** The reference point in time to which `date` will be formatted in relation to.  */ nowOrOptions) {\n        try {\n            const dateDate = new Date(date);\n            const nowDate = extractNowDate(nowOrOptions);\n            const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;\n            const unit = typeof nowOrOptions === \"number\" || nowOrOptions instanceof Date || (nowOrOptions === null || nowOrOptions === void 0 ? void 0 : nowOrOptions.unit) === undefined ? resolveRelativeTimeUnit(seconds) : nowOrOptions.unit;\n            const value = calculateRelativeTimeValue(seconds, unit);\n            return new Intl.RelativeTimeFormat(locale, {\n                // `numeric: 'auto'` can theoretically produce output like \"yesterday\",\n                // but it only works with integers. E.g. -1 day will produce \"yesterday\",\n                // but -1.1 days will produce \"-1.1 days\". Rounding before formatting is\n                // not desired, as the given dates might cross a threshold were the\n                // output isn't correct anymore. Example: 2024-01-08T23:00:00.000Z and\n                // 2024-01-08T01:00:00.000Z would produce \"yesterday\", which is not the\n                // case. By using `always` we can ensure correct output. The only exception\n                // is the formatting of times <1 second as \"now\".\n                numeric: unit === \"second\" ? \"auto\" : \"always\"\n            }).format(value, unit);\n        } catch (error) {\n            onError(new initializeConfig.IntlError(initializeConfig.IntlErrorCode.FORMATTING_ERROR, error.message));\n            return String(date);\n        }\n    }\n    function list(value, formatOrOptions) {\n        return getFormattedValue(value, formatOrOptions, formats === null || formats === void 0 ? void 0 : formats.list, (options)=>new Intl.ListFormat(locale, options).format(value));\n    }\n    return {\n        dateTime,\n        number,\n        relativeTime,\n        list\n    };\n}\nexports.createBaseTranslator = createBaseTranslator;\nexports.createFormatter = createFormatter;\nexports.resolveNamespace = resolveNamespace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/use-intl/dist/development/createFormatter-3fcd09b9.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/use-intl/dist/development/initializeConfig-c503e215.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/use-intl/dist/development/initializeConfig-c503e215.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nlet IntlErrorCode = /*#__PURE__*/ function(IntlErrorCode) {\n    IntlErrorCode[\"MISSING_MESSAGE\"] = \"MISSING_MESSAGE\";\n    IntlErrorCode[\"MISSING_FORMAT\"] = \"MISSING_FORMAT\";\n    IntlErrorCode[\"ENVIRONMENT_FALLBACK\"] = \"ENVIRONMENT_FALLBACK\";\n    IntlErrorCode[\"INSUFFICIENT_PATH\"] = \"INSUFFICIENT_PATH\";\n    IntlErrorCode[\"INVALID_MESSAGE\"] = \"INVALID_MESSAGE\";\n    IntlErrorCode[\"INVALID_KEY\"] = \"INVALID_KEY\";\n    IntlErrorCode[\"FORMATTING_ERROR\"] = \"FORMATTING_ERROR\";\n    return IntlErrorCode;\n}({});\nclass IntlError extends Error {\n    constructor(code, originalMessage){\n        let message = code;\n        if (originalMessage) {\n            message += \": \" + originalMessage;\n        }\n        super(message);\n        _defineProperty(this, \"code\", void 0);\n        _defineProperty(this, \"originalMessage\", void 0);\n        this.code = code;\n        if (originalMessage) {\n            this.originalMessage = originalMessage;\n        }\n    }\n}\nfunction joinPath() {\n    for(var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++){\n        parts[_key] = arguments[_key];\n    }\n    return parts.filter(Boolean).join(\".\");\n}\n/**\n * Contains defaults that are used for all entry points into the core.\n * See also `InitializedIntlConfiguration`.\n */ function defaultGetMessageFallback(props) {\n    return joinPath(props.namespace, props.key);\n}\nfunction defaultOnError(error) {\n    console.error(error);\n}\nfunction validateMessagesSegment(messages, invalidKeyLabels, parentPath) {\n    Object.entries(messages).forEach((_ref)=>{\n        let [key, messageOrMessages] = _ref;\n        if (key.includes(\".\")) {\n            let keyLabel = key;\n            if (parentPath) keyLabel += \" (at \".concat(parentPath, \")\");\n            invalidKeyLabels.push(keyLabel);\n        }\n        if (messageOrMessages != null && typeof messageOrMessages === \"object\") {\n            validateMessagesSegment(messageOrMessages, invalidKeyLabels, joinPath(parentPath, key));\n        }\n    });\n}\nfunction validateMessages(messages, onError) {\n    const invalidKeyLabels = [];\n    validateMessagesSegment(messages, invalidKeyLabels);\n    if (invalidKeyLabels.length > 0) {\n        onError(new IntlError(IntlErrorCode.INVALID_KEY, 'Namespace keys can not contain the character \".\" as this is used to express nesting. Please remove it or replace it with another character.\\n\\nInvalid '.concat(invalidKeyLabels.length === 1 ? \"key\" : \"keys\", \": \").concat(invalidKeyLabels.join(\", \"), '\\n\\nIf you\\'re migrating from a flat structure, you can convert your messages as follows:\\n\\nimport {set} from \"lodash\";\\n\\nconst input = {\\n  \"one.one\": \"1.1\",\\n  \"one.two\": \"1.2\",\\n  \"two.one.one\": \"2.1.1\"\\n};\\n\\nconst output = Object.entries(input).reduce(\\n  (acc, [key, value]) => set(acc, key, value),\\n  {}\\n);\\n\\n// Output:\\n//\\n// {\\n//   \"one\": {\\n//     \"one\": \"1.1\",\\n//     \"two\": \"1.2\"\\n//   },\\n//   \"two\": {\\n//     \"one\": {\\n//       \"one\": \"2.1.1\"\\n//     }\\n//   }\\n// }\\n')));\n    }\n}\n/**\n * Enhances the incoming props with defaults.\n */ function initializeConfig(_ref) {\n    let { getMessageFallback, messages, onError, ...rest } = _ref;\n    const finalOnError = onError || defaultOnError;\n    const finalGetMessageFallback = getMessageFallback || defaultGetMessageFallback;\n    {\n        if (messages) {\n            validateMessages(messages, finalOnError);\n        }\n    }\n    return {\n        ...rest,\n        messages,\n        onError: finalOnError,\n        getMessageFallback: finalGetMessageFallback\n    };\n}\nexports.IntlError = IntlError;\nexports.IntlErrorCode = IntlErrorCode;\nexports.defaultGetMessageFallback = defaultGetMessageFallback;\nexports.defaultOnError = defaultOnError;\nexports.initializeConfig = initializeConfig;\nexports.joinPath = joinPath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/use-intl/dist/development/initializeConfig-c503e215.js\n");

/***/ })

};
;